<?xml version="1.0"?>
<doc processed="true" examples="true">
  <assembly>
    <name>Leadtools.Forms.DocumentWriters</name>
  </assembly>
  <members>
    <member name="T:Leadtools.Forms.DocumentWriters.DocumentEmptyPage">
      <summary>Data for one empty page to be added to a document file. <a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
      <remarks>
        <para>The <see cref="T:Leadtools.Forms.DocumentWriters.DocumentEmptyPage" /> class derives from <see cref="T:Leadtools.Forms.DocumentWriters.DocumentPage" /> and contains the data for one empty page to be added to a document file. It is used as a parameter to the
            <see cref="M:Leadtools.Forms.DocumentWriters.DocumentWriter.AddPage(Leadtools.Forms.DocumentWriters.DocumentPage)">DocumentWriter.AddPage</see> or <see cref="M:Leadtools.Forms.DocumentWriters.DocumentWriter.InsertPage(Leadtools.Forms.DocumentWriters.DocumentPage,System.Int32)">DocumentWriter.InsertPage</see> methods used to add
            the page.</para>
        <para>The LEADTOOLS Document Writer supports creating documents with zero or more empty pages inside them. Simply add a page with type
            <see cref="T:Leadtools.Forms.DocumentWriters.DocumentEmptyPage">DocumentEmptyPage</see> and call the
            <see cref="M:Leadtools.Forms.DocumentWriters.DocumentWriter.AddPage(Leadtools.Forms.DocumentWriters.DocumentPage)">DocumentWriter.AddPage</see> or <see cref="M:Leadtools.Forms.DocumentWriters.DocumentWriter.InsertPage(Leadtools.Forms.DocumentWriters.DocumentPage,System.Int32)">DocumentWriter.InsertPage</see> methods. The
            dimension of the empty page must be set before hand in the <see cref="P:Leadtools.Forms.DocumentWriters.DocumentEmptyPage.Width">DocumentEmptyPage.Width</see> and
            <see cref="P:Leadtools.Forms.DocumentWriters.DocumentEmptyPage.Height">DocumentEmptyPage.Height</see> and its resolution set to
            <see cref="P:Leadtools.Forms.DocumentWriters.DocumentOptions.EmptyPageResolution">DocumentOptions.EmptyPageResolution</see>. As many empty pages as desired can be added in any index desired. 
            To use empty pages, make sure the <see cref="P:Leadtools.Forms.DocumentWriters.DocumentOptions.PageRestriction">DocumentOptions.PageRestriction</see>
            property is set to <see cref="T:Leadtools.Forms.DocumentWriters.DocumentPageRestriction">DocumentPageRestriction.Relaxed</see>.</para>
        <para>For more information, refer to <see cref="T:Leadtools.Forms.DocumentWriters.PdfDocumentOptions" />.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.DocumentWriters.DocumentRasterPage" />.</example>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.DocumentWriters.DocumentWriter" />
      <seealso cref="T:Leadtools.Forms.DocumentWriters.DocumentFormat" />
      <seealso cref="T:FT.Topics.ProgrammingWithDocumentWriters">Programming with LEADTOOLS Document Writers</seealso>
      <seealso cref="T:Leadtools.Topics.FilesToBeIncludedWithYourApplication">Files to be Included with Your Application</seealso>
      <seealso cref="T:Leadtools.Topics.UnlockingSpecialLEADFeatures">Unlocking Special LEAD Features</seealso>
    </member>
    <member name="T:Leadtools.Forms.DocumentWriters.DocumentPage">
      <summary>Data for one page to be added to a document file. <a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="WinRTicon.png" class="WinRTIconTag" name="WinRTIconTag" title="WinRT support" border="0" /></a></summary>
      <remarks>
        <para>The <see cref="T:Leadtools.Forms.DocumentWriters.DocumentPage" /> class contains data for one page to be added to a document file. It is used as a parameter to the
            <see cref="M:Leadtools.Forms.DocumentWriters.DocumentWriter.AddPage(Leadtools.Forms.DocumentWriters.DocumentPage)">DocumentWriter.AddPage</see> or <see cref="M:Leadtools.Forms.DocumentWriters.DocumentWriter.InsertPage(Leadtools.Forms.DocumentWriters.DocumentPage,System.Int32)">DocumentWriter.InsertPage</see> methods used to add the page.</para>
        <para>
          <see cref="T:Leadtools.Forms.DocumentWriters.DocumentPage" /> is abstract, you must use one of the derived classes:</para>
        <para>
          <list type="table">
            <listheader>
              <term>Class</term>
              <description>Description</description>
            </listheader>
            <item>
              <term>
                <see cref="T:Leadtools.Forms.DocumentWriters.DocumentEmptyPage" />
              </term>
              <description>
                <para>Add an empty page.</para>
              </description>
            </item>
            <item>
              <term>
                <see cref="T:Leadtools.Forms.DocumentWriters.DocumentSvgPage" />
              </term>
              <description>
                <para>Add page from a Scalable Vector Object (SVG) object (<see cref="T:Leadtools.ISvgDocument" />).</para>
              </description>
            </item>
            <item>
              <term>
                <see cref="T:Leadtools.Forms.DocumentWriters.DocumentEmfPage" />
              </term>
              <description>
                <para>Add page from a Windows Enhanced Metafile (EMF) handle.</para>
              </description>
            </item>
            <item>
              <term>
                <see cref="T:Leadtools.Forms.DocumentWriters.DocumentRasterPage" />
              </term>
              <description>
                <para>Add page from a raster image object (<see cref="T:Leadtools.RasterImage" />).</para>
              </description>
            </item>
          </list>
        </para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.DocumentWriters.DocumentWriter" />.</example>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.DocumentWriters.DocumentWriter" />
      <seealso cref="T:Leadtools.Forms.DocumentWriters.DocumentFormat" />
      <seealso cref="T:FT.Topics.ProgrammingWithDocumentWriters">Programming with LEADTOOLS Document Writers</seealso>
      <seealso cref="T:Leadtools.Topics.FilesToBeIncludedWithYourApplication">Files to be Included with Your Application</seealso>
      <seealso cref="T:Leadtools.Topics.UnlockingSpecialLEADFeatures">Unlocking Special LEAD Features</seealso>
    </member>
    <member name="M:Leadtools.Forms.DocumentWriters.DocumentPage.#ctor">
      <summary>Initializes a new DocumentPage object <see cref="T:Leadtools.Forms.DocumentWriters.DocumentPage" />. <a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
      <noexample />
    </member>
    <member name="M:Leadtools.Forms.DocumentWriters.DocumentPage.Clone">
      <summary>Creates an exact copy of this <see cref="T:Leadtools.Forms.DocumentWriters.DocumentPage" /><a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
      <returns>The <see cref="T:Leadtools.Forms.DocumentWriters.DocumentPage" /> this method creates.</returns>
      <noremarks />
      <noexample />
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.DocumentWriters.DocumentWriter">Document Writers</seealso>
      <seealso cref="T:FT.Topics.ProgrammingWithDocumentWriters">Programming with LEADTOOLS Document Writers</seealso>
      <seealso cref="T:Leadtools.Topics.FilesToBeIncludedWithYourApplication">Files to be Included with Your Application</seealso>
      <seealso cref="T:Leadtools.Topics.UnlockingSpecialLEADFeatures">Unlocking Special LEAD Features</seealso>
    </member>
    <member name="P:Leadtools.Forms.DocumentWriters.DocumentPage.Type">
      <summary>Gets the type of this document page. <a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
      <value>The type of this document page.</value>
      <noremarks />
      <noexample />
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.DocumentWriters.DocumentWriter">Document Writers</seealso>
      <seealso cref="T:FT.Topics.ProgrammingWithDocumentWriters">Programming with LEADTOOLS Document Writers</seealso>
      <seealso cref="T:Leadtools.Topics.FilesToBeIncludedWithYourApplication">Files to be Included with Your Application</seealso>
      <seealso cref="T:Leadtools.Topics.UnlockingSpecialLEADFeatures">Unlocking Special LEAD Features</seealso>
    </member>
    <member name="M:Leadtools.Forms.DocumentWriters.DocumentEmptyPage.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Leadtools.Forms.DocumentWriters.DocumentEmptyPage" /> class. <a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
      <remarks>
        <para>This constructor will initialize the members of <see cref="T:Leadtools.Forms.DocumentWriters.DocumentEmptyPage" /> as follows:</para>
        <list type="table">
          <listheader>
            <term>Member</term>
            <description>Description</description>
          </listheader>
          <item>
            <term>
              <see cref="P:Leadtools.Forms.DocumentWriters.DocumentEmptyPage.Type" />
            </term>
            <description>
              <see cref="T:Leadtools.Forms.DocumentWriters.DocumentPageType">DocumentPageType.Empty</see>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Forms.DocumentWriters.DocumentEmptyPage.Width" />
            </term>
            <description>8.5</description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Forms.DocumentWriters.DocumentEmptyPage.Height" />
            </term>
            <description>11</description>
          </item>
        </list>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Forms.DocumentWriters.DocumentRasterPage" />.</para>
      </example>
    </member>
    <member name="M:Leadtools.Forms.DocumentWriters.DocumentEmptyPage.Clone">
      <summary>Creates an exact copy of this <see cref="T:Leadtools.Forms.DocumentWriters.DocumentEmptyPage" /><a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
      <returns>The <see cref="T:Leadtools.Forms.DocumentWriters.DocumentPage" /> this method creates.</returns>
      <noremarks />
      <noexample />
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.DocumentWriters.DocumentWriter">Document Writers</seealso>
      <seealso cref="T:FT.Topics.ProgrammingWithDocumentWriters">Programming with LEADTOOLS Document Writers</seealso>
      <seealso cref="T:Leadtools.Topics.FilesToBeIncludedWithYourApplication">Files to be Included with Your Application</seealso>
      <seealso cref="T:Leadtools.Topics.UnlockingSpecialLEADFeatures">Unlocking Special LEAD Features</seealso>
    </member>
    <member name="P:Leadtools.Forms.DocumentWriters.DocumentEmptyPage.Type">
      <summary>Gets the type of this document page. <a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
      <value>The type of this document page (<see cref="T:Leadtools.Forms.DocumentWriters.DocumentPageType">DocumentPageType.Empty</see>).</value>
      <noremarks />
      <noexample />
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.DocumentWriters.DocumentWriter">Document Writers</seealso>
      <seealso cref="T:FT.Topics.ProgrammingWithDocumentWriters">Programming with LEADTOOLS Document Writers</seealso>
      <seealso cref="T:Leadtools.Topics.FilesToBeIncludedWithYourApplication">Files to be Included with Your Application</seealso>
      <seealso cref="T:Leadtools.Topics.UnlockingSpecialLEADFeatures">Unlocking Special LEAD Features</seealso>
    </member>
    <member name="P:Leadtools.Forms.DocumentWriters.DocumentEmptyPage.Width">
      <summary>Gets or sets the page width in inches. <a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
      <value>Page width in inches. Default value is 8.5.</value>
      <remarks>
        <para>The <see cref="P:Leadtools.Forms.DocumentWriters.DocumentEmptyPage.Width">DocumentEmptyPage.Width</see> and <see cref="P:Leadtools.Forms.DocumentWriters.DocumentEmptyPage.Height">DocumentEmptyPage.Height</see>
            properties are used to set the empty page size in inches. The values cannot be 0 when the object is passed to
            <see cref="M:Leadtools.Forms.DocumentWriters.DocumentWriter.AddPage(Leadtools.Forms.DocumentWriters.DocumentPage)">DocumentWriter.AddPage</see> or <see cref="M:Leadtools.Forms.DocumentWriters.DocumentWriter.InsertPage(Leadtools.Forms.DocumentWriters.DocumentPage,System.Int32)">DocumentWriter.InsertPage</see>.</para>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Forms.DocumentWriters.DocumentRasterPage" />.</para>
      </example>
    </member>
    <member name="P:Leadtools.Forms.DocumentWriters.DocumentEmptyPage.Height">
      <summary>Gets or sets the page height in inches. <a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
      <value>Page height in inches. Default value is 11.</value>
      <remarks>
        <para>The <see cref="P:Leadtools.Forms.DocumentWriters.DocumentEmptyPage.Width">DocumentEmptyPage.Width</see> and <see cref="P:Leadtools.Forms.DocumentWriters.DocumentEmptyPage.Height">DocumentEmptyPage.Height</see>
            properties are used to set the empty page size in inches. The values cannot be 0 when the object is passed to
            <see cref="M:Leadtools.Forms.DocumentWriters.DocumentWriter.AddPage(Leadtools.Forms.DocumentWriters.DocumentPage)">DocumentWriter.AddPage</see> or <see cref="M:Leadtools.Forms.DocumentWriters.DocumentWriter.InsertPage(Leadtools.Forms.DocumentWriters.DocumentPage,System.Int32)">DocumentWriter.InsertPage</see>.</para>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Forms.DocumentWriters.DocumentRasterPage" />.</para>
      </example>
    </member>
    <member name="T:Leadtools.Forms.DocumentWriters.DocumentEmfPage">
      <summary>Data for one Windows Enhanced Metafile (WMF) page to be added to a document file. <a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
      <remarks>
        <para>The <see cref="T:Leadtools.Forms.DocumentWriters.DocumentEmfPage" /> class derives from <see cref="T:Leadtools.Forms.DocumentWriters.DocumentPage" /> and contains the data for one EMF page to be added to a document file. It is used as a parameter to the
            <see cref="M:Leadtools.Forms.DocumentWriters.DocumentWriter.AddPage(Leadtools.Forms.DocumentWriters.DocumentPage)">DocumentWriter.AddPage</see> or <see cref="M:Leadtools.Forms.DocumentWriters.DocumentWriter.InsertPage(Leadtools.Forms.DocumentWriters.DocumentPage,System.Int32)">DocumentWriter.InsertPage</see> methods used to add the page.</para>
        <para>The <see cref="P:Leadtools.Forms.DocumentWriters.DocumentEmfPage.EmfHandle">DocumentEmfPage.EmfHandle</see> property must contain a valid Windows Enhanced Meta File handle (EMF) that contains the visual representation
            of the page. This EMF handle can obtained through multiple sources as explained in
            <see cref="T:FT.Topics.ProgrammingWithDocumentWriters">LEADTOOLS Document Writers</see>.</para>
        <para>
          <see cref="P:Leadtools.Forms.DocumentWriters.DocumentEmfPage.EmfHandle">DocumentEmfPage.EmfHandle</see> is used as is when
            <see cref="M:Leadtools.Forms.DocumentWriters.DocumentWriter.AddPage(Leadtools.Forms.DocumentWriters.DocumentPage)">DocumentWriter.AddPage</see> or <see cref="M:Leadtools.Forms.DocumentWriters.DocumentWriter.InsertPage(Leadtools.Forms.DocumentWriters.DocumentPage,System.Int32)">DocumentWriter.InsertPage</see> is called
            and the framework does not delete it. You must use the Windows API <c>DeleteEnhMetaFile</c> to delete the object when it is no longer used.</para>
        <para>The <see cref="P:Leadtools.Forms.DocumentWriters.DocumentEmfPage.Image">DocumentEmfPage.Image</see> property is optional and is used only when the document being created is PDF with the Image/Text overlay option. To
            create a PDF document with image/text overlay, perform the following steps:
            <list type="bullet"><item><description>Set the value of the <see cref="P:Leadtools.Forms.DocumentWriters.PdfDocumentOptions.ImageOverText">PdfDocumentOptions.ImageOverText</see> to <strong>true</strong>. You can use the
            <see cref="M:Leadtools.Forms.DocumentWriters.DocumentWriter.GetOptions(Leadtools.Forms.DocumentWriters.DocumentFormat)">DocumentWriter.GetOptions</see> and <see cref="M:Leadtools.Forms.DocumentWriters.DocumentWriter.SetOptions(Leadtools.Forms.DocumentWriters.DocumentFormat,Leadtools.Forms.DocumentWriters.DocumentOptions)">DocumentWriter.SetOptions</see> methods to the get the options used when saving a
            PDF document.</description></item><item><description>Call <see cref="M:Leadtools.Forms.DocumentWriters.DocumentWriter.BeginDocument(System.String,Leadtools.Forms.DocumentWriters.DocumentFormat)">DocumentWriter.BeginDocument</see> with <see cref="T:Leadtools.Forms.DocumentWriters.DocumentFormat">DocumentFormat.Pdf</see> as the format to use.</description></item><item><description>Add the document pages. The <see cref="P:Leadtools.Forms.DocumentWriters.DocumentEmfPage.EmfHandle">DocumentEmfPage.EmfHandle</see> property must point to the EMF representation of the page and the
            <see cref="P:Leadtools.Forms.DocumentWriters.DocumentEmfPage.Image">DocumentEmfPage.Image</see> must contain a <see cref="T:Leadtools.RasterImage" /> object for the image to be used as the overlay for the page.</description></item><item><description>Repeat for each page in the document.</description></item><item><description>Call <see cref="M:Leadtools.Forms.DocumentWriters.DocumentWriter.EndDocument">DocumentWriter.EndDocument</see> to finish creating the document file on disk.</description></item></list></para>
        <para>The Dots/Inch (DPI) of the page is the same as the DPI stored in the <see cref="P:Leadtools.Forms.DocumentWriters.DocumentEmfPage.EmfHandle">DocumentEmfPage.EmfHandle</see> property. Therefore, to create a page
            with 300 DPI, you must add a document page with an EMF that has a DPI of 300 (both horizontally or vertically although the LEADTOOLS Document Writer supports different values
            for the DPI). If you are using the PDF with image/text feature, you must set the DPI of the <see cref="T:Leadtools.RasterImage" /> object to the same DPI as the EMF handle using the
            <see cref="P:Leadtools.RasterImage.XResolution">RasterImage.XResolution</see> and <see cref="P:Leadtools.RasterImage.YResolution">RasterImage.YResolution</see> properties. To override this behavior and
            set a custom resolution, set the value of the <see cref="P:Leadtools.Forms.DocumentWriters.DocumentOptions.DocumentResolution">DocumentOptions.DocumentResolution</see> property
            to the desired final resolution. This value will be used instead of the resolution of the EMF handle.</para>
        <para>The LEADTOOLS Document Writer supports creating documents with zero or more empty pages inside them. Use
            <see cref="M:Leadtools.Forms.DocumentWriters.DocumentWriter.AddPage(Leadtools.Forms.DocumentWriters.DocumentPage)">DocumentWriter.AddPage</see> or <see cref="M:Leadtools.Forms.DocumentWriters.DocumentWriter.InsertPage(Leadtools.Forms.DocumentWriters.DocumentPage,System.Int32)">DocumentWriter.InsertPage</see>
            an <see cref="T:Leadtools.Forms.DocumentWriters.DocumentEmptyPage" /> with the dimension of the empty page set before hand in the
            <see cref="P:Leadtools.Forms.DocumentWriters.DocumentOptions.EmptyPageWidth">DocumentOptions.EmptyPageWidth</see> and
            <see cref="P:Leadtools.Forms.DocumentWriters.DocumentOptions.EmptyPageHeight">DocumentOptions.EmptyPageHeight</see> and its resolution set to
            <see cref="P:Leadtools.Forms.DocumentWriters.DocumentOptions.EmptyPageResolution">DocumentOptions.EmptyPageResolution</see>. As many empty pages as desired can be added in any index
            desired. To use empty pages, make sure the <see cref="P:Leadtools.Forms.DocumentWriters.DocumentOptions.PageRestriction">DocumentOptions.PageRestriction</see> property is set to
            <see cref="T:Leadtools.Forms.DocumentWriters.DocumentPageRestriction">DocumentPageRestriction.Relaxed</see>.</para>
        <para>For more information, refer to <see cref="T:Leadtools.Forms.DocumentWriters.PdfDocumentOptions" />.</para>
      </remarks>
      <example>
        <p>
          <para>This example will create EMF handles and then use them to create a multi-page PDF document.</para>
        </p>
        <code lang="VB">      Imports Leadtools
      Imports Leadtools.Codecs
      Imports Leadtools.Forms.DocumentWriters
      Imports Leadtools.Forms.Ocr

      &lt;TestMethod&gt; _
      Public Sub DocumentEmfPageExample()
         ' Output PDF file name
         Dim pdfFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "Example.pdf")
         ' Document properties, each page is 8.5 by 11 inches at 300 DPI. Typical dimensions
         Dim resolution As Integer = 300
         Dim pageWidth As Integer = CInt(8.5 * resolution)
         Dim pageHeight As Integer = CInt(11 * resolution)

         ' Create the document writer
         Dim docWriter As New DocumentWriter()
         docWriter.BeginDocument(pdfFileName, DocumentFormat.Pdf)

         For pageNumber As Integer = 1 To 2
            Dim page As New DocumentEmfPage()
            page.EmfHandle = GetPageEmf(pageNumber, pageWidth, pageHeight, resolution)
            docWriter.AddPage(page)

            If page.EmfHandle &lt;&gt; IntPtr.Zero Then
               DeleteEnhMetaFile(page.EmfHandle)
            End If
         Next

         docWriter.EndDocument()

         ' Show the PDF file
         System.Diagnostics.Process.Start(pdfFileName)
      End Sub

      Private Shared Function GetPageEmf(pageNumber As Integer, pageWidth As Integer, pageHeight As Integer, resolution As Integer) As IntPtr
         ' Get the screen DC
         Using graphicsScreen As Graphics = Graphics.FromHwndInternal(IntPtr.Zero)
            Dim hdcScreen As IntPtr = graphicsScreen.GetHdc()

            ' Calculate the EMF rectangle in 1/100 mm
            Dim frameRect As New RectangleF( _
               0, _
               0, _
               CType((pageWidth * 2540.0F + resolution / 2.0) / resolution, Single), _
               CType((pageHeight * 2540.0F + resolution / 2.0) / resolution, Single))

            ' Create the EMF, GDI compatible
            Using metaFile As New Metafile(hdcScreen, frameRect, MetafileFrameUnit.GdiCompatible, EmfType.EmfOnly, Nothing)
               ' No need for this anymore
               graphicsScreen.ReleaseHdc(hdcScreen)

               ' Now create the graphics to draw in from the metafile
               Using graphics As Graphics = graphics.FromImage(metaFile)
                  ' Get the EMF DPI
                  Dim header As MetafileHeader = metaFile.GetMetafileHeader()
                  Dim emfDpiX As Single = header.DpiX
                  Dim emfDpiY As Single = header.DpiY

                  ' We must convert each value we want from pixels to EMF coordinates, so use a scale
                  graphics.ScaleTransform(emfDpiX / resolution, emfDpiY / resolution)

                  ' To draw font, we must use this scale value to convert from point size
                  Dim fontScale As Single = CType(resolution, Single) / Math.Max(graphics.DpiX, graphics.DpiY)

                  ' Ready, now we can draw...

                  ' Fill it with white
                  Dim rc As New RectangleF(0, 0, pageWidth, pageHeight)
                  graphics.FillRectangle(Brushes.White, rc)

                  ' Put a frame
                  rc = New RectangleF(1, 1, pageWidth - 2, pageHeight - 2)
                  graphics.DrawRectangle(Pens.DarkGreen, rc.X, rc.Y, rc.Width, rc.Height)

                  ' Draw some text
                  Dim text As String = "This is page " + pageNumber.ToString()

                  Dim pointSize As Single = 20 * fontScale
                  ' fonts need to converted to scaled back, so ...
                  Using font As New Font("Arial", pointSize, FontStyle.Regular)
                     graphics.DrawString(text, font, Brushes.Black, 0, 0)
                  End Using

                  ' Add some vector objects, red line
                  rc = New Rectangle(50, 50, pageWidth - 100, pageHeight - 100)
                  graphics.DrawLine(Pens.Red, rc.Left, rc.Top, rc.Right, rc.Bottom)

                  ' blue rect somewhere
                  rc = New Rectangle(100, 100, 150, 100)
                  graphics.FillRectangle(Brushes.Blue, rc)
               End Using

               Return metaFile.GetHenhmetafile()
            End Using
         End Using
      End Function

      ' GDI interop
      &lt;DllImport("gdi32.dll")&gt; _
      Private Shared Function DeleteEnhMetaFile(hemf As IntPtr) As Integer
      End Function</code>
        <code lang="CS">      using Leadtools;
      using Leadtools.Codecs;
      using Leadtools.Forms.DocumentWriters;
      using Leadtools.Forms.Ocr;

      public void DocumentEmfPageExample()
      {
         // Output PDF file name
         var pdfFileName = Path.Combine(LEAD_VARS.ImagesDir, "Example.pdf");
         // Document properties, each page is 8.5 by 11 inches at 300 DPI. Typical dimensions
         var resolution = 300;
         var pageWidth = (int)(8.5 * resolution);
         var pageHeight = (int)(11 * resolution);

         // Create the document writer
         var docWriter = new DocumentWriter();
         docWriter.BeginDocument(pdfFileName, DocumentFormat.Pdf);

         for (var pageNumber = 1; pageNumber &lt;= 2; pageNumber++)
         {
            var page = new DocumentEmfPage();
            page.EmfHandle = GetPageEmf(pageNumber, pageWidth, pageHeight, resolution);
            docWriter.AddPage(page);

            if (page.EmfHandle != IntPtr.Zero)
               DeleteEnhMetaFile(page.EmfHandle);
         }

         docWriter.EndDocument();

         // Show the PDF file
         System.Diagnostics.Process.Start(pdfFileName);
      }

      private static IntPtr GetPageEmf(int pageNumber, int pageWidth, int pageHeight, int resolution)
      {
         // Get the screen DC
         using (var graphicsScreen = Graphics.FromHwndInternal(IntPtr.Zero))
         {
            var hdcScreen = graphicsScreen.GetHdc();

            // Calculate the EMF rectangle in 1/100 mm
            var frameRect = new RectangleF(
               0,
               0,
               ((float)pageWidth * 2540 + resolution / 2) / resolution,
               ((float)pageHeight * 2540 + resolution / 2) / resolution);

            // Create the EMF, GDI compatible
            using (var metaFile = new Metafile(hdcScreen, frameRect, MetafileFrameUnit.GdiCompatible, EmfType.EmfOnly, null))
            {
               // No need for this anymore
               graphicsScreen.ReleaseHdc(hdcScreen);

               // Now create the graphics to draw in from the metafile
               using (var graphics = Graphics.FromImage(metaFile))
               {
                  // Get the EMF DPI
                  MetafileHeader header = metaFile.GetMetafileHeader();
                  var emfDpiX = header.DpiX;
                  var emfDpiY = header.DpiY;

                  // We must convert each value we want from pixels to EMF coordinates, so use a scale
                  graphics.ScaleTransform(emfDpiX / resolution, emfDpiY / resolution);

                  // To draw font, we must use this scale value to convert from point size
                  var fontScale = (float)resolution / Math.Max(graphics.DpiX, graphics.DpiY);

                  // Ready, now we can draw...

                  // Fill it with white
                  var rc = new RectangleF(0, 0, pageWidth, pageHeight);
                  graphics.FillRectangle(Brushes.White, rc);

                  // Put a frame
                  rc = new RectangleF(1, 1, pageWidth - 2, pageHeight - 2);
                  graphics.DrawRectangle(Pens.DarkGreen, rc.X, rc.Y, rc.Width, rc.Height);

                  // Draw some text
                  var text = "This is page " + pageNumber.ToString();

                  float pointSize = 20 * fontScale;
                  // fonts need to converted to scaled back, so ...
                  using (var font = new Font("Arial", pointSize, FontStyle.Regular))
                     graphics.DrawString(text, font, Brushes.Black, 0, 0);

                  // Add some vector objects, red line
                  rc = new Rectangle(50, 50, pageWidth - 100, pageHeight - 100);
                  graphics.DrawLine(Pens.Red, rc.Left, rc.Top, rc.Right, rc.Bottom);

                  // blue rect somewhere
                  rc = new Rectangle(100, 100, 150, 100);
                  graphics.FillRectangle(Brushes.Blue, rc);
               }

               return metaFile.GetHenhmetafile();
            }
         }
      }

      // GDI interop
      [DllImport("gdi32.dll")]
      private static extern int DeleteEnhMetaFile(IntPtr hemf);</code>
      </example>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.DocumentWriters.DocumentWriter" />
      <seealso cref="T:Leadtools.Forms.DocumentWriters.DocumentFormat" />
      <seealso cref="T:FT.Topics.ProgrammingWithDocumentWriters">Programming with LEADTOOLS Document Writers</seealso>
      <seealso cref="T:Leadtools.Topics.FilesToBeIncludedWithYourApplication">Files to be Included with Your Application</seealso>
      <seealso cref="T:Leadtools.Topics.UnlockingSpecialLEADFeatures">Unlocking Special LEAD Features</seealso>
    </member>
    <member name="M:Leadtools.Forms.DocumentWriters.DocumentEmfPage.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Leadtools.Forms.DocumentWriters.DocumentEmfPage" /> class. <a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
      <remarks>
        <para>This constructor will initialize the members of <see cref="T:Leadtools.Forms.DocumentWriters.DocumentEmfPage" /> as follows:</para>
        <list type="table">
          <listheader>
            <term>Member</term>
            <description>Description</description>
          </listheader>
          <item>
            <term>
              <see cref="P:Leadtools.Forms.DocumentWriters.DocumentEmfPage.Type" />
            </term>
            <description>
              <see cref="T:Leadtools.Forms.DocumentWriters.DocumentPageType">DocumentPageType.Emf</see>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Forms.DocumentWriters.DocumentEmfPage.EmfHandle" />
            </term>
            <description>
              <see cref="T:System.IntPtr">IntPtr.Zero</see>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Forms.DocumentWriters.DocumentEmfPage.Image" />
            </term>
            <description>
              <strong>null</strong>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Forms.DocumentWriters.DocumentEmfPage.AnnotationContainer" />
            </term>
            <description>
              <strong>null</strong>
            </description>
          </item>
        </list>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Forms.DocumentWriters.DocumentEmfPage" />.</para>
      </example>
    </member>
    <member name="M:Leadtools.Forms.DocumentWriters.DocumentEmfPage.Clone">
      <summary>Creates an exact copy of this <see cref="T:Leadtools.Forms.DocumentWriters.DocumentEmfPage" /><a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
      <returns>The <see cref="T:Leadtools.Forms.DocumentWriters.DocumentPage" /> this method creates.</returns>
      <noremarks />
      <noexample />
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.DocumentWriters.DocumentWriter">Document Writers</seealso>
      <seealso cref="T:FT.Topics.ProgrammingWithDocumentWriters">Programming with LEADTOOLS Document Writers</seealso>
      <seealso cref="T:Leadtools.Topics.FilesToBeIncludedWithYourApplication">Files to be Included with Your Application</seealso>
      <seealso cref="T:Leadtools.Topics.UnlockingSpecialLEADFeatures">Unlocking Special LEAD Features</seealso>
    </member>
    <member name="P:Leadtools.Forms.DocumentWriters.DocumentEmfPage.EmfHandle">
      <summary>The Windows Enhanced Meta File handle representation of the page. <a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
      <value>An <see cref="T:System.IntPtr" /> structure that contains the unmanaged handle to the Windows Enhanced Meta File object.</value>
      <remarks>
        <para>The <see cref="P:Leadtools.Forms.DocumentWriters.DocumentEmfPage.EmfHandle" /> property must contain a valid Windows Enhanced Meta File handle (EMF)--it cannot be <strong>IntPtr.Zero</strong>. This
            EMF handle is used in the <see cref="M:Leadtools.Forms.DocumentWriters.DocumentWriter.AddPage(Leadtools.Forms.DocumentWriters.DocumentPage)">DocumentWriter.AddPage</see> or <see cref="M:Leadtools.Forms.DocumentWriters.DocumentWriter.InsertPage(Leadtools.Forms.DocumentWriters.DocumentPage,System.Int32)">DocumentWriter.InsertPage</see> methods to create the visual representation of the new page added to the document being created.</para>
        <para>The LEADTOOLS Document Writer toolkit will not use the <see cref="P:Leadtools.Forms.DocumentWriters.DocumentEmfPage.EmfHandle" /> after the call to
            <see cref="M:Leadtools.Forms.DocumentWriters.DocumentWriter.AddPage(Leadtools.Forms.DocumentWriters.DocumentPage)">DocumentWriter.AddPage</see> or <see cref="M:Leadtools.Forms.DocumentWriters.DocumentWriter.InsertPage(Leadtools.Forms.DocumentWriters.DocumentPage,System.Int32)">DocumentWriter.InsertPage</see> returns. This handle needs to be deleted to free the resources associated with it
            (for example, using the Windows API <strong>DeleteEnhMetaFile</strong>).</para>
        <para>The Windows Enhanced Meta File (EMF) objects can be obtained from multiple sources as explained in <see cref="T:FT.Topics.ProgrammingWithDocumentWriters">LEADTOOLS Document Writers</see>.</para>
        <para>The Dots/Inch (DPI) of the page is the same as the DPI stored in the <see cref="P:Leadtools.Forms.DocumentWriters.DocumentEmfPage.EmfHandle" /> property. Therefore, to create a page
            with 300 DPI, you must add a document page with an EMF that has a DPI of 300 (both horizontally or vertically although the LEADTOOLS Document Writer supports different values
            for the DPI). When using the PDF with image and text feature, set the DPI of the <see cref="T:Leadtools.RasterImage" /> object to the same DPI as the EMF handle using the
            <see cref="P:Leadtools.RasterImage.XResolution">RasterImage.XResolution</see> and <see cref="P:Leadtools.RasterImage.YResolution">RasterImage.YResolution</see> properties.</para>
        <para>The LEADTOOLS Document Writer supports creating documents with zero or more empty pages inside them. Simply pass a page of type
            <see cref="T:Leadtools.Forms.DocumentWriters.DocumentEmptyPage" /> to  <see cref="M:Leadtools.Forms.DocumentWriters.DocumentWriter.AddPage(Leadtools.Forms.DocumentWriters.DocumentPage)">DocumentWriter.AddPage</see> or <see cref="M:Leadtools.Forms.DocumentWriters.DocumentWriter.InsertPage(Leadtools.Forms.DocumentWriters.DocumentPage,System.Int32)">DocumentWriter.InsertPage</see> methods. The
            dimension of the empty page must be set before hand in the <see cref="P:Leadtools.Forms.DocumentWriters.DocumentOptions.EmptyPageWidth">DocumentOptions.EmptyPageWidth</see> and
            <see cref="P:Leadtools.Forms.DocumentWriters.DocumentOptions.EmptyPageHeight">DocumentOptions.EmptyPageHeight</see> and its resolution set to
            <see cref="P:Leadtools.Forms.DocumentWriters.DocumentOptions.EmptyPageResolution">DocumentOptions.EmptyPageResolution</see>. As many empty pages as desired can be added and
            in any index desired. To use empty pages, make sure the <see cref="P:Leadtools.Forms.DocumentWriters.DocumentOptions.PageRestriction">DocumentOptions.PageRestriction</see>
            property is set to <see cref="T:Leadtools.Forms.DocumentWriters.DocumentPageRestriction">DocumentPageRestriction.Relaxed</see>.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.DocumentWriters.DocumentEmfPage" />.</example>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.DocumentWriters.DocumentWriter" />
      <seealso cref="T:Leadtools.Forms.DocumentWriters.DocumentFormat" />
      <seealso cref="T:FT.Topics.ProgrammingWithDocumentWriters">Programming with LEADTOOLS Document Writers</seealso>
      <seealso cref="T:Leadtools.Topics.FilesToBeIncludedWithYourApplication">Files to be Included with Your Application</seealso>
      <seealso cref="T:Leadtools.Topics.UnlockingSpecialLEADFeatures">Unlocking Special LEAD Features</seealso>
    </member>
    <member name="P:Leadtools.Forms.DocumentWriters.DocumentEmfPage.Image">
      <summary>The image used for creating a PDF document page with the image and text overlay feature. <a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
      <value>A <see cref="T:Leadtools.RasterImage" /> that contains the optional raster image to use to create a PDF page with the image/text overlay feature. If this feature is not used,
            this property must be set to <strong>null</strong> (<strong>Nothing</strong> in Visual Basic).</value>
      <remarks>
        <para>The <see cref="P:Leadtools.Forms.DocumentWriters.DocumentEmfPage.Image" /> property is optional and is used only when the document being created is PDF with the Image and Text overlay option. To
            create a PDF document with image/text overlay, perform the following steps:
            <ul><li>Set the value of the <see cref="P:Leadtools.Forms.DocumentWriters.PdfDocumentOptions.ImageOverText">PdfDocumentOptions.ImageOverText</see> to <strong>true</strong>. You can use the
            <see cref="M:Leadtools.Forms.DocumentWriters.DocumentWriter.GetOptions(Leadtools.Forms.DocumentWriters.DocumentFormat)">DocumentWriter.GetOptions</see> and <see cref="M:Leadtools.Forms.DocumentWriters.DocumentWriter.SetOptions(Leadtools.Forms.DocumentWriters.DocumentFormat,Leadtools.Forms.DocumentWriters.DocumentOptions)">DocumentWriter.SetOptions</see> methods to the get the options used when saving a
            PDF document.</li><li>Call <see cref="M:Leadtools.Forms.DocumentWriters.DocumentWriter.BeginDocument(System.String,Leadtools.Forms.DocumentWriters.DocumentFormat)">DocumentWriter.BeginDocument</see> with <see cref="T:Leadtools.Forms.DocumentWriters.DocumentFormat">DocumentFormat.Pdf</see> as the format to use.</li><li>Add the document pages. The <see cref="P:Leadtools.Forms.DocumentWriters.DocumentEmfPage.EmfHandle">DocumentEmfPage.EmfHandle</see> property must point to the EMF representation of the page and the
            <see cref="P:Leadtools.Forms.DocumentWriters.DocumentEmfPage.Image">DocumentEmfPage.Image</see> must contain a <see cref="T:Leadtools.RasterImage" /> object for the image to be used as the overlay for the page.</li><li>Repeat for each page in the document.</li><li>Call <see cref="M:Leadtools.Forms.DocumentWriters.DocumentWriter.EndDocument">DocumentWriter.EndDocument</see> to finish creating the document file on disk.</li></ul></para>
        <para>The <see cref="P:Leadtools.Forms.DocumentWriters.DocumentEmfPage.AnnotationContainer" /> property is optional and is used to create annotated document. It's only valid when the document being created is PDF. Note that saving annotated document is not supported when <see cref="P:Leadtools.Forms.DocumentWriters.PdfDocumentOptions.DocumentType" /> is
            <see cref="T:Leadtools.Forms.DocumentWriters.PdfDocumentType">PdfDocumentType.PdfA</see>.
            </para>
        <para>For more information, refer to <see cref="T:Leadtools.Forms.DocumentWriters.PdfDocumentOptions" />.</para>
        <para>You are responsible for freeing this <see cref="P:Leadtools.Forms.DocumentWriters.DocumentEmfPage.Image" /> object after the call to <see cref="M:Leadtools.Forms.DocumentWriters.DocumentWriter.AddPage(Leadtools.Forms.DocumentWriters.DocumentPage)">DocumentWriter.AddPage</see>
            or <see cref="M:Leadtools.Forms.DocumentWriters.DocumentWriter.InsertPage(Leadtools.Forms.DocumentWriters.DocumentPage,System.Int32)">DocumentWriter.InsertPage</see> returns. This is usually done by 
            calling <see cref="M:Leadtools.RasterImage.Dispose">RasterImage.Dispose</see>.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.DocumentWriters.DocumentEmfPage" />.</example>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.DocumentWriters.DocumentWriter" />
      <seealso cref="T:Leadtools.Forms.DocumentWriters.DocumentFormat" />
      <seealso cref="T:FT.Topics.ProgrammingWithDocumentWriters">Programming with LEADTOOLS Document Writers</seealso>
      <seealso cref="T:Leadtools.Topics.FilesToBeIncludedWithYourApplication">Files to be Included with Your Application</seealso>
      <seealso cref="T:Leadtools.Topics.UnlockingSpecialLEADFeatures">Unlocking Special LEAD Features</seealso>
    </member>
    <member name="P:Leadtools.Forms.DocumentWriters.DocumentEmfPage.AnnotationContainer">
      <summary>LEADTOOLS Annotation container that contains the objects to use when annotating a page in PDF documents. <a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
      <value>An optional <see cref="T:System.Object" /> that must point to a valid instance of <see cref="T:Leadtools.Annotations.AnnContainer" /> class
            containing the objects to use when annotating a page in PDF documents. Default value is null (<strong>Nothing</strong> in Visual Basic).</value>
      <remarks>
        <para>The <see cref="P:Leadtools.Forms.DocumentWriters.DocumentEmfPage.AnnotationContainer" /> property is optional and is used only when the document being created is PDF.
            To create a PDF document with annotations, perform the following steps:
            <ul><li>You can use the <see cref="M:Leadtools.Forms.DocumentWriters.DocumentWriter.GetOptions(Leadtools.Forms.DocumentWriters.DocumentFormat)">DocumentWriter.GetOptions</see> and <see cref="M:Leadtools.Forms.DocumentWriters.DocumentWriter.SetOptions(Leadtools.Forms.DocumentWriters.DocumentFormat,Leadtools.Forms.DocumentWriters.DocumentOptions)">DocumentWriter.SetOptions</see> methods to the get the options used when saving a
            PDF document.</li><li>Call <see cref="M:Leadtools.Forms.DocumentWriters.DocumentWriter.BeginDocument(System.String,Leadtools.Forms.DocumentWriters.DocumentFormat)">DocumentWriter.BeginDocument</see> with <see cref="T:Leadtools.Forms.DocumentWriters.DocumentFormat">DocumentFormat.Pdf</see> as the format to use.</li><li>Add the document pages. The <see cref="P:Leadtools.Forms.DocumentWriters.DocumentEmfPage.EmfHandle">DocumentEmfPage.EmfHandle</see> property must point to the EMF representation of the page and the
            <see cref="P:Leadtools.Forms.DocumentWriters.DocumentEmfPage.AnnotationContainer">DocumentEmfPage.AnnotationContainer</see> property must contain a valid <see cref="T:Leadtools.Annotations.AnnContainer" /> object holding the annotation objects to be saved for this page.</li><li>Repeat for each page in the document.</li><li>Call <see cref="M:Leadtools.Forms.DocumentWriters.DocumentWriter.EndDocument">DocumentWriter.EndDocument</see> to finish creating the document file on disk.</li></ul></para>
        <para>For more information, refer to <see cref="T:Leadtools.Forms.DocumentWriters.PdfDocumentOptions" />.</para>
        <para>Note that <see cref="T:Leadtools.Annotations.AnnContainer" /> is used only when the document being created is PDF.also saving annotated document is not supported when <see cref="P:Leadtools.Forms.DocumentWriters.PdfDocumentOptions.DocumentType" /> is
            <see cref="T:Leadtools.Forms.DocumentWriters.PdfDocumentType">PdfDocumentType.PdfA</see>.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.DocumentWriters.DocumentEmfPage" />.</example>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.DocumentWriters.DocumentWriter" />
      <seealso cref="T:Leadtools.Forms.DocumentWriters.DocumentFormat" />
      <seealso cref="T:FT.Topics.ProgrammingWithDocumentWriters">Programming with LEADTOOLS Document Writers</seealso>
      <seealso cref="T:Leadtools.Topics.FilesToBeIncludedWithYourApplication">Files to be Included with Your Application</seealso>
      <seealso cref="T:Leadtools.Topics.UnlockingSpecialLEADFeatures">Unlocking Special LEAD Features</seealso>
    </member>
    <member name="P:Leadtools.Forms.DocumentWriters.DocumentEmfPage.Type">
      <summary>Gets the type of this document page. <a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
      <value>The type of this document page (<see cref="T:Leadtools.Forms.DocumentWriters.DocumentPageType">DocumentPageType.Emf</see>).</value>
      <noremarks />
      <noexample />
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.DocumentWriters.DocumentWriter">Document Writers</seealso>
      <seealso cref="T:FT.Topics.ProgrammingWithDocumentWriters">Programming with LEADTOOLS Document Writers</seealso>
      <seealso cref="T:Leadtools.Topics.FilesToBeIncludedWithYourApplication">Files to be Included with Your Application</seealso>
      <seealso cref="T:Leadtools.Topics.UnlockingSpecialLEADFeatures">Unlocking Special LEAD Features</seealso>
    </member>
    <member name="T:Leadtools.Forms.DocumentWriters.DocumentSvgPage">
      <summary>Data for one SVG page to be added to a document file. <a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
      <remarks>
        <para>The <see cref="T:Leadtools.Forms.DocumentWriters.DocumentSvgPage" /> class derives from <see cref="T:Leadtools.Forms.DocumentWriters.DocumentPage" /> and contains the data for one SVG page to be added to a document file. It is used as a parameter to the
            <see cref="M:Leadtools.Forms.DocumentWriters.DocumentWriter.AddPage(Leadtools.Forms.DocumentWriters.DocumentPage)">DocumentWriter.AddPage</see> or <see cref="M:Leadtools.Forms.DocumentWriters.DocumentWriter.InsertPage(Leadtools.Forms.DocumentWriters.DocumentPage,System.Int32)">DocumentWriter.InsertPage</see> methods used to add the page.</para>
        <para>The <see cref="P:Leadtools.Forms.DocumentWriters.DocumentSvgPage.SvgDocument">DocumentSvgPage.SvgDocument</see> property must contain a valid SVG (<see cref="T:Leadtools.ISvgDocument" />)
            object that contains the visual representation of the page. This SVG object can obtained through multiple sources as explained in
            <see cref="T:FT.Topics.ProgrammingWithDocumentWriters">LEADTOOLS Document Writers</see>.</para>
        <para>
          <see cref="P:Leadtools.Forms.DocumentWriters.DocumentSvgPage.SvgDocument">DocumentSvgPage.SvgDocument</see> is used as is when <see cref="M:Leadtools.Forms.DocumentWriters.DocumentWriter.AddPage(Leadtools.Forms.DocumentWriters.DocumentPage)">DocumentWriter.AddPage</see> or <see cref="M:Leadtools.Forms.DocumentWriters.DocumentWriter.InsertPage(Leadtools.Forms.DocumentWriters.DocumentPage,System.Int32)">DocumentWriter.InsertPage</see> is called
            and the framework does not delete it. You must dispose the object when it is no longer used.</para>
        <para>The <see cref="P:Leadtools.Forms.DocumentWriters.DocumentSvgPage.Image">DocumentSvgPage.Image</see> property is optional and is used only when the document being created is PDF with the Image/Text overlay option. To
            create a PDF document with image/text overlay, perform the following steps:
            <list type="bullet"><item><description>Set the value of the <see cref="P:Leadtools.Forms.DocumentWriters.PdfDocumentOptions.ImageOverText">PdfDocumentOptions.ImageOverText</see> to <strong>true</strong>. You can use the
            <see cref="M:Leadtools.Forms.DocumentWriters.DocumentWriter.GetOptions(Leadtools.Forms.DocumentWriters.DocumentFormat)">DocumentWriter.GetOptions</see> and <see cref="M:Leadtools.Forms.DocumentWriters.DocumentWriter.SetOptions(Leadtools.Forms.DocumentWriters.DocumentFormat,Leadtools.Forms.DocumentWriters.DocumentOptions)">DocumentWriter.SetOptions</see> methods to the get the options used when saving a
            PDF document.</description></item><item><description>Call <see cref="M:Leadtools.Forms.DocumentWriters.DocumentWriter.BeginDocument(System.String,Leadtools.Forms.DocumentWriters.DocumentFormat)">DocumentWriter.BeginDocument</see> with <see cref="T:Leadtools.Forms.DocumentWriters.DocumentFormat">DocumentFormat.Pdf</see> as the format to use.</description></item><item><description>Add the document pages. The <see cref="P:Leadtools.Forms.DocumentWriters.DocumentSvgPage.SvgDocument">DocumentSvgPage.SvgDocument</see> property must point to the SVG object containing the
              representation of the page and the <see cref="P:Leadtools.Forms.DocumentWriters.DocumentSvgPage.Image">DocumentSvgPage.Image</see> must contain a <see cref="T:Leadtools.RasterImage" /> object for the image to be used as the overlay for the page.</description></item><item><description>Repeat for each page in the document.</description></item><item><description>Call <see cref="M:Leadtools.Forms.DocumentWriters.DocumentWriter.EndDocument">DocumentWriter.EndDocument</see> to finish creating the document file on disk.</description></item></list></para>
        <para>SVG documents may or may not have a size. If a document has a size, it is stored in the width and height attributes of the root svg element and
            can be in any coordinate system. An SVG renderer will typically use this value to determine the final bounding rectangle of the document. SVG documents
            contain a hierarchy of elements. The final transformation (such as position and size) and style (such as color and fill) may depend on the transformation
            and style of the parent(s) inside the hierarchy. Calculations have to be done to keep track of this information when converting the SVG file. This
            procedure is defined by LEADTOOLS as <i>flattening</i> the document.</para>
        <para>The <see cref="P:Leadtools.Forms.DocumentWriters.DocumentSvgPage.Width">DocumentSvgPage.Width</see> and <see cref="P:Leadtools.Forms.DocumentWriters.DocumentSvgPage.Height">DocumentSvgPage.Height</see> properties
            can be used to set a custom page size in inches. When the values are the default of 0, the framework will obtain the page width and height automatically from
            the <see cref="T:Leadtools.ISvgDocument" /> object set in <see cref="P:Leadtools.Forms.DocumentWriters.DocumentSvgPage.SvgDocument" /> when <see cref="M:Leadtools.Forms.DocumentWriters.DocumentWriter.AddPage(Leadtools.Forms.DocumentWriters.DocumentPage)" /> or <see cref="M:Leadtools.Forms.DocumentWriters.DocumentWriter.InsertPage(Leadtools.Forms.DocumentWriters.DocumentPage,System.Int32)" /> is called. If it is
            desired to create pages at a custom size, then simply set the values (in inches) in <see cref="P:Leadtools.Forms.DocumentWriters.DocumentSvgPage.Width">DocumentSvgPage.Width</see> and <see cref="P:Leadtools.Forms.DocumentWriters.DocumentSvgPage.Height">DocumentSvgPage.Height</see>
            before calling <see cref="M:Leadtools.Forms.DocumentWriters.DocumentWriter.AddPage(Leadtools.Forms.DocumentWriters.DocumentPage)" /> or <see cref="M:Leadtools.Forms.DocumentWriters.DocumentWriter.InsertPage(Leadtools.Forms.DocumentWriters.DocumentPage,System.Int32)" />.</para>
        <para>The LEADTOOLS Document Writer supports creating documents with zero or more empty pages inside them. Use <see cref="M:Leadtools.Forms.DocumentWriters.DocumentWriter.AddPage(Leadtools.Forms.DocumentWriters.DocumentPage)" /> or <see cref="M:Leadtools.Forms.DocumentWriters.DocumentWriter.InsertPage(Leadtools.Forms.DocumentWriters.DocumentPage,System.Int32)" /> with
            an <see cref="T:Leadtools.Forms.DocumentWriters.DocumentEmptyPage" /> with the dimension of the empty page set before hand in the
            <see cref="P:Leadtools.Forms.DocumentWriters.DocumentOptions.EmptyPageWidth">DocumentOptions.EmptyPageWidth</see> and
            <see cref="P:Leadtools.Forms.DocumentWriters.DocumentOptions.EmptyPageHeight">DocumentOptions.EmptyPageHeight</see> and its resolution set to
            <see cref="P:Leadtools.Forms.DocumentWriters.DocumentOptions.EmptyPageResolution">DocumentOptions.EmptyPageResolution</see>. As many empty pages as desired can be added in any index
            desired. To use empty pages, make sure the <see cref="P:Leadtools.Forms.DocumentWriters.DocumentOptions.PageRestriction">DocumentOptions.PageRestriction</see> property is set to
            <see cref="T:Leadtools.Forms.DocumentWriters.DocumentPageRestriction">DocumentPageRestriction.Relaxed</see>.</para>
        <para>For more information, refer to <see cref="T:Leadtools.Forms.DocumentWriters.PdfDocumentOptions" />.</para>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Forms.DocumentWriters.DocumentWriter" />.</para>
      </example>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.DocumentWriters.DocumentWriter" />
      <seealso cref="T:Leadtools.Forms.DocumentWriters.DocumentFormat" />
      <seealso cref="T:FT.Topics.ProgrammingWithDocumentWriters">Programming with LEADTOOLS Document Writers</seealso>
      <seealso cref="T:Leadtools.Topics.FilesToBeIncludedWithYourApplication">Files to be Included with Your Application</seealso>
      <seealso cref="T:Leadtools.Topics.UnlockingSpecialLEADFeatures">Unlocking Special LEAD Features</seealso>
    </member>
    <member name="M:Leadtools.Forms.DocumentWriters.DocumentSvgPage.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Leadtools.Forms.DocumentWriters.DocumentSvgPage" /> class. <a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
      <remarks>
        <para>This constructor will initialize the members of <see cref="T:Leadtools.Forms.DocumentWriters.DocumentSvgPage" /> as follows:</para>
        <list type="table">
          <listheader>
            <term>Member</term>
            <description>Description</description>
          </listheader>
          <item>
            <term>
              <see cref="P:Leadtools.Forms.DocumentWriters.DocumentSvgPage.Type" />
            </term>
            <description>
              <see cref="T:Leadtools.Forms.DocumentWriters.DocumentPageType">DocumentPageType.Svg</see>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Forms.DocumentWriters.DocumentSvgPage.SvgDocument" />
            </term>
            <description>
              <strong>null</strong>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Forms.DocumentWriters.DocumentSvgPage.Image" />
            </term>
            <description>
              <strong>null</strong>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Forms.DocumentWriters.DocumentSvgPage.Width" />
            </term>
            <description>0</description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Forms.DocumentWriters.DocumentSvgPage.Height" />
            </term>
            <description>0</description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Forms.DocumentWriters.DocumentSvgPage.AnnotationContainer" />
            </term>
            <description>
              <strong>null</strong>
            </description>
          </item>
        </list>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="T:Leadtools.Forms.DocumentWriters.DocumentWriter" />.</para>
      </example>
    </member>
    <member name="M:Leadtools.Forms.DocumentWriters.DocumentSvgPage.Clone">
      <summary>Creates an exact copy of this <see cref="T:Leadtools.Forms.DocumentWriters.DocumentSvgPage" /><a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
      <returns>The <see cref="T:Leadtools.Forms.DocumentWriters.DocumentPage" /> this method creates.</returns>
      <noremarks />
      <noexample />
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.DocumentWriters.DocumentWriter">Document Writers</seealso>
      <seealso cref="T:FT.Topics.ProgrammingWithDocumentWriters">Programming with LEADTOOLS Document Writers</seealso>
      <seealso cref="T:Leadtools.Topics.FilesToBeIncludedWithYourApplication">Files to be Included with Your Application</seealso>
      <seealso cref="T:Leadtools.Topics.UnlockingSpecialLEADFeatures">Unlocking Special LEAD Features</seealso>
    </member>
    <member name="P:Leadtools.Forms.DocumentWriters.DocumentSvgPage.Image">
      <summary>The image used for creating a PDF document page with the image and text overlay feature. <a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
      <value>A <see cref="T:Leadtools.RasterImage" /> that contains the optional raster image to use to create a PDF page with the image/text overlay feature. If this feature is not used,
            this property must be set to <strong>null</strong> (<strong>Nothing</strong> in Visual Basic).</value>
      <remarks>
        <para>The <see cref="P:Leadtools.Forms.DocumentWriters.DocumentSvgPage.Image" /> property is optional and is used only when the document being created is PDF with the Image and Text overlay option. To
            create a PDF document with image/text overlay, perform the following steps:
            <ul><li>Set the value of the <see cref="P:Leadtools.Forms.DocumentWriters.PdfDocumentOptions.ImageOverText">PdfDocumentOptions.ImageOverText</see> to <strong>true</strong>. You can use the
            <see cref="M:Leadtools.Forms.DocumentWriters.DocumentWriter.GetOptions(Leadtools.Forms.DocumentWriters.DocumentFormat)">DocumentWriter.GetOptions</see> and <see cref="M:Leadtools.Forms.DocumentWriters.DocumentWriter.SetOptions(Leadtools.Forms.DocumentWriters.DocumentFormat,Leadtools.Forms.DocumentWriters.DocumentOptions)">DocumentWriter.SetOptions</see> methods to the get the options used when saving a
            PDF document.</li><li>Call <see cref="M:Leadtools.Forms.DocumentWriters.DocumentWriter.BeginDocument(System.String,Leadtools.Forms.DocumentWriters.DocumentFormat)">DocumentWriter.BeginDocument</see> with <see cref="T:Leadtools.Forms.DocumentWriters.DocumentFormat">DocumentFormat.Pdf</see> as the format to use.</li><li>Add the document pages. The <see cref="P:Leadtools.Forms.DocumentWriters.DocumentSvgPage.SvgDocument">DocumentSvgPage.SvgDocument</see> property must point to the SVG representation of the page and the
            <see cref="P:Leadtools.Forms.DocumentWriters.DocumentSvgPage.Image">DocumentSvgPage.Image</see> must contain a <see cref="T:Leadtools.RasterImage" /> object for the image to be used as the overlay for the page.</li><li>Repeat for each page in the document.</li><li>Call <see cref="M:Leadtools.Forms.DocumentWriters.DocumentWriter.EndDocument">DocumentWriter.EndDocument</see> to finish creating the document file on disk.</li></ul></para>
        <para>The <see cref="P:Leadtools.Forms.DocumentWriters.DocumentSvgPage.AnnotationContainer" /> property is optional and is used to create annotated document. It's only valid when the document being created is PDF. Note that saving annotated document is not supported when <see cref="P:Leadtools.Forms.DocumentWriters.PdfDocumentOptions.DocumentType" /> is
            <see cref="T:Leadtools.Forms.DocumentWriters.PdfDocumentType">PdfDocumentType.PdfA</see>.
            </para>
        <para>For more information, refer to <see cref="T:Leadtools.Forms.DocumentWriters.PdfDocumentOptions" />.</para>
        <para>You are responsible for freeing this <see cref="P:Leadtools.Forms.DocumentWriters.DocumentSvgPage.Image" /> object after the call to <see cref="M:Leadtools.Forms.DocumentWriters.DocumentWriter.AddPage(Leadtools.Forms.DocumentWriters.DocumentPage)" /> or <see cref="M:Leadtools.Forms.DocumentWriters.DocumentWriter.InsertPage(Leadtools.Forms.DocumentWriters.DocumentPage,System.Int32)" /> returns. This is usually done by 
            calling <see cref="M:Leadtools.RasterImage.Dispose">RasterImage.Dispose</see>.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.DocumentWriters.DocumentWriter" />.</example>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.DocumentWriters.DocumentWriter" />
      <seealso cref="T:Leadtools.Forms.DocumentWriters.DocumentFormat" />
      <seealso cref="T:FT.Topics.ProgrammingWithDocumentWriters">Programming with LEADTOOLS Document Writers</seealso>
      <seealso cref="T:Leadtools.Topics.FilesToBeIncludedWithYourApplication">Files to be Included with Your Application</seealso>
      <seealso cref="T:Leadtools.Topics.UnlockingSpecialLEADFeatures">Unlocking Special LEAD Features</seealso>
    </member>
    <member name="P:Leadtools.Forms.DocumentWriters.DocumentSvgPage.AnnotationContainer">
      <summary>LEADTOOLS Annotation container that contains the objects to use when annotating a page in PDF documents. <a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
      <value>An optional <see cref="T:System.Object" /> that must point to a valid instance of <see cref="T:Leadtools.Annotations.AnnContainer" /> class
            containing the objects to use when annotating a page in PDF documents. Default value is null (<strong>Nothing</strong> in Visual Basic).</value>
      <remarks>
        <para>The <see cref="P:Leadtools.Forms.DocumentWriters.DocumentSvgPage.AnnotationContainer" /> property is optional and is used only when the document being created is PDF.
            To create a PDF document with annotations, perform the following steps:
            <ul><li>You can use the <see cref="M:Leadtools.Forms.DocumentWriters.DocumentWriter.GetOptions(Leadtools.Forms.DocumentWriters.DocumentFormat)">DocumentWriter.GetOptions</see> and <see cref="M:Leadtools.Forms.DocumentWriters.DocumentWriter.SetOptions(Leadtools.Forms.DocumentWriters.DocumentFormat,Leadtools.Forms.DocumentWriters.DocumentOptions)">DocumentWriter.SetOptions</see> methods to the get the options used when saving a
            PDF document.</li><li>Call <see cref="M:Leadtools.Forms.DocumentWriters.DocumentWriter.BeginDocument(System.String,Leadtools.Forms.DocumentWriters.DocumentFormat)">DocumentWriter.BeginDocument</see> with <see cref="T:Leadtools.Forms.DocumentWriters.DocumentFormat">DocumentFormat.Pdf</see> as the format to use.</li><li>Add the document pages. The <see cref="P:Leadtools.Forms.DocumentWriters.DocumentSvgPage.SvgDocument">DocumentSvgPage.SvgDocument</see> property must point to the SVG representation of the page and the
            <see cref="P:Leadtools.Forms.DocumentWriters.DocumentSvgPage.AnnotationContainer">DocumentSvgPage.AnnotationContainer</see> property must contain a valid <see cref="T:Leadtools.Annotations.AnnContainer" /> object holding the annotation objects to be saved for this page.</li><li>Repeat for each page in the document.</li><li>Call <see cref="M:Leadtools.Forms.DocumentWriters.DocumentWriter.EndDocument">DocumentWriter.EndDocument</see> to finish creating the document file on disk.</li></ul></para>
        <para>For more information, refer to <see cref="T:Leadtools.Forms.DocumentWriters.PdfDocumentOptions" />.</para>
        <para>Note that <see cref="T:Leadtools.Annotations.AnnContainer" /> is used only when the document being created is PDF.also saving annotated document is not supported when <see cref="P:Leadtools.Forms.DocumentWriters.PdfDocumentOptions.DocumentType" /> is
            <see cref="T:Leadtools.Forms.DocumentWriters.PdfDocumentType">PdfDocumentType.PdfA</see>.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.DocumentWriters.DocumentWriter" />.</example>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.DocumentWriters.DocumentWriter" />
      <seealso cref="T:Leadtools.Forms.DocumentWriters.DocumentFormat" />
      <seealso cref="T:FT.Topics.ProgrammingWithDocumentWriters">Programming with LEADTOOLS Document Writers</seealso>
      <seealso cref="T:Leadtools.Topics.FilesToBeIncludedWithYourApplication">Files to be Included with Your Application</seealso>
      <seealso cref="T:Leadtools.Topics.UnlockingSpecialLEADFeatures">Unlocking Special LEAD Features</seealso>
    </member>
    <member name="P:Leadtools.Forms.DocumentWriters.DocumentSvgPage.Type">
      <summary>Gets the type of this document page. <a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
      <value>The type of this document page (<see cref="T:Leadtools.Forms.DocumentWriters.DocumentPageType">DocumentPageType.Svg</see>).</value>
      <noremarks />
      <noexample />
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.DocumentWriters.DocumentWriter">Document Writers</seealso>
      <seealso cref="T:FT.Topics.ProgrammingWithDocumentWriters">Programming with LEADTOOLS Document Writers</seealso>
      <seealso cref="T:Leadtools.Topics.FilesToBeIncludedWithYourApplication">Files to be Included with Your Application</seealso>
      <seealso cref="T:Leadtools.Topics.UnlockingSpecialLEADFeatures">Unlocking Special LEAD Features</seealso>
    </member>
    <member name="P:Leadtools.Forms.DocumentWriters.DocumentSvgPage.Width">
      <summary>Gets or sets the custom page width in inches. <a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
      <value>Custom page width in inches. Default value is 0.</value>
      <remarks>
        <para>The <see cref="P:Leadtools.Forms.DocumentWriters.DocumentSvgPage.Width">DocumentSvgPage.Width</see> and <see cref="P:Leadtools.Forms.DocumentWriters.DocumentSvgPage.Height">DocumentSvgPage.Height</see> properties
            can be used to set a custom page size in inches. When the values are the default of 0, the framework will obtain the page width and height automatically from
            the <see cref="T:Leadtools.ISvgDocument" /> object set in <see cref="P:Leadtools.Forms.DocumentWriters.DocumentSvgPage.SvgDocument" /> when <see cref="M:Leadtools.Forms.DocumentWriters.DocumentWriter.AddPage(Leadtools.Forms.DocumentWriters.DocumentPage)" /> or <see cref="M:Leadtools.Forms.DocumentWriters.DocumentWriter.InsertPage(Leadtools.Forms.DocumentWriters.DocumentPage,System.Int32)" /> is called. If it is
            desired to create pages at a custom size, then simply set the values (in inches) in <see cref="P:Leadtools.Forms.DocumentWriters.DocumentSvgPage.Width">DocumentSvgPage.Width</see> and <see cref="P:Leadtools.Forms.DocumentWriters.DocumentSvgPage.Height">DocumentSvgPage.Height</see>
            before calling <see cref="M:Leadtools.Forms.DocumentWriters.DocumentWriter.AddPage(Leadtools.Forms.DocumentWriters.DocumentPage)" /> or <see cref="M:Leadtools.Forms.DocumentWriters.DocumentWriter.InsertPage(Leadtools.Forms.DocumentWriters.DocumentPage,System.Int32)" />.</para>
      </remarks>
      <noexample />
    </member>
    <member name="P:Leadtools.Forms.DocumentWriters.DocumentSvgPage.Height">
      <summary>Gets or sets the custom page height in inches. <a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
      <value>Custom page height in inches. Default value is 0.</value>
      <remarks>
        <para>The <see cref="P:Leadtools.Forms.DocumentWriters.DocumentSvgPage.Width">DocumentSvgPage.Width</see> and <see cref="P:Leadtools.Forms.DocumentWriters.DocumentSvgPage.Height">DocumentSvgPage.Height</see> properties
            can be used to set a custom page size in inches. When the values are the default of 0, the framework will obtain the page width and height automatically from
            the <see cref="T:Leadtools.ISvgDocument" /> object set in <see cref="P:Leadtools.Forms.DocumentWriters.DocumentSvgPage.SvgDocument" /> when <see cref="M:Leadtools.Forms.DocumentWriters.DocumentWriter.AddPage(Leadtools.Forms.DocumentWriters.DocumentPage)" /> or <see cref="M:Leadtools.Forms.DocumentWriters.DocumentWriter.InsertPage(Leadtools.Forms.DocumentWriters.DocumentPage,System.Int32)" /> is called. If it is
            desired to create pages at a custom size, then simply set the values (in inches) in <see cref="P:Leadtools.Forms.DocumentWriters.DocumentSvgPage.Width">DocumentSvgPage.Width</see> and <see cref="P:Leadtools.Forms.DocumentWriters.DocumentSvgPage.Height">DocumentSvgPage.Height</see>
            before calling <see cref="M:Leadtools.Forms.DocumentWriters.DocumentWriter.AddPage(Leadtools.Forms.DocumentWriters.DocumentPage)" /> or <see cref="M:Leadtools.Forms.DocumentWriters.DocumentWriter.InsertPage(Leadtools.Forms.DocumentWriters.DocumentPage,System.Int32)" />.</para>
      </remarks>
      <noexample />
    </member>
    <member name="P:Leadtools.Forms.DocumentWriters.DocumentSvgPage.SvgDocument">
      <summary>The SVG document representation of the page. <a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
      <value>An <see cref="P:Leadtools.Forms.DocumentWriters.DocumentSvgPage.SvgDocument" /> that contains the SVG document representation of the page.</value>
      <remarks>
        <para>The <see cref="P:Leadtools.Forms.DocumentWriters.DocumentSvgPage.SvgDocument" /> property must contain a <see cref="T:Leadtools.ISvgDocument" /> object --it cannot be <strong>null</strong>. This
            SVG document is used in the <see cref="M:Leadtools.Forms.DocumentWriters.DocumentWriter.AddPage(Leadtools.Forms.DocumentWriters.DocumentPage)">DocumentWriter.AddPage</see> or <see cref="M:Leadtools.Forms.DocumentWriters.DocumentWriter.InsertPage(Leadtools.Forms.DocumentWriters.DocumentPage,System.Int32)">DocumentWriter.InsertPage</see> methods to create the visual representation of the new page added to the document being created.</para>
        <para>The LEADTOOLS Document Writer toolkit will not use the <see cref="T:Leadtools.ISvgDocument" /> object after the call to
            <see cref="M:Leadtools.Forms.DocumentWriters.DocumentWriter.AddPage(Leadtools.Forms.DocumentWriters.DocumentPage)">DocumentWriter.AddPage</see> or <see cref="M:Leadtools.Forms.DocumentWriters.DocumentWriter.InsertPage(Leadtools.Forms.DocumentWriters.DocumentPage,System.Int32)">DocumentWriter.InsertPage</see> returns. This handle needs to be disposed to free the resources associated with it by the user.</para>
        <para>The SVG objects can be obtained from multiple sources as explained in <see cref="T:FT.Topics.ProgrammingWithDocumentWriters">LEADTOOLS Document Writers</see>.</para>
        <para>SVG documents may or may not have a size. If a document has a size, it is stored in the width and height attributes of the root svg element and
            can be in any coordinate system. An SVG renderer will typically use this value to determine the final bounding rectangle of the document. SVG documents
            contain a hierarchy of elements. The final transformation (such as position and size) and style (such as color and fill) may depend on the transformation
            and style of the parent(s) inside the hierarchy. Calculations have to be done to keep track of this information when converting the SVG file. This
            procedure is defined by LEADTOOLS as <i>flattening</i> the document.</para>
        <para>The <see cref="P:Leadtools.Forms.DocumentWriters.DocumentSvgPage.Width">DocumentSvgPage.Width</see> and <see cref="P:Leadtools.Forms.DocumentWriters.DocumentSvgPage.Height">DocumentSvgPage.Height</see> properties
            can be used to set a custom page size in inches. When the values are the default of 0, the framework will obtain the page width and height automatically from
            the <see cref="T:Leadtools.ISvgDocument" /> object set in <see cref="P:Leadtools.Forms.DocumentWriters.DocumentSvgPage.SvgDocument" /> when <see cref="M:Leadtools.Forms.DocumentWriters.DocumentWriter.AddPage(Leadtools.Forms.DocumentWriters.DocumentPage)" /> is called. If it is
            desired to create pages at a custom size, then simply set the values (in inches) in <see cref="P:Leadtools.Forms.DocumentWriters.DocumentSvgPage.Width">DocumentSvgPage.Width</see> and <see cref="P:Leadtools.Forms.DocumentWriters.DocumentSvgPage.Height">DocumentSvgPage.Height</see>
            before calling <see cref="M:Leadtools.Forms.DocumentWriters.DocumentWriter.AddPage(Leadtools.Forms.DocumentWriters.DocumentPage)" />.</para>
        <para>The LEADTOOLS Document Writer supports creating documents with zero or more empty pages inside them. Simply pass a page of type
            <see cref="T:Leadtools.Forms.DocumentWriters.DocumentEmptyPage" /> to  <see cref="M:Leadtools.Forms.DocumentWriters.DocumentWriter.AddPage(Leadtools.Forms.DocumentWriters.DocumentPage)">DocumentWriter.AddPage</see> or <see cref="M:Leadtools.Forms.DocumentWriters.DocumentWriter.InsertPage(Leadtools.Forms.DocumentWriters.DocumentPage,System.Int32)">DocumentWriter.InsertPage</see> methods. The dimension of the empty page
            must be set before hand in the <see cref="P:Leadtools.Forms.DocumentWriters.DocumentOptions.EmptyPageWidth">DocumentOptions.EmptyPageWidth</see> and
            <see cref="P:Leadtools.Forms.DocumentWriters.DocumentOptions.EmptyPageHeight">DocumentOptions.EmptyPageHeight</see> and its resolution set to
            <see cref="P:Leadtools.Forms.DocumentWriters.DocumentOptions.EmptyPageResolution">DocumentOptions.EmptyPageResolution</see>. As many empty pages as desired can be added and
            in any index desired. To use empty pages, make sure the <see cref="P:Leadtools.Forms.DocumentWriters.DocumentOptions.PageRestriction">DocumentOptions.PageRestriction</see>
            property is set to <see cref="T:Leadtools.Forms.DocumentWriters.DocumentPageRestriction">DocumentPageRestriction.Relaxed</see>.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.DocumentWriters.DocumentWriter" />.</example>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.DocumentWriters.DocumentWriter" />
      <seealso cref="T:Leadtools.Forms.DocumentWriters.DocumentFormat" />
      <seealso cref="T:FT.Topics.ProgrammingWithDocumentWriters">Programming with LEADTOOLS Document Writers</seealso>
      <seealso cref="T:Leadtools.Topics.FilesToBeIncludedWithYourApplication">Files to be Included with Your Application</seealso>
      <seealso cref="T:Leadtools.Topics.UnlockingSpecialLEADFeatures">Unlocking Special LEAD Features</seealso>
    </member>
    <member name="T:Leadtools.Forms.DocumentWriters.DocumentRasterPage">
      <summary>Data for one raster page to be added to a document file. <a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
      <remarks>
        <para>The <see cref="T:Leadtools.Forms.DocumentWriters.DocumentRasterPage" /> structure contains the data for one raster image page to be added to a document file. It is used as a parameter to the
            <see cref="M:Leadtools.Forms.DocumentWriters.DocumentWriter.AddPage(Leadtools.Forms.DocumentWriters.DocumentPage)">DocumentWriter.AddPage</see> or <see cref="M:Leadtools.Forms.DocumentWriters.DocumentWriter.InsertPage(Leadtools.Forms.DocumentWriters.DocumentPage,System.Int32)">DocumentWriter.InsertPage</see> methods used to add the page.</para>
        <para>The <see cref="P:Leadtools.Forms.DocumentWriters.DocumentRasterPage.Image">DocumentRasterPage.Image</see> property must contain a valid raster image (<see cref="T:Leadtools.RasterImage" />)
            object that contains the visual representation of the page. This image object can obtained through multiple sources as explained in
            <see cref="T:FT.Topics.ProgrammingWithDocumentWriters">LEADTOOLS Document Writers</see>.</para>
        <para>
          <see cref="P:Leadtools.Forms.DocumentWriters.DocumentRasterPage.Image">DocumentRasterPage.Image</see> is used as is when <see cref="M:Leadtools.Forms.DocumentWriters.DocumentWriter.AddPage(Leadtools.Forms.DocumentWriters.DocumentPage)">DocumentWriter.AddPage</see> or <see cref="M:Leadtools.Forms.DocumentWriters.DocumentWriter.InsertPage(Leadtools.Forms.DocumentWriters.DocumentPage,System.Int32)">DocumentWriter.InsertPage</see> is called
            and the framework does not delete it. You must dispose the object when it is no longer used.</para>
        <para>The LEADTOOLS Document Writer supports creating documents with zero or more empty pages inside them. Use <see cref="M:Leadtools.Forms.DocumentWriters.DocumentWriter.AddPage(Leadtools.Forms.DocumentWriters.DocumentPage)">DocumentWriter.AddPage</see> or <see cref="M:Leadtools.Forms.DocumentWriters.DocumentWriter.InsertPage(Leadtools.Forms.DocumentWriters.DocumentPage,System.Int32)">DocumentWriter.InsertPage</see> with
            an <see cref="T:Leadtools.Forms.DocumentWriters.DocumentEmptyPage" /> with the dimension of the empty page set before hand in the
            <see cref="P:Leadtools.Forms.DocumentWriters.DocumentOptions.EmptyPageWidth">DocumentOptions.EmptyPageWidth</see> and
            <see cref="P:Leadtools.Forms.DocumentWriters.DocumentOptions.EmptyPageHeight">DocumentOptions.EmptyPageHeight</see> and its resolution set to
            <see cref="P:Leadtools.Forms.DocumentWriters.DocumentOptions.EmptyPageResolution">DocumentOptions.EmptyPageResolution</see>. As many empty pages as desired can be added in any index
            desired. To use empty pages, make sure the <see cref="P:Leadtools.Forms.DocumentWriters.DocumentOptions.PageRestriction">DocumentOptions.PageRestriction</see> property is set to
            <see cref="T:Leadtools.Forms.DocumentWriters.DocumentPageRestriction">DocumentPageRestriction.Relaxed</see>.</para>
        <para>For more information, refer to <see cref="T:Leadtools.Forms.DocumentWriters.PdfDocumentOptions" />.</para>
      </remarks>
      <example>
        <p>
          <para>This example will create a PDF document with first page from SVG data, second page empty and third page from raster image.</para>
        </p>
        <code lang="VB">      Imports Leadtools
      Imports Leadtools.Codecs
      Imports Leadtools.Forms.DocumentWriters
      Imports Leadtools.Forms.Ocr

      &lt;TestMethod&gt; _
      Public Sub DocumentRasterPageExample()
         ' Input file name
         Dim inputFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "Leadtools.docx")
         ' Output PDF file name
         Dim outputFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "Example.pdf")

         ' Create a new instance of the LEADTOOLS Document Writer
         Dim docWriter As New DocumentWriter()

         ' Setup a new RasterCodecs object
         Using codecs As New RasterCodecs()
            codecs.Options.RasterizeDocument.Load.Resolution = 300

            ' Get information on the page
            Dim pageWidth As Double
            Dim pageHeight As Double
            Using info As CodecsImageInfo = codecs.GetInformation(inputFileName, False, 1)
               ' Get the size in inches, we need it for the empty page
               pageWidth = info.Document.PageWidth
               pageHeight = info.Document.PageHeight
            End Using

            ' Begin the document
            docWriter.BeginDocument(outputFileName, DocumentFormat.Pdf)

            ' Add the first page from SVG
            Dim svgPage As New DocumentSvgPage()
            svgPage.SvgDocument = codecs.LoadSvg(inputFileName, 1, Nothing)
            ' Add it
            docWriter.AddPage(svgPage)
            svgPage.SvgDocument.Dispose()

            ' Add a second page as empty
            Dim emptyPage As New DocumentEmptyPage()
            emptyPage.Width = pageWidth
            emptyPage.Height = pageHeight
            docWriter.AddPage(emptyPage)

            ' Finally, add a third page as an image
            Dim rasterPage As New DocumentRasterPage()
            rasterPage.Image = codecs.Load(inputFileName, 1)
            ' Add it
            docWriter.AddPage(rasterPage)
            rasterPage.Image.Dispose()
         End Using

         ' Finally finish writing the HTML file on disk
         docWriter.EndDocument()
      End Sub</code>
        <code lang="CS">      using Leadtools;
      using Leadtools.Codecs;
      using Leadtools.Forms.DocumentWriters;
      using Leadtools.Forms.Ocr;

      public void DocumentRasterPageExample()
      {
         // Input file name
         var inputFileName = Path.Combine(LEAD_VARS.ImagesDir, "Leadtools.docx");
         // Output PDF file name
         var outputFileName = Path.Combine(LEAD_VARS.ImagesDir, "Example.pdf");

         // Create a new instance of the LEADTOOLS Document Writer
         var docWriter = new DocumentWriter();

         // Setup a new RasterCodecs object
         using (var codecs = new RasterCodecs())
         {
            codecs.Options.RasterizeDocument.Load.Resolution = 300;

            // Get information on the page
            double pageWidth;
            double pageHeight;
            using (var info = codecs.GetInformation(inputFileName, false, 1))
            {
               // Get the size in inches, we need it for the empty page
               pageWidth = info.Document.PageWidth;
               pageHeight = info.Document.PageHeight;
            }

            // Begin the document
            docWriter.BeginDocument(outputFileName, DocumentFormat.Pdf);

            // Add the first page from SVG
            var svgPage = new DocumentSvgPage();
            using (svgPage.SvgDocument = codecs.LoadSvg(inputFileName, 1, null))
            {
               // Add it
               docWriter.AddPage(svgPage);
            }

            // Add a second page as empty
            var emptyPage = new DocumentEmptyPage();
            emptyPage.Width = pageWidth;
            emptyPage.Height = pageHeight;
            docWriter.AddPage(emptyPage);

            // Finally, add a third page as an image
            var rasterPage = new DocumentRasterPage();
            using (rasterPage.Image = codecs.Load(inputFileName, 1))
            {
               // Add it
               docWriter.AddPage(rasterPage);
            }
         }

         // Finally finish writing the HTML file on disk
         docWriter.EndDocument();
      }</code>
      </example>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.DocumentWriters.DocumentWriter" />
      <seealso cref="T:Leadtools.Forms.DocumentWriters.DocumentFormat" />
      <seealso cref="T:FT.Topics.ProgrammingWithDocumentWriters">Programming with LEADTOOLS Document Writers</seealso>
      <seealso cref="T:Leadtools.Topics.FilesToBeIncludedWithYourApplication">Files to be Included with Your Application</seealso>
      <seealso cref="T:Leadtools.Topics.UnlockingSpecialLEADFeatures">Unlocking Special LEAD Features</seealso>
    </member>
    <member name="M:Leadtools.Forms.DocumentWriters.DocumentRasterPage.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Leadtools.Forms.DocumentWriters.DocumentRasterPage" /> class. <a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
      <remarks>
        <para>This constructor will initialize the members of <see cref="T:Leadtools.Forms.DocumentWriters.DocumentRasterPage" /> as follows:</para>
        <list type="table">
          <listheader>
            <term>Member</term>
            <description>Description</description>
          </listheader>
          <item>
            <term>
              <see cref="P:Leadtools.Forms.DocumentWriters.DocumentRasterPage.Type" />
            </term>
            <description>
              <see cref="T:Leadtools.Forms.DocumentWriters.DocumentPageType">DocumentPageType.Raster</see>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Forms.DocumentWriters.DocumentRasterPage.Image" />
            </term>
            <description>
              <strong>null</strong>
            </description>
          </item>
        </list>
      </remarks>
      <noexample />
    </member>
    <member name="M:Leadtools.Forms.DocumentWriters.DocumentRasterPage.Clone">
      <summary>Creates an exact copy of this <see cref="T:Leadtools.Forms.DocumentWriters.DocumentRasterPage" /><a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
      <returns>The <see cref="T:Leadtools.Forms.DocumentWriters.DocumentPage" /> this method creates.</returns>
      <noremarks />
      <noexample />
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.DocumentWriters.DocumentWriter">Document Writers</seealso>
      <seealso cref="T:FT.Topics.ProgrammingWithDocumentWriters">Programming with LEADTOOLS Document Writers</seealso>
      <seealso cref="T:Leadtools.Topics.FilesToBeIncludedWithYourApplication">Files to be Included with Your Application</seealso>
      <seealso cref="T:Leadtools.Topics.UnlockingSpecialLEADFeatures">Unlocking Special LEAD Features</seealso>
    </member>
    <member name="P:Leadtools.Forms.DocumentWriters.DocumentRasterPage.Type">
      <summary>Gets the type of this document page. <a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
      <value>The type of this document page (<see cref="T:Leadtools.Forms.DocumentWriters.DocumentPageType">DocumentPageType.Raster</see>).</value>
      <noremarks />
      <noexample />
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.DocumentWriters.DocumentWriter">Document Writers</seealso>
      <seealso cref="T:FT.Topics.ProgrammingWithDocumentWriters">Programming with LEADTOOLS Document Writers</seealso>
      <seealso cref="T:Leadtools.Topics.FilesToBeIncludedWithYourApplication">Files to be Included with Your Application</seealso>
      <seealso cref="T:Leadtools.Topics.UnlockingSpecialLEADFeatures">Unlocking Special LEAD Features</seealso>
    </member>
    <member name="P:Leadtools.Forms.DocumentWriters.DocumentRasterPage.Image">
      <summary>The raster image representation of the page. <a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
      <value>An <see cref="T:Leadtools.RasterImage" /> that contains the image representation of the page.</value>
      <remarks>
        <para>The <see cref="P:Leadtools.Forms.DocumentWriters.DocumentRasterPage.Image" /> property must contain a <see cref="T:Leadtools.RasterImage" /> object --it cannot be <strong>null</strong>. This
            image object is used in the <see cref="M:Leadtools.Forms.DocumentWriters.DocumentWriter.AddPage(Leadtools.Forms.DocumentWriters.DocumentPage)">DocumentWriter.AddPage</see> or <see cref="M:Leadtools.Forms.DocumentWriters.DocumentWriter.InsertPage(Leadtools.Forms.DocumentWriters.DocumentPage,System.Int32)">DocumentWriter.InsertPage</see> methods to create the visual representation of the new page added to the document being created.</para>
        <para>The LEADTOOLS Document Writer toolkit will not use the <see cref="T:Leadtools.RasterImage" /> object after the call to
            <see cref="M:Leadtools.Forms.DocumentWriters.DocumentWriter.AddPage(Leadtools.Forms.DocumentWriters.DocumentPage)">DocumentWriter.AddPage</see> or <see cref="M:Leadtools.Forms.DocumentWriters.DocumentWriter.InsertPage(Leadtools.Forms.DocumentWriters.DocumentPage,System.Int32)">DocumentWriter.InsertPage</see> returns. This handle needs to be disposed to free the resources associated with it by the user.</para>
        <para>The raster image objects can be obtained from multiple sources as explained in <see cref="T:FT.Topics.ProgrammingWithDocumentWriters">LEADTOOLS Document Writers</see>.</para>
        <para>The LEADTOOLS Document Writer supports creating documents with zero or more empty pages inside them. Simply pass a page of type
            <see cref="T:Leadtools.Forms.DocumentWriters.DocumentEmptyPage" /> to  <see cref="M:Leadtools.Forms.DocumentWriters.DocumentWriter.AddPage(Leadtools.Forms.DocumentWriters.DocumentPage)">DocumentWriter.AddPage</see> or <see cref="M:Leadtools.Forms.DocumentWriters.DocumentWriter.InsertPage(Leadtools.Forms.DocumentWriters.DocumentPage,System.Int32)">DocumentWriter.InsertPage</see> methods. The dimension of the empty page
            must be set before hand in the <see cref="P:Leadtools.Forms.DocumentWriters.DocumentOptions.EmptyPageWidth">DocumentOptions.EmptyPageWidth</see> and
            <see cref="P:Leadtools.Forms.DocumentWriters.DocumentOptions.EmptyPageHeight">DocumentOptions.EmptyPageHeight</see> and its resolution set to
            <see cref="P:Leadtools.Forms.DocumentWriters.DocumentOptions.EmptyPageResolution">DocumentOptions.EmptyPageResolution</see>. As many empty pages as desired can be added and
            in any index desired. To use empty pages, make sure the <see cref="P:Leadtools.Forms.DocumentWriters.DocumentOptions.PageRestriction">DocumentOptions.PageRestriction</see>
            property is set to <see cref="T:Leadtools.Forms.DocumentWriters.DocumentPageRestriction">DocumentPageRestriction.Relaxed</see>.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.DocumentWriters.DocumentRasterPage" />.</example>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.DocumentWriters.DocumentWriter" />
      <seealso cref="T:Leadtools.Forms.DocumentWriters.DocumentFormat" />
      <seealso cref="T:FT.Topics.ProgrammingWithDocumentWriters">Programming with LEADTOOLS Document Writers</seealso>
      <seealso cref="T:Leadtools.Topics.FilesToBeIncludedWithYourApplication">Files to be Included with Your Application</seealso>
      <seealso cref="T:Leadtools.Topics.UnlockingSpecialLEADFeatures">Unlocking Special LEAD Features</seealso>
    </member>
    <member name="T:Leadtools.Forms.DocumentWriters.MobDocumentOptions">
      <summary>Provides extra options to use when saving a document using the Mobipocket e-book format (MOB) format. <a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
      <remarks>
        <para>The options set in the <see cref="T:Leadtools.Forms.DocumentWriters.MobDocumentOptions" /> class will be used when the user saves a document using the <see cref="T:Leadtools.Forms.DocumentWriters.DocumentFormat">DocumentFormat.Mob</see> format.</para>
        <para>To change the options used with the MOB format, perform the following steps:
            <list type="number"><item><description>Use the <see cref="M:Leadtools.Forms.DocumentWriters.DocumentWriter.GetOptions(Leadtools.Forms.DocumentWriters.DocumentFormat)">DocumentWriter.GetOptions</see> method of the <see cref="T:Leadtools.Forms.DocumentWriters.DocumentWriter" /> object being used. 
            Passing <see cref="T:Leadtools.Forms.DocumentWriters.DocumentFormat">DocumentFormat.Mob</see> to the <i>format</i> parameter. Note that the resulting object from the
            base <see cref="T:Leadtools.Forms.DocumentWriters.DocumentOptions" /> class needs to be cast to <see cref="T:Leadtools.Forms.DocumentWriters.MobDocumentOptions" />.</description></item><item><description>Use the various <see cref="T:Leadtools.Forms.DocumentWriters.MobDocumentOptions" /> properties to change the options.</description></item><item><description>Use <see cref="M:Leadtools.Forms.DocumentWriters.DocumentWriter.SetOptions(Leadtools.Forms.DocumentWriters.DocumentFormat,Leadtools.Forms.DocumentWriters.DocumentOptions)">DocumentWriter.SetOptions</see> to set the new options in the engine.</description></item><item><description>Now call the <see cref="M:Leadtools.Forms.DocumentWriters.DocumentWriter.BeginDocument(System.String,Leadtools.Forms.DocumentWriters.DocumentFormat)">DocumentWriter.BeginDocument</see> method (with <see cref="T:Leadtools.Forms.DocumentWriters.DocumentFormat">DocumentFormat.Mob</see> for the
            <i>format</i> parameter) to create a new document and add the pages.</description></item></list></para>
        <para>Note that this format does not support calling <see cref="M:Leadtools.Forms.DocumentWriters.DocumentWriter.InsertPage(Leadtools.Forms.DocumentWriters.DocumentPage,System.Int32)">DocumentWriter.InsertPage</see>.</para>
        <para>Currently, the <see cref="T:Leadtools.Forms.DocumentWriters.MobDocumentOptions" /> class contains no extra options.</para>
      </remarks>
      <noexample />
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.DocumentWriters.DocumentWriter" />
      <seealso cref="T:FT.Topics.ProgrammingWithDocumentWriters">Programming with LEADTOOLS Document Writers</seealso>
      <seealso cref="T:Leadtools.Topics.FilesToBeIncludedWithYourApplication">Files to be Included with Your Application</seealso>
      <seealso cref="T:Leadtools.Topics.UnlockingSpecialLEADFeatures">Unlocking Special LEAD Features</seealso>
    </member>
    <member name="T:Leadtools.Forms.DocumentWriters.DocumentOptions">
      <summary>Abstract base class that provides functionality common to all the format option
            classes in the LEADTOOLS Document Writers. <a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
      <remarks>
        <para>
          <strong>Note:</strong> In LEADTOOLS for Windows Runtime, the equivalent to this class is the <see cref="T:Leadtools.Forms.DocumentWriters.DocumentOptions" /> interface.</para>
        <para>You cannot use the <see cref="T:Leadtools.Forms.DocumentWriters.DocumentOptions" /> class directly. Instead, use one of the derived classes to get and set the options associated with a
            document format. The following table lists the document formats and the <see cref="T:Leadtools.Forms.DocumentWriters.DocumentOptions" /> derived class associated with it:</para>
        <para>
          <list type="table">
            <listheader>
              <term>Format</term>
              <description>Class</description>
            </listheader>
            <item>
              <term>
                <see cref="T:Leadtools.Forms.DocumentWriters.DocumentFormat">DocumentFormat.Ltd</see>
              </term>
              <description>
                <see cref="T:Leadtools.Forms.DocumentWriters.LtdDocumentOptions" />
              </description>
            </item>
            <item>
              <term>
                <see cref="T:Leadtools.Forms.DocumentWriters.DocumentFormat">DocumentFormat.Pdf</see>
              </term>
              <description>
                <see cref="T:Leadtools.Forms.DocumentWriters.PdfDocumentOptions" />
              </description>
            </item>
            <item>
              <term>
                <see cref="T:Leadtools.Forms.DocumentWriters.DocumentFormat">DocumentFormat.Doc</see>
              </term>
              <description>
                <see cref="T:Leadtools.Forms.DocumentWriters.DocDocumentOptions" />
              </description>
            </item>
            <item>
              <term>
                <see cref="T:Leadtools.Forms.DocumentWriters.DocumentFormat">DocumentFormat.Rtf</see>
              </term>
              <description>
                <see cref="T:Leadtools.Forms.DocumentWriters.RtfDocumentOptions" />
              </description>
            </item>
            <item>
              <term>
                <see cref="T:Leadtools.Forms.DocumentWriters.DocumentFormat">DocumentFormat.Html</see>
              </term>
              <description>
                <see cref="T:Leadtools.Forms.DocumentWriters.HtmlDocumentOptions" />
              </description>
            </item>
            <item>
              <term>
                <see cref="T:Leadtools.Forms.DocumentWriters.DocumentFormat">DocumentFormat.Text</see>
              </term>
              <description>
                <see cref="T:Leadtools.Forms.DocumentWriters.TextDocumentOptions" />
              </description>
            </item>
            <item>
              <term>
                <see cref="T:Leadtools.Forms.DocumentWriters.DocumentFormat">DocumentFormat.Emf</see>
              </term>
              <description>
                <see cref="T:Leadtools.Forms.DocumentWriters.EmfDocumentOptions" />
              </description>
            </item>
            <item>
              <term>
                <see cref="T:Leadtools.Forms.DocumentWriters.DocumentFormat">DocumentFormat.Xps</see>
              </term>
              <description>
                <see cref="T:Leadtools.Forms.DocumentWriters.XpsDocumentOptions" />
              </description>
            </item>
            <item>
              <term>
                <see cref="T:Leadtools.Forms.DocumentWriters.DocumentFormat">DocumentFormat.Docx</see>
              </term>
              <description>
                <see cref="T:Leadtools.Forms.DocumentWriters.DocxDocumentOptions" />
              </description>
            </item>
            <item>
              <term>
                <see cref="T:Leadtools.Forms.DocumentWriters.DocumentFormat">DocumentFormat.Xls</see>
              </term>
              <description>
                <see cref="T:Leadtools.Forms.DocumentWriters.XpsDocumentOptions" />
              </description>
            </item>
          </list>
        </para>
        <para>To change the options used with a particular format, perform the following steps:</para>
        <list type="number">
          <item>
            <description>
              <para>Use the <see cref="M:Leadtools.Forms.DocumentWriters.DocumentWriter.GetOptions(Leadtools.Forms.DocumentWriters.DocumentFormat)">DocumentWriter.GetOptions</see> method for the <see cref="T:Leadtools.Forms.DocumentWriters.DocumentWriter" /> object you are 
            using, passing
            <see cref="T:Leadtools.Forms.DocumentWriters.DocumentFormat" /> desired in to the <i>format</i> parameter. The resulting object from the base <see cref="T:Leadtools.Forms.DocumentWriters.DocumentOptions" /> class 
            needs to be cast
            to an appropriate derived class described in the previous table.</para>
            </description>
          </item>
          <item>
            <description>
              <para>Use the various derived class properties to change the options.</para>
            </description>
          </item>
          <item>
            <description>
              <para>Use <see cref="M:Leadtools.Forms.DocumentWriters.DocumentWriter.SetOptions(Leadtools.Forms.DocumentWriters.DocumentFormat,Leadtools.Forms.DocumentWriters.DocumentOptions)">DocumentWriter.SetOptions</see> to set the new options for the engine.</para>
            </description>
          </item>
          <item>
            <description>
              <para>Now call the <see cref="M:Leadtools.Forms.DocumentWriters.DocumentWriter.BeginDocument(System.String,Leadtools.Forms.DocumentWriters.DocumentFormat)">DocumentWriter.BeginDocument</see> method (using the 
             desired <see cref="T:Leadtools.Forms.DocumentWriters.DocumentFormat" /> value for
             the <i>format</i> parameter) to create a new document and add the pages.</para>
            </description>
          </item>
        </list>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.DocumentWriters.DocumentWriter" />.</example>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.DocumentWriters.DocumentWriter">Document Writers</seealso>
      <seealso cref="T:FT.Topics.ProgrammingWithDocumentWriters">Programming with LEADTOOLS Document Writers</seealso>
      <seealso cref="T:Leadtools.Topics.FilesToBeIncludedWithYourApplication">Files to be Included with Your Application</seealso>
      <seealso cref="T:Leadtools.Topics.UnlockingSpecialLEADFeatures">Unlocking Special LEAD Features</seealso>
    </member>
    <member name="M:Leadtools.Forms.DocumentWriters.DocumentOptions.#ctor">
      <summary>Initializes a new <see cref="T:Leadtools.Forms.DocumentWriters.DocumentOptions" /> object. <a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
      <remarks>
        <para>You cannot call this method directly. Instead, use the derived classes constructors.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.DocumentWriters.DocumentWriter" />.</example>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.DocumentWriters.DocumentWriter">Document Writers</seealso>
      <seealso cref="T:FT.Topics.ProgrammingWithDocumentWriters">Programming with LEADTOOLS Document Writers</seealso>
      <seealso cref="T:Leadtools.Topics.FilesToBeIncludedWithYourApplication">Files to be Included with Your Application</seealso>
      <seealso cref="T:Leadtools.Topics.UnlockingSpecialLEADFeatures">Unlocking Special LEAD Features</seealso>
    </member>
    <member name="M:Leadtools.Forms.DocumentWriters.DocumentOptions.Clone">
      <summary>Creates an exact copy of this <see cref="T:Leadtools.Forms.DocumentWriters.DocumentOptions" />. <a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
      <returns>The <see cref="T:Leadtools.Forms.DocumentWriters.DocumentOptions" /> this method creates.</returns>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Forms.DocumentWriters.DocumentWriter" />.</example>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.DocumentWriters.DocumentWriter">Document Writers</seealso>
      <seealso cref="T:FT.Topics.ProgrammingWithDocumentWriters">Programming with LEADTOOLS Document Writers</seealso>
      <seealso cref="T:Leadtools.Topics.FilesToBeIncludedWithYourApplication">Files to be Included with Your Application</seealso>
      <seealso cref="T:Leadtools.Topics.UnlockingSpecialLEADFeatures">Unlocking Special LEAD Features</seealso>
    </member>
    <member name="P:Leadtools.Forms.DocumentWriters.DocumentOptions.Format">
      <summary>Gets the document format type associated with this options class. <a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
      <value>This property will always return the <see cref="T:Leadtools.Forms.DocumentWriters.DocumentFormat" /> associated with the derived class.</value>
      <remarks>
        <para>This property is required internally by LEADTOOLS.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.DocumentWriters.DocumentWriter" />.</example>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.DocumentWriters.DocumentWriter" />
      <seealso cref="T:FT.Topics.ProgrammingWithDocumentWriters">Programming with LEADTOOLS Document Writers</seealso>
      <seealso cref="T:Leadtools.Topics.FilesToBeIncludedWithYourApplication">Files to be Included with Your Application</seealso>
      <seealso cref="T:Leadtools.Topics.UnlockingSpecialLEADFeatures">Unlocking Special LEAD Features</seealso>
    </member>
    <member name="P:Leadtools.Forms.DocumentWriters.DocumentOptions.PageRestriction">
      <summary>Gets or sets a value that indicates whether there can be 
            blank pages and overlay images. <a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
      <value>A <see cref="T:Leadtools.Forms.DocumentWriters.DocumentPageRestriction" /> enumeration member 
            that specifies the current document page restriction.</value>
      <remarks>
        <para>You can use the <see cref="P:Leadtools.Forms.DocumentWriters.DocumentOptions.PageRestriction" /> property to 
            control the page creation process used by the <see cref="T:Leadtools.Forms.DocumentWriters.DocumentWriter" />.</para>
        <para>
          <see cref="T:Leadtools.Forms.DocumentWriters.DocumentPageRestriction">DocumentPageRestriction.Default</see> 
            requires a valid EMF handle in the
            <see cref="P:Leadtools.Forms.DocumentWriters.DocumentEmfPage.EmfHandle">DocumentEmfPage.EmfHandle</see> property 
            in order to create a document and thus does not support empty
            pages. Also, if the document supports overlay images (for example, 
            PDF with the <see cref="P:Leadtools.Forms.DocumentWriters.PdfDocumentOptions.ImageOverText" /> option set
            to <strong>true</strong>), then an overlay image must be present 
            in the <see cref="P:Leadtools.Forms.DocumentWriters.DocumentSvgPage.Image">DocumentSvgPage.Image</see> property of
            the page.</para>
        <para>
          <see cref="T:Leadtools.Forms.DocumentWriters.DocumentPageRestriction">DocumentPageRestriction.Relaxed</see> does not require an EMF handle in the
            <see cref="P:Leadtools.Forms.DocumentWriters.DocumentEmfPage.EmfHandle">DocumentEmfPage.EmfHandle</see> property and thus supports creating of a document with zero or more empty
            pages. Also, if the document supports overlay images (for example, PDF with the <see cref="P:Leadtools.Forms.DocumentWriters.PdfDocumentOptions.ImageOverText" /> option set
            to <strong>true</strong>) and an overlay image is not present in the <see cref="P:Leadtools.Forms.DocumentWriters.DocumentSvgPage.Image">DocumentSvgPage.Image</see> property of
            the page, then no overlay is automatically assumed and the page will be created successfully.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.DocumentWriters.DocumentWriter" />.</example>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.DocumentWriters.DocumentWriter" />
      <seealso cref="T:FT.Topics.ProgrammingWithDocumentWriters">Programming with LEADTOOLS Document Writers</seealso>
      <seealso cref="T:Leadtools.Topics.FilesToBeIncludedWithYourApplication">Files to be Included with Your Application</seealso>
      <seealso cref="T:Leadtools.Topics.UnlockingSpecialLEADFeatures">Unlocking Special LEAD Features</seealso>
    </member>
    <member name="P:Leadtools.Forms.DocumentWriters.DocumentOptions.EmptyPageWidth">
      <summary>Gets or sets the document empty page width. <a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
      <value>A double value that indicates the width of an empty page in inches. Default value is 8.5</value>
      <remarks>
        <para>The <see cref="T:Leadtools.Forms.DocumentWriters.DocumentWriter" /> class supports creating document with empty pages. To create an empty page, use
            a <see cref="T:Leadtools.Forms.DocumentWriters.DocumentPage" /> structure with its <see cref="P:Leadtools.Forms.DocumentWriters.DocumentEmfPage.EmfHandle" /> set to <strong>IntPtr.Zero</strong> and pass it to
            the <see cref="M:Leadtools.Forms.DocumentWriters.DocumentWriter.AddPage(Leadtools.Forms.DocumentWriters.DocumentPage)">DocumentWriter.AddPage</see> or <see cref="M:Leadtools.Forms.DocumentWriters.DocumentWriter.InsertPage(Leadtools.Forms.DocumentWriters.DocumentPage,System.Int32)">DocumentWriter.InsertPage</see>
            methods. Control the size of this empty page in inches by setting the <see cref="P:Leadtools.Forms.DocumentWriters.DocumentOptions.EmptyPageWidth" />, <see cref="P:Leadtools.Forms.DocumentWriters.DocumentOptions.EmptyPageHeight" /> and
            <see cref="P:Leadtools.Forms.DocumentWriters.DocumentOptions.EmptyPageResolution" /> properties to the desired values.</para>
        <para>Note that in order to create empty pages, the <see cref="P:Leadtools.Forms.DocumentWriters.DocumentOptions.PageRestriction" /> property must be set to
            <see cref="T:Leadtools.Forms.DocumentWriters.DocumentPageRestriction">DocumentPageRestriction.Relaxed</see>.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.DocumentWriters.DocumentWriter" />.</example>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.DocumentWriters.DocumentWriter" />
      <seealso cref="T:FT.Topics.ProgrammingWithDocumentWriters">Programming with LEADTOOLS Document Writers</seealso>
      <seealso cref="T:Leadtools.Topics.FilesToBeIncludedWithYourApplication">Files to be Included with Your Application</seealso>
      <seealso cref="T:Leadtools.Topics.UnlockingSpecialLEADFeatures">Unlocking Special LEAD Features</seealso>
    </member>
    <member name="P:Leadtools.Forms.DocumentWriters.DocumentOptions.EmptyPageHeight">
      <summary>Gets or sets the document empty page height. <a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
      <value>A double value that indicates the height of an empty page in inches. Default value is 11.</value>
      <remarks>
        <para>The <see cref="T:Leadtools.Forms.DocumentWriters.DocumentWriter" /> class supports creating document with empty pages. To create an empty page, use
            a <see cref="T:Leadtools.Forms.DocumentWriters.DocumentPage" /> structure with its <see cref="P:Leadtools.Forms.DocumentWriters.DocumentEmfPage.EmfHandle" /> set to <strong>IntPtr.Zero</strong> and pass it to
            the <see cref="M:Leadtools.Forms.DocumentWriters.DocumentWriter.AddPage(Leadtools.Forms.DocumentWriters.DocumentPage)">DocumentWriter.AddPage</see> or <see cref="M:Leadtools.Forms.DocumentWriters.DocumentWriter.InsertPage(Leadtools.Forms.DocumentWriters.DocumentPage,System.Int32)">DocumentWriter.InsertPage</see> methods. You
            can control the size of this empty page in inches by setting the <see cref="P:Leadtools.Forms.DocumentWriters.DocumentOptions.EmptyPageWidth" />, <see cref="P:Leadtools.Forms.DocumentWriters.DocumentOptions.EmptyPageHeight" /> and
            <see cref="P:Leadtools.Forms.DocumentWriters.DocumentOptions.EmptyPageResolution" /> properties to the desired values.</para>
        <para>Note that in order to create empty pages, the <see cref="P:Leadtools.Forms.DocumentWriters.DocumentOptions.PageRestriction" /> property must be set to
            <see cref="T:Leadtools.Forms.DocumentWriters.DocumentPageRestriction">DocumentPageRestriction.Relaxed</see>.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.DocumentWriters.DocumentWriter" />.</example>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.DocumentWriters.DocumentWriter" />
      <seealso cref="T:FT.Topics.ProgrammingWithDocumentWriters">Programming with LEADTOOLS Document Writers</seealso>
      <seealso cref="T:Leadtools.Topics.FilesToBeIncludedWithYourApplication">Files to be Included with Your Application</seealso>
      <seealso cref="T:Leadtools.Topics.UnlockingSpecialLEADFeatures">Unlocking Special LEAD Features</seealso>
    </member>
    <member name="P:Leadtools.Forms.DocumentWriters.DocumentOptions.EmptyPageResolution">
      <summary>Gets or sets the resolution (in dots per inch) of the document empty page. <a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
      <value>Document resolution value given in dots per inch unit and it controls the dimensions of the empty page. Default value is 0
            (use the current screen resolution).</value>
      <remarks>
        <para>The <see cref="T:Leadtools.Forms.DocumentWriters.DocumentWriter" /> class supports creating document with empty pages. To create an empty page, use
            a <see cref="T:Leadtools.Forms.DocumentWriters.DocumentPage" /> structure with its <see cref="P:Leadtools.Forms.DocumentWriters.DocumentEmfPage.EmfHandle" /> set to <strong>IntPtr.Zero</strong> and pass it to
            the <see cref="M:Leadtools.Forms.DocumentWriters.DocumentWriter.AddPage(Leadtools.Forms.DocumentWriters.DocumentPage)">DocumentWriter.AddPage</see> or <see cref="M:Leadtools.Forms.DocumentWriters.DocumentWriter.InsertPage(Leadtools.Forms.DocumentWriters.DocumentPage,System.Int32)">DocumentWriter.InsertPage</see> methods. You
            can control the size of this empty page in inches by setting the <see cref="P:Leadtools.Forms.DocumentWriters.DocumentOptions.EmptyPageWidth" />, <see cref="P:Leadtools.Forms.DocumentWriters.DocumentOptions.EmptyPageHeight" /> and
            <see cref="P:Leadtools.Forms.DocumentWriters.DocumentOptions.EmptyPageResolution" /> properties to the desired values.</para>
        <para>Note that in order to create empty pages, the <see cref="P:Leadtools.Forms.DocumentWriters.DocumentOptions.PageRestriction" /> property must be set to
            <see cref="T:Leadtools.Forms.DocumentWriters.DocumentPageRestriction">DocumentPageRestriction.Relaxed</see>.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.DocumentWriters.DocumentWriter" />.</example>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.DocumentWriters.DocumentWriter" />
      <seealso cref="T:FT.Topics.ProgrammingWithDocumentWriters">Programming with LEADTOOLS Document Writers</seealso>
      <seealso cref="T:Leadtools.Topics.FilesToBeIncludedWithYourApplication">Files to be Included with Your Application</seealso>
      <seealso cref="T:Leadtools.Topics.UnlockingSpecialLEADFeatures">Unlocking Special LEAD Features</seealso>
    </member>
    <member name="P:Leadtools.Forms.DocumentWriters.DocumentOptions.DocumentResolution">
      <summary>Gets or sets the document resolution (in dots per inch) of the resulting document. <a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
      <value>Document resolution value given in dots per inch unit and it controls the dimensions of the resulting document. Default value is 0
            (use the resolution of the actual page).</value>
      <remarks>
        <para>When creating documents, the <see cref="T:Leadtools.Forms.DocumentWriters.DocumentWriter" /> object will use the resolution set in the Enhanced Metafile handle
            passed to <see cref="M:Leadtools.Forms.DocumentWriters.DocumentWriter.AddPage(Leadtools.Forms.DocumentWriters.DocumentPage)">DocumentWriter.AddPage</see> or <see cref="M:Leadtools.Forms.DocumentWriters.DocumentWriter.InsertPage(Leadtools.Forms.DocumentWriters.DocumentPage,System.Int32)">DocumentWriter.InsertPage</see> methods
            through <see cref="P:Leadtools.Forms.DocumentWriters.DocumentEmfPage.EmfHandle">DocumentEmfPage.EmfHandle</see>. However, sometimes it is desirable to override this behavior and use a
            pre-calculated fixed value for the resolution instead. To do this, change the value of the <see cref="P:Leadtools.Forms.DocumentWriters.DocumentOptions.DocumentResolution" /> property from the default
            value of 0 to the desired value before any calls to <see cref="M:Leadtools.Forms.DocumentWriters.DocumentWriter.AddPage(Leadtools.Forms.DocumentWriters.DocumentPage)">DocumentWriter.AddPage</see> or
            <see cref="M:Leadtools.Forms.DocumentWriters.DocumentWriter.InsertPage(Leadtools.Forms.DocumentWriters.DocumentPage,System.Int32)">DocumentWriter.InsertPage</see>.
            </para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.DocumentWriters.DocumentWriter" />.</example>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.DocumentWriters.DocumentWriter" />
      <seealso cref="T:FT.Topics.ProgrammingWithDocumentWriters">Programming with LEADTOOLS Document Writers</seealso>
      <seealso cref="T:Leadtools.Topics.FilesToBeIncludedWithYourApplication">Files to be Included with Your Application</seealso>
      <seealso cref="T:Leadtools.Topics.UnlockingSpecialLEADFeatures">Unlocking Special LEAD Features</seealso>
    </member>
    <member name="P:Leadtools.Forms.DocumentWriters.DocumentOptions.MaintainAspectRatio">
      <summary>Gets or sets a value indicating whether to maintain the aspect ratio of the original emf file. <a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
      <value>
        <strong>true</strong> to maintain the aspect so the created document will have the same aspect ratio of the original emf file; <strong>false</strong>, otherwise.</value>
      <remarks>
        <para> The aspect ratio of an image is its width divided by its height. If <see cref="P:Leadtools.Forms.DocumentWriters.DocumentOptions.MaintainAspectRatio">MaintainAspectRatio</see> is set then 
            the <see cref="P:Leadtools.Forms.DocumentWriters.DocumentOptions.DocumentResolution">DocumentResolution</see> value will be mapped to the higher (X or Y) resolution of the original emf file, while the 
            other resolution will be calculated in a way that preserve the aspect ratio of the original file.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.DocumentWriters.DocumentWriter" />.</example>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.DocumentWriters.DocumentWriter" />
      <seealso cref="T:FT.Topics.ProgrammingWithDocumentWriters">Programming with LEADTOOLS Document Writers</seealso>
      <seealso cref="T:Leadtools.Topics.FilesToBeIncludedWithYourApplication">Files to be Included with Your Application</seealso>
      <seealso cref="T:Leadtools.Topics.UnlockingSpecialLEADFeatures">Unlocking Special LEAD Features</seealso>
    </member>
    <member name="M:Leadtools.Forms.DocumentWriters.MobDocumentOptions.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Leadtools.Forms.DocumentWriters.MobDocumentOptions" /> class. <a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
      <remarks>
        <para>Currently, the <see cref="T:Leadtools.Forms.DocumentWriters.MobDocumentOptions" /> class contains no extra options.</para>
      </remarks>
      <noexample />
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.DocumentWriters.DocumentWriter" />
      <seealso cref="T:FT.Topics.ProgrammingWithDocumentWriters">Programming with LEADTOOLS Document Writers</seealso>
      <seealso cref="T:Leadtools.Topics.FilesToBeIncludedWithYourApplication">Files to be Included with Your Application</seealso>
      <seealso cref="T:Leadtools.Topics.UnlockingSpecialLEADFeatures">Unlocking Special LEAD Features</seealso>
    </member>
    <member name="M:Leadtools.Forms.DocumentWriters.MobDocumentOptions.Clone">
      <summary>Creates an exact copy of this <see cref="T:Leadtools.Forms.DocumentWriters.DocumentOptions" />. <a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
      <returns>The <see cref="T:Leadtools.Forms.DocumentWriters.DocumentOptions" /> this method creates.</returns>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Forms.DocumentWriters.DocumentWriter" />.</example>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.DocumentWriters.DocumentWriter">Document Writers</seealso>
      <seealso cref="T:FT.Topics.ProgrammingWithDocumentWriters">Programming with LEADTOOLS Document Writers</seealso>
      <seealso cref="T:Leadtools.Topics.FilesToBeIncludedWithYourApplication">Files to be Included with Your Application</seealso>
      <seealso cref="T:Leadtools.Topics.UnlockingSpecialLEADFeatures">Unlocking Special LEAD Features</seealso>
    </member>
    <member name="M:Leadtools.Forms.DocumentWriters.MobDocumentOptions.Clone_WinRT">
      <summary>
            This class implementation of <see cref="T:Leadtools.Forms.DocumentWriters.DocumentOptions" />.
            </summary>
      <returns>Refer to <see cref="M:Leadtools.Forms.DocumentWriters.DocumentOptions.Clone">DocumentOptions.Clone</see>.</returns>
      <noremarks />
      <noexample />
      <winrt />
    </member>
    <member name="P:Leadtools.Forms.DocumentWriters.MobDocumentOptions.Format">
      <summary>Gets the document format type associated with this options class. <a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
      <value>This property will always return <see cref="T:Leadtools.Forms.DocumentWriters.DocumentFormat">DocumentFormat.Mob</see>.</value>
      <remarks>
        <para>This property is required internally by LEADTOOLS.</para>
      </remarks>
      <noexample />
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.DocumentWriters.DocumentWriter" />
      <seealso cref="T:FT.Topics.ProgrammingWithDocumentWriters">Programming with LEADTOOLS Document Writers</seealso>
      <seealso cref="T:Leadtools.Topics.FilesToBeIncludedWithYourApplication">Files to be Included with Your Application</seealso>
      <seealso cref="T:Leadtools.Topics.UnlockingSpecialLEADFeatures">Unlocking Special LEAD Features</seealso>
    </member>
    <member name="P:Leadtools.Forms.DocumentWriters.MobDocumentOptions.Format_WinRT">
      <summary>
            This class implementation of <see cref="P:Leadtools.Forms.DocumentWriters.DocumentOptions.Format">DocumentOptions.Format</see>.
            </summary>
      <value>Refer to <see cref="P:Leadtools.Forms.DocumentWriters.DocumentOptions.Format">DocumentOptions.Format</see>.</value>
      <noremarks />
      <noexample />
      <winrt />
    </member>
    <member name="P:Leadtools.Forms.DocumentWriters.MobDocumentOptions.PageRestriction_WinRT">
      <summary>
            This class implementation of <see cref="P:Leadtools.Forms.DocumentWriters.DocumentOptions.PageRestriction">DocumentOptions.PageRestriction</see>.
            </summary>
      <value>Refer to <see cref="P:Leadtools.Forms.DocumentWriters.DocumentOptions.PageRestriction">DocumentOptions.PageRestriction</see>.</value>
      <noremarks />
      <noexample />
      <winrt />
    </member>
    <member name="P:Leadtools.Forms.DocumentWriters.MobDocumentOptions.EmptyPageWidth_WinRT">
      <summary>
            This class implementation of <see cref="P:Leadtools.Forms.DocumentWriters.DocumentOptions.EmptyPageWidth">DocumentOptions.EmptyPageWidth</see>.
            </summary>
      <value>Refer to <see cref="P:Leadtools.Forms.DocumentWriters.DocumentOptions.EmptyPageWidth">DocumentOptions.EmptyPageWidth</see>.</value>
      <noremarks />
      <noexample />
      <winrt />
    </member>
    <member name="P:Leadtools.Forms.DocumentWriters.MobDocumentOptions.EmptyPageHeight_WinRT">
      <summary>
            This class implementation of <see cref="P:Leadtools.Forms.DocumentWriters.DocumentOptions.EmptyPageHeight">DocumentOptions.EmptyPageHeight</see>.
            </summary>
      <value>Refer to <see cref="P:Leadtools.Forms.DocumentWriters.DocumentOptions.EmptyPageHeight">DocumentOptions.EmptyPageHeight</see>.</value>
      <noremarks />
      <noexample />
      <winrt />
    </member>
    <member name="P:Leadtools.Forms.DocumentWriters.MobDocumentOptions.EmptyPageResolution_WinRT">
      <summary>
            This class implementation of <see cref="P:Leadtools.Forms.DocumentWriters.DocumentOptions.EmptyPageResolution">DocumentOptions.EmptyPageResolution</see>.
            </summary>
      <value>Refer to <see cref="P:Leadtools.Forms.DocumentWriters.DocumentOptions.EmptyPageResolution">DocumentOptions.EmptyPageResolution</see>.</value>
      <noremarks />
      <noexample />
      <winrt />
    </member>
    <member name="P:Leadtools.Forms.DocumentWriters.MobDocumentOptions.DocumentResolution_WinRT">
      <summary>
            This class implementation of <see cref="P:Leadtools.Forms.DocumentWriters.DocumentOptions.DocumentResolution">DocumentOptions.DocumentResolution</see>.
            </summary>
      <value>Refer to <see cref="P:Leadtools.Forms.DocumentWriters.DocumentOptions.DocumentResolution">DocumentOptions.DocumentResolution</see>.</value>
      <noremarks />
      <noexample />
      <winrt />
    </member>
    <member name="P:Leadtools.Forms.DocumentWriters.MobDocumentOptions.MaintainAspectRatio_WinRT">
      <summary>
            This class implementation of <see cref="P:Leadtools.Forms.DocumentWriters.DocumentOptions.MaintainAspectRatio">DocumentOptions.MaintainAspectRatio</see>.
            </summary>
      <value>Refer to <see cref="P:Leadtools.Forms.DocumentWriters.DocumentOptions.MaintainAspectRatio">DocumentOptions.MaintainAspectRatio</see>.</value>
      <noremarks />
      <noexample />
      <winrt />
    </member>
    <member name="T:Leadtools.Forms.DocumentWriters.AltoXmlDocumentOptions">
      <summary>Provides extra options to use when saving a document using the ALTO (Analyzed Layout and Text Object) format. <a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
      <remarks>
        <para>The options set in the <see cref="T:Leadtools.Forms.DocumentWriters.AltoXmlDocumentOptions" /> class will be used when the user saves a document using the <see cref="T:Leadtools.Forms.DocumentWriters.DocumentFormat">DocumentFormat.AltoXml</see> format.</para>
        <para>To change the options used with the Alto format, perform the following steps:
            <list type="number"><item><description>Use the <see cref="M:Leadtools.Forms.DocumentWriters.DocumentWriter.GetOptions(Leadtools.Forms.DocumentWriters.DocumentFormat)">DocumentWriter.GetOptions</see> method of the <see cref="T:Leadtools.Forms.DocumentWriters.DocumentWriter" /> object being used. 
            Passing <see cref="T:Leadtools.Forms.DocumentWriters.DocumentFormat">DocumentFormat.AltoXml</see> to the <i>format</i> parameter. Note that the resulting object from the base 
            <see cref="T:Leadtools.Forms.DocumentWriters.DocumentOptions" /> class needs to be cast to <see cref="T:Leadtools.Forms.DocumentWriters.AltoXmlDocumentOptions" />.</description></item><item><description>Use the various <see cref="T:Leadtools.Forms.DocumentWriters.AltoXmlDocumentOptions" /> properties to change the options.</description></item><item><description>Use <see cref="M:Leadtools.Forms.DocumentWriters.DocumentWriter.SetOptions(Leadtools.Forms.DocumentWriters.DocumentFormat,Leadtools.Forms.DocumentWriters.DocumentOptions)">DocumentWriter.SetOptions</see> to set the new options in the engine.</description></item><item><description>Now you can call the <see cref="M:Leadtools.Forms.DocumentWriters.DocumentWriter.BeginDocument(System.String,Leadtools.Forms.DocumentWriters.DocumentFormat)">DocumentWriter.BeginDocument</see> method (again, with <see cref="T:Leadtools.Forms.DocumentWriters.DocumentFormat">DocumentFormat.AltoXml</see> 
            for the <i>format</i> parameter) to create a new document and add the pages.</description></item></list></para>
        <para>Note that this format does not support calling <see cref="M:Leadtools.Forms.DocumentWriters.DocumentWriter.InsertPage(Leadtools.Forms.DocumentWriters.DocumentPage,System.Int32)">DocumentWriter.InsertPage</see>.</para>
      </remarks>
      <keywords>Alto|Document Writers,AltoXml</keywords>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.DocumentWriters.DocumentWriter" />
      <seealso cref="T:FT.Topics.ProgrammingWithDocumentWriters">Programming with LEADTOOLS Document Writers</seealso>
      <seealso cref="T:Leadtools.Topics.FilesToBeIncludedWithYourApplication">Files to be Included with Your Application</seealso>
      <seealso cref="T:Leadtools.Topics.UnlockingSpecialLEADFeatures">Unlocking Special LEAD Features</seealso>
      <example>
        <p>
          <para>This example will create a new text file using some of the supported options.</para>
        </p>
        <code lang="VB">      Imports Leadtools.Forms.DocumentWriters
      Imports Leadtools
      Imports Leadtools.Codecs
      Imports Leadtools.Forms.Ocr

      &lt;TestMethod&gt; _
      Public Sub AltoXmlDocumentOptionsExample()
         Dim inputFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "ocr1.tif")
         Dim outputFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "Example.xml")
         ' Setup LEADTOOLS OCR engine
         Using ocrEngine As IOcrEngine = OcrEngineManager.CreateEngine(OcrEngineType.Advantage, False)
            ocrEngine.Startup(Nothing, Nothing, Nothing, LEAD_VARS.OcrAdvantageRuntimeDir)

            ' Get the DocumentWriter instance
            Dim docWriter As New DocumentWriter()
            ' Change the ALTO XML options
            Dim altoXmlOptions As AltoXmlDocumentOptions = DirectCast(docWriter.GetOptions(DocumentFormat.AltoXml), AltoXmlDocumentOptions)
            altoXmlOptions.FileName = inputFileName
            altoXmlOptions.SoftwareCreator = "LEAD"
            docWriter.SetOptions(DocumentFormat.AltoXml, altoXmlOptions)

            ' Create a document
            Using ocrDocument As IOcrDocument = ocrEngine.DocumentManager.CreateDocument()
               ' Add the image
               Dim ocrPage As IOcrPage = ocrDocument.Pages.AddPage(inputFileName, Nothing)

               ' Recognize it
               ocrPage.Recognize(Nothing)

               ' Save the document as ALTO XML
               ocrDocument.Save(outputFileName, DocumentFormat.AltoXml, Nothing)
            End Using
         End Using
      End Sub

      Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
      Public Const OcrAdvantageRuntimeDir As String = "C:\LEADTOOLS 19\Bin\Common\OcrAdvantageRuntime"
      End Class
</code>
        <code lang="CS">      using Leadtools.Forms.DocumentWriters;
      using Leadtools;
      using Leadtools.Codecs;
      using Leadtools.Forms.Ocr;

      public void AltoXmlDocumentOptionsExample()
      {
         var inputFileName = Path.Combine(LEAD_VARS.ImagesDir, "ocr1.tif");
         var outputFileName = Path.Combine(LEAD_VARS.ImagesDir, "Example.xml");
         // Setup LEADTOOLS OCR engine
         using (var ocrEngine = OcrEngineManager.CreateEngine(OcrEngineType.Advantage, false))
         {
            ocrEngine.Startup(null, null, null, LEAD_VARS.OcrAdvantageRuntimeDir);

            // Get the DocumentWriter instance
            var docWriter = new DocumentWriter();
            // Change the ALTO XML options
            var altoXmlOptions = docWriter.GetOptions(DocumentFormat.AltoXml) as AltoXmlDocumentOptions;
            altoXmlOptions.FileName = inputFileName;
            altoXmlOptions.SoftwareCreator = "LEAD";
            docWriter.SetOptions(DocumentFormat.AltoXml, altoXmlOptions);

            // Create a document
            using (var ocrDocument = ocrEngine.DocumentManager.CreateDocument())
            {
               // Add the image
               var ocrPage = ocrDocument.Pages.AddPage(inputFileName, null);

               // Recognize it
               ocrPage.Recognize(null);

               // Save the document as ALTO XML
               ocrDocument.Save(outputFileName, DocumentFormat.AltoXml, null);
            }
         }
      }

      static class LEAD_VARS
      {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
      public const string OcrAdvantageRuntimeDir = @"C:\LEADTOOLS 19\Bin\Common\OcrAdvantageRuntime";
      }
</code>
      </example>
    </member>
    <member name="M:Leadtools.Forms.DocumentWriters.AltoXmlDocumentOptions.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Leadtools.Forms.DocumentWriters.AltoXmlDocumentOptions" /> class. <a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
      <remarks>
        <para>The following table lists the default values of the <see cref="T:Leadtools.Forms.DocumentWriters.AltoXmlDocumentOptions" /> properties:
            <table><tr><th>Property</th><th>Value</th></tr><tr><td><see cref="P:Leadtools.Forms.DocumentWriters.AltoXmlDocumentOptions.MeasurementUnit" /></td><td><see cref="T:Leadtools.Forms.DocumentWriters.AltoXmlMeasurementUnit">AltoXmlMeasurementUnit.MM10</see></td></tr><tr><td><see cref="P:Leadtools.Forms.DocumentWriters.AltoXmlDocumentOptions.FirstPhysicalPageNumber" /></td><td><strong>1</strong></td></tr><tr><td><see cref="P:Leadtools.Forms.DocumentWriters.AltoXmlDocumentOptions.Formatted" /></td><td><strong>false</strong></td></tr><tr><td><see cref="P:Leadtools.Forms.DocumentWriters.AltoXmlDocumentOptions.Indentation" /></td><td><strong>'\t'</strong></td></tr></table></para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.DocumentWriters.AltoXmlDocumentOptions" />.</example>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.DocumentWriters.DocumentWriter" />
      <seealso cref="T:FT.Topics.ProgrammingWithDocumentWriters">Programming with LEADTOOLS Document Writers</seealso>
      <seealso cref="T:Leadtools.Topics.FilesToBeIncludedWithYourApplication">Files to be Included with Your Application</seealso>
      <seealso cref="T:Leadtools.Topics.UnlockingSpecialLEADFeatures">Unlocking Special LEAD Features</seealso>
    </member>
    <member name="M:Leadtools.Forms.DocumentWriters.AltoXmlDocumentOptions.Clone">
      <summary>Creates an exact copy of this <see cref="T:Leadtools.Forms.DocumentWriters.DocumentOptions" /><a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
      <returns>The <see cref="T:Leadtools.Forms.DocumentWriters.DocumentOptions" /> this method creates.</returns>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Forms.DocumentWriters.DocumentWriter" />.</example>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.DocumentWriters.DocumentWriter">Document Writers</seealso>
      <seealso cref="T:FT.Topics.ProgrammingWithDocumentWriters">Programming with LEADTOOLS Document Writers</seealso>
      <seealso cref="T:Leadtools.Topics.FilesToBeIncludedWithYourApplication">Files to be Included with Your Application</seealso>
      <seealso cref="T:Leadtools.Topics.UnlockingSpecialLEADFeatures">Unlocking Special LEAD Features</seealso>
    </member>
    <member name="M:Leadtools.Forms.DocumentWriters.AltoXmlDocumentOptions.Clone_WinRT">
      <summary>
            This class implementation of <see cref="T:Leadtools.Forms.DocumentWriters.DocumentOptions" />.
            </summary>
      <returns>Refer to <see cref="M:Leadtools.Forms.DocumentWriters.DocumentOptions.Clone">DocumentOptions.Clone</see>.</returns>
      <noremarks />
      <noexample />
      <winrt />
    </member>
    <member name="P:Leadtools.Forms.DocumentWriters.AltoXmlDocumentOptions.Format">
      <summary>Gets the document format type associated with this options class. <a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
      <value>This property will always return <see cref="T:Leadtools.Forms.DocumentWriters.DocumentFormat">DocumentFormat.AltoXml</see>.</value>
      <remarks>
        <para>This property is required internally by LEADTOOLS.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.DocumentWriters.AltoXmlDocumentOptions" />.</example>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.DocumentWriters.DocumentWriter" />
      <seealso cref="T:FT.Topics.ProgrammingWithDocumentWriters">Programming with LEADTOOLS Document Writers</seealso>
      <seealso cref="T:Leadtools.Topics.FilesToBeIncludedWithYourApplication">Files to be Included with Your Application</seealso>
      <seealso cref="T:Leadtools.Topics.UnlockingSpecialLEADFeatures">Unlocking Special LEAD Features</seealso>
    </member>
    <member name="P:Leadtools.Forms.DocumentWriters.AltoXmlDocumentOptions.MeasurementUnit">
      <summary>Gets or sets the measurement unit for the ALTO document. <a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
      <value>The measurement unit for the ALTO document. Default value is <see cref="T:Leadtools.Forms.DocumentWriters.AltoXmlMeasurementUnit">AltoXmlMeasurementUnit.MM10</see></value>
      <noremarks />
      <noexample />
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.DocumentWriters.DocumentWriter" />
      <seealso cref="T:FT.Topics.ProgrammingWithDocumentWriters">Programming with LEADTOOLS Document Writers</seealso>
      <seealso cref="T:Leadtools.Topics.FilesToBeIncludedWithYourApplication">Files to be Included with Your Application</seealso>
      <seealso cref="T:Leadtools.Topics.UnlockingSpecialLEADFeatures">Unlocking Special LEAD Features</seealso>
    </member>
    <member name="P:Leadtools.Forms.DocumentWriters.AltoXmlDocumentOptions.FileName">
      <summary>Gets or sets the file name for the ALTO document. <a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
      <value>A The file name for the ALTO document. Default value is <strong>null</strong>.</value>
      <noremarks />
      <noexample />
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.DocumentWriters.DocumentWriter" />
      <seealso cref="T:FT.Topics.ProgrammingWithDocumentWriters">Programming with LEADTOOLS Document Writers</seealso>
      <seealso cref="T:Leadtools.Topics.FilesToBeIncludedWithYourApplication">Files to be Included with Your Application</seealso>
      <seealso cref="T:Leadtools.Topics.UnlockingSpecialLEADFeatures">Unlocking Special LEAD Features</seealso>
    </member>
    <member name="P:Leadtools.Forms.DocumentWriters.AltoXmlDocumentOptions.ProcessingDateTime">
      <summary>Gets or sets the processing date/time for the ALTO document. <a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
      <value>The processing date/time for the ALTO document. Default value is <strong>null</strong>.</value>
      <noremarks />
      <noexample />
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.DocumentWriters.DocumentWriter" />
      <seealso cref="T:FT.Topics.ProgrammingWithDocumentWriters">Programming with LEADTOOLS Document Writers</seealso>
      <seealso cref="T:Leadtools.Topics.FilesToBeIncludedWithYourApplication">Files to be Included with Your Application</seealso>
      <seealso cref="T:Leadtools.Topics.UnlockingSpecialLEADFeatures">Unlocking Special LEAD Features</seealso>
    </member>
    <member name="P:Leadtools.Forms.DocumentWriters.AltoXmlDocumentOptions.ProcessingAgency">
      <summary>Gets or sets the processing agency for the ALTO document. <a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
      <value>The processing agency for the ALTO document. Default value is <strong>null</strong>.</value>
      <noremarks />
      <noexample />
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.DocumentWriters.DocumentWriter" />
      <seealso cref="T:FT.Topics.ProgrammingWithDocumentWriters">Programming with LEADTOOLS Document Writers</seealso>
      <seealso cref="T:Leadtools.Topics.FilesToBeIncludedWithYourApplication">Files to be Included with Your Application</seealso>
      <seealso cref="T:Leadtools.Topics.UnlockingSpecialLEADFeatures">Unlocking Special LEAD Features</seealso>
    </member>
    <member name="P:Leadtools.Forms.DocumentWriters.AltoXmlDocumentOptions.ProcessingStepDescription">
      <summary>Gets or sets the processing step description for the ALTO document. <a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
      <value>The Processing step description for the ALTO document. Default value is <strong>null</strong>.</value>
      <noremarks />
      <noexample />
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.DocumentWriters.DocumentWriter" />
      <seealso cref="T:FT.Topics.ProgrammingWithDocumentWriters">Programming with LEADTOOLS Document Writers</seealso>
      <seealso cref="T:Leadtools.Topics.FilesToBeIncludedWithYourApplication">Files to be Included with Your Application</seealso>
      <seealso cref="T:Leadtools.Topics.UnlockingSpecialLEADFeatures">Unlocking Special LEAD Features</seealso>
    </member>
    <member name="P:Leadtools.Forms.DocumentWriters.AltoXmlDocumentOptions.ProcessingStepSettings">
      <summary>Gets or sets the processing step settings for the ALTO document. <a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
      <value>The processing step settings for the ALTO document. Default value is <strong>null</strong>.</value>
      <noremarks />
      <noexample />
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.DocumentWriters.DocumentWriter" />
      <seealso cref="T:FT.Topics.ProgrammingWithDocumentWriters">Programming with LEADTOOLS Document Writers</seealso>
      <seealso cref="T:Leadtools.Topics.FilesToBeIncludedWithYourApplication">Files to be Included with Your Application</seealso>
      <seealso cref="T:Leadtools.Topics.UnlockingSpecialLEADFeatures">Unlocking Special LEAD Features</seealso>
    </member>
    <member name="P:Leadtools.Forms.DocumentWriters.AltoXmlDocumentOptions.SoftwareCreator">
      <summary>Gets or sets the software creator setting for the ALTO document. <a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
      <value>The software creator setting for the ALTO document. Default value is <strong>null</strong>.</value>
      <noremarks />
      <noexample />
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.DocumentWriters.DocumentWriter" />
      <seealso cref="T:FT.Topics.ProgrammingWithDocumentWriters">Programming with LEADTOOLS Document Writers</seealso>
      <seealso cref="T:Leadtools.Topics.FilesToBeIncludedWithYourApplication">Files to be Included with Your Application</seealso>
      <seealso cref="T:Leadtools.Topics.UnlockingSpecialLEADFeatures">Unlocking Special LEAD Features</seealso>
    </member>
    <member name="P:Leadtools.Forms.DocumentWriters.AltoXmlDocumentOptions.SoftwareName">
      <summary>Gets or sets the software name setting for the ALTO document. <a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
      <value>The software name setting for the ALTO document. Default value is <strong>null</strong>.</value>
      <noremarks />
      <noexample />
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.DocumentWriters.DocumentWriter" />
      <seealso cref="T:FT.Topics.ProgrammingWithDocumentWriters">Programming with LEADTOOLS Document Writers</seealso>
      <seealso cref="T:Leadtools.Topics.FilesToBeIncludedWithYourApplication">Files to be Included with Your Application</seealso>
      <seealso cref="T:Leadtools.Topics.UnlockingSpecialLEADFeatures">Unlocking Special LEAD Features</seealso>
    </member>
    <member name="P:Leadtools.Forms.DocumentWriters.AltoXmlDocumentOptions.SoftwareVersion">
      <summary>Gets or sets the software version setting for the ALTO document. <a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
      <value>The software version setting for the ALTO document. Default value is <strong>null</strong>.</value>
      <noremarks />
      <noexample />
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.DocumentWriters.DocumentWriter" />
      <seealso cref="T:FT.Topics.ProgrammingWithDocumentWriters">Programming with LEADTOOLS Document Writers</seealso>
      <seealso cref="T:Leadtools.Topics.FilesToBeIncludedWithYourApplication">Files to be Included with Your Application</seealso>
      <seealso cref="T:Leadtools.Topics.UnlockingSpecialLEADFeatures">Unlocking Special LEAD Features</seealso>
    </member>
    <member name="P:Leadtools.Forms.DocumentWriters.AltoXmlDocumentOptions.ApplicationDescription">
      <summary>Gets or sets the application description setting for the ALTO document. <a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
      <value>The application description setting for the ALTO document. Default value is <strong>null</strong>.</value>
      <noremarks />
      <noexample />
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.DocumentWriters.DocumentWriter" />
      <seealso cref="T:FT.Topics.ProgrammingWithDocumentWriters">Programming with LEADTOOLS Document Writers</seealso>
      <seealso cref="T:Leadtools.Topics.FilesToBeIncludedWithYourApplication">Files to be Included with Your Application</seealso>
      <seealso cref="T:Leadtools.Topics.UnlockingSpecialLEADFeatures">Unlocking Special LEAD Features</seealso>
    </member>
    <member name="P:Leadtools.Forms.DocumentWriters.AltoXmlDocumentOptions.FirstPhysicalPageNumber">
      <summary>Gets or sets the first physical page number setting for the ALTO document. <a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
      <value>The first physical page number setting for the ALTO document. Default value is 1.</value>
      <noremarks />
      <noexample />
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.DocumentWriters.DocumentWriter" />
      <seealso cref="T:FT.Topics.ProgrammingWithDocumentWriters">Programming with LEADTOOLS Document Writers</seealso>
      <seealso cref="T:Leadtools.Topics.FilesToBeIncludedWithYourApplication">Files to be Included with Your Application</seealso>
      <seealso cref="T:Leadtools.Topics.UnlockingSpecialLEADFeatures">Unlocking Special LEAD Features</seealso>
    </member>
    <member name="P:Leadtools.Forms.DocumentWriters.AltoXmlDocumentOptions.Formatted">
      <summary>Gets or sets a value that indicates whether to produce a formatted XML document. <a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
      <value>
        <strong>true</strong> to produce a formatted XML document, otherwise; <strong>false</strong>.</value>
      <remarks>
        <para>
          <see cref="P:Leadtools.Forms.DocumentWriters.AltoXmlDocumentOptions.Indentation" /> specifies the indentation string to use when the value of <see cref="P:Leadtools.Forms.DocumentWriters.AltoXmlDocumentOptions.Formatted" /> is <strong>true</strong>.</para>
      </remarks>
      <noexample />
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.DocumentWriters.DocumentWriter" />
      <seealso cref="T:FT.Topics.ProgrammingWithDocumentWriters">Programming with LEADTOOLS Document Writers</seealso>
    </member>
    <member name="P:Leadtools.Forms.DocumentWriters.AltoXmlDocumentOptions.Indentation">
      <summary>Gets or sets a value the indentation string to use when producing a formatted XML document. <a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
      <value>The indentation string to use when producing a formatted XML document.. Default value is a tab character.</value>
      <remarks>
        <para>
          <see cref="P:Leadtools.Forms.DocumentWriters.AltoXmlDocumentOptions.Indentation" /> specifies the indentation string to use when the value of <see cref="P:Leadtools.Forms.DocumentWriters.AltoXmlDocumentOptions.Formatted" /> is <strong>true</strong>.</para>
      </remarks>
      <noexample />
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.DocumentWriters.DocumentWriter" />
      <seealso cref="T:FT.Topics.ProgrammingWithDocumentWriters">Programming with LEADTOOLS Document Writers</seealso>
      <seealso cref="T:Leadtools.Topics.FilesToBeIncludedWithYourApplication">Files to be Included with Your Application</seealso>
      <seealso cref="T:Leadtools.Topics.UnlockingSpecialLEADFeatures">Unlocking Special LEAD Features</seealso>
    </member>
    <member name="P:Leadtools.Forms.DocumentWriters.AltoXmlDocumentOptions.Format_WinRT">
      <summary>
            This class implementation of <see cref="P:Leadtools.Forms.DocumentWriters.DocumentOptions.Format">DocumentOptions.Format</see>.
            </summary>
      <value>Refer to <see cref="P:Leadtools.Forms.DocumentWriters.DocumentOptions.Format">DocumentOptions.Format</see>.</value>
      <noremarks />
      <noexample />
      <winrt />
    </member>
    <member name="P:Leadtools.Forms.DocumentWriters.AltoXmlDocumentOptions.PageRestriction_WinRT">
      <summary>
            This class implementation of <see cref="P:Leadtools.Forms.DocumentWriters.DocumentOptions.PageRestriction">DocumentOptions.PageRestriction</see>.
            </summary>
      <value>Refer to <see cref="P:Leadtools.Forms.DocumentWriters.DocumentOptions.PageRestriction">DocumentOptions.PageRestriction</see>.</value>
      <noremarks />
      <noexample />
      <winrt />
    </member>
    <member name="P:Leadtools.Forms.DocumentWriters.AltoXmlDocumentOptions.EmptyPageWidth_WinRT">
      <summary>
            This class implementation of <see cref="P:Leadtools.Forms.DocumentWriters.DocumentOptions.EmptyPageWidth">DocumentOptions.EmptyPageWidth</see>.
            </summary>
      <value>Refer to <see cref="P:Leadtools.Forms.DocumentWriters.DocumentOptions.EmptyPageWidth">DocumentOptions.EmptyPageWidth</see>.</value>
      <noremarks />
      <noexample />
      <winrt />
    </member>
    <member name="P:Leadtools.Forms.DocumentWriters.AltoXmlDocumentOptions.EmptyPageHeight_WinRT">
      <summary>
            This class implementation of <see cref="P:Leadtools.Forms.DocumentWriters.DocumentOptions.EmptyPageHeight">DocumentOptions.EmptyPageHeight</see>.
            </summary>
      <value>Refer to <see cref="P:Leadtools.Forms.DocumentWriters.DocumentOptions.EmptyPageHeight">DocumentOptions.EmptyPageHeight</see>.</value>
      <noremarks />
      <noexample />
      <winrt />
    </member>
    <member name="P:Leadtools.Forms.DocumentWriters.AltoXmlDocumentOptions.EmptyPageResolution_WinRT">
      <summary>
            This class implementation of <see cref="P:Leadtools.Forms.DocumentWriters.DocumentOptions.EmptyPageResolution">DocumentOptions.EmptyPageResolution</see>.
            </summary>
      <value>Refer to <see cref="P:Leadtools.Forms.DocumentWriters.DocumentOptions.EmptyPageResolution">DocumentOptions.EmptyPageResolution</see>.</value>
      <noremarks />
      <noexample />
      <winrt />
    </member>
    <member name="P:Leadtools.Forms.DocumentWriters.AltoXmlDocumentOptions.DocumentResolution_WinRT">
      <summary>
            This class implementation of <see cref="P:Leadtools.Forms.DocumentWriters.DocumentOptions.DocumentResolution">DocumentOptions.DocumentResolution</see>.
            </summary>
      <value>Refer to <see cref="P:Leadtools.Forms.DocumentWriters.DocumentOptions.DocumentResolution">DocumentOptions.DocumentResolution</see>.</value>
      <noremarks />
      <noexample />
      <winrt />
    </member>
    <member name="P:Leadtools.Forms.DocumentWriters.AltoXmlDocumentOptions.MaintainAspectRatio_WinRT">
      <summary>
            This class implementation of <see cref="P:Leadtools.Forms.DocumentWriters.DocumentOptions.MaintainAspectRatio">DocumentOptions.MaintainAspectRatio</see>.
            </summary>
      <value>Refer to <see cref="P:Leadtools.Forms.DocumentWriters.DocumentOptions.MaintainAspectRatio">DocumentOptions.MaintainAspectRatio</see>.</value>
      <noremarks />
      <noexample />
      <winrt />
    </member>
    <member name="T:Leadtools.Forms.DocumentWriters.SvgDocumentOptions">
      <summary>Provides extra options to use when saving a document using the Scalable Vector Graphics (SVG) format. <a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
      <remarks>
        <para>The options set in the <see cref="T:Leadtools.Forms.DocumentWriters.SvgDocumentOptions" /> class will be used when the user saves a document using the <see cref="T:Leadtools.Forms.DocumentWriters.DocumentFormat">DocumentFormat.Svg</see> format.</para>
        <para>To change the options used with the SVG format, perform the following steps:
            <list type="number"><item><description>Use the <see cref="M:Leadtools.Forms.DocumentWriters.DocumentWriter.GetOptions(Leadtools.Forms.DocumentWriters.DocumentFormat)">DocumentWriter.GetOptions</see> method of the <see cref="T:Leadtools.Forms.DocumentWriters.DocumentWriter" /> object being used. 
            Pass <see cref="T:Leadtools.Forms.DocumentWriters.DocumentFormat">DocumentFormat.Svg</see> to the <i>format</i> parameter. Note that the resulting object from the
            base <see cref="T:Leadtools.Forms.DocumentWriters.DocumentOptions" /> class needs to be cast to <see cref="T:Leadtools.Forms.DocumentWriters.SvgDocumentOptions" />.</description></item><item><description>Use the various <see cref="T:Leadtools.Forms.DocumentWriters.SvgDocumentOptions" /> properties to change the options.</description></item><item><description>Use <see cref="M:Leadtools.Forms.DocumentWriters.DocumentWriter.SetOptions(Leadtools.Forms.DocumentWriters.DocumentFormat,Leadtools.Forms.DocumentWriters.DocumentOptions)">DocumentWriter.SetOptions</see> to set the new options in the engine.</description></item><item><description>Now you can call the <see cref="M:Leadtools.Forms.DocumentWriters.DocumentWriter.BeginDocument(System.String,Leadtools.Forms.DocumentWriters.DocumentFormat)">DocumentWriter.BeginDocument</see> method (with <see cref="T:Leadtools.Forms.DocumentWriters.DocumentFormat">DocumentFormat.Svg</see> for the
            <i>format</i> parameter) to create a new document and add the pages.</description></item></list></para>
        <para>Note that this format does not support calling <see cref="M:Leadtools.Forms.DocumentWriters.DocumentWriter.InsertPage(Leadtools.Forms.DocumentWriters.DocumentPage,System.Int32)">DocumentWriter.InsertPage</see>.</para>
        <para>Currently, the <see cref="T:Leadtools.Forms.DocumentWriters.SvgDocumentOptions" /> class contains no extra options.</para>
      </remarks>
      <example>
        <p>This example will create a new Scalable Vector Graphics (SVG) file using the various supported options.
            </p>
        <code lang="VB">      Imports Leadtools.Forms.DocumentWriters
      Imports Leadtools
      Imports Leadtools.Codecs

      &lt;TestMethod&gt; _
      Public Sub SvgDocumentOptionsExample()
         Dim inputFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "Leadtools.pdf")
         Dim outputFileNameTemplate As String = Path.Combine(LEAD_VARS.ImagesDir, "Example{0}.svg")
         ' Setup a new RasterCodecs object
         Dim codecs As New RasterCodecs()
         codecs.Options.RasterizeDocument.Load.Resolution = 300

         ' Get the number of pages in the input document
         Dim pageCount As Integer = codecs.GetTotalPages(inputFileName)

         ' Create a new instance of the LEADTOOLS Document Writer
         Dim docWriter As New DocumentWriter()

         ' Change the SVG options
         Dim svgOptions As SvgDocumentOptions = DirectCast(docWriter.GetOptions(DocumentFormat.Svg), SvgDocumentOptions)
         ' SVG currently does not have any extra options
         ' In the future, you can modify the options here if needed
         docWriter.SetOptions(DocumentFormat.Svg, svgOptions)

         ' SVG does not support multiple pages, so we will create the document inside the loop

         ' Loop through all the pages
         For pageNumber As Integer = 1 To pageCount
            Dim outputFileName As String = String.Format(outputFileNameTemplate, pageNumber)

            ' Create a new SVG document
            Console.WriteLine("Creating new SVG document : {0}", outputFileName)
            docWriter.BeginDocument(outputFileName, DocumentFormat.Svg)

            ' Get the page as SVG
            Console.WriteLine("Loading page {0}", pageNumber)
            Dim page As New DocumentSvgPage()
            page.SvgDocument = codecs.LoadSvg(inputFileName, pageNumber, Nothing)

            ' Add the page
            Console.WriteLine("Adding page {0}", pageNumber)
            docWriter.AddPage(page)

            page.SvgDocument.Dispose()

            ' Finish writing theis SVG file on disk
            docWriter.EndDocument()
         Next
         codecs.Dispose()
      End Sub</code>
        <code lang="CS">      using Leadtools.Forms.DocumentWriters;
      using Leadtools;
      using Leadtools.Codecs;

      public void SvgDocumentOptionsExample()
      {
         var inputFileName = Path.Combine(LEAD_VARS.ImagesDir, "Leadtools.pdf");
         var outputFileNameTemplate = Path.Combine(LEAD_VARS.ImagesDir, "Example{0}.svg");
         // Setup a new RasterCodecs object
         var codecs = new RasterCodecs();
         codecs.Options.RasterizeDocument.Load.Resolution = 300;

         // Get the number of pages in the input document
         var pageCount = codecs.GetTotalPages(inputFileName);

         // Create a new instance of the LEADTOOLS Document Writer
         var docWriter = new DocumentWriter();

         // Change the SVG options
         var svgOptions = docWriter.GetOptions(DocumentFormat.Svg) as SvgDocumentOptions;
         // SVG currently does not have any extra options
         // In the future, you can modify the options here if needed
         docWriter.SetOptions(DocumentFormat.Svg, svgOptions);

         // SVG does not support multiple pages, so we will create the document inside the loop

         // Loop through all the pages
         for (var pageNumber = 1; pageNumber &lt;= pageCount; pageNumber++)
         {
            var outputFileName = string.Format(outputFileNameTemplate, pageNumber);

            // Create a new SVG document
            Console.WriteLine("Creating new SVG document : {0}", outputFileName);
            docWriter.BeginDocument(outputFileName, DocumentFormat.Svg);

            // Get the page as SVG
            Console.WriteLine("Loading page {0}", pageNumber);
            var page = new DocumentSvgPage();
            page.SvgDocument = codecs.LoadSvg(inputFileName, pageNumber, null);

            // Add the page
            Console.WriteLine("Adding page {0}", pageNumber);
            docWriter.AddPage(page);

            page.SvgDocument.Dispose();

            // Finish writing theis SVG file on disk
            docWriter.EndDocument();
         }

         codecs.Dispose();
      }</code>
      </example>
      <keywords>SVG|Document Writers,SVG</keywords>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.DocumentWriters.DocumentWriter" />
      <seealso cref="T:FT.Topics.ProgrammingWithDocumentWriters">Programming with LEADTOOLS Document Writers</seealso>
      <seealso cref="T:Leadtools.Topics.FilesToBeIncludedWithYourApplication">Files to be Included with Your Application</seealso>
      <seealso cref="T:Leadtools.Topics.UnlockingSpecialLEADFeatures">Unlocking Special LEAD Features</seealso>
    </member>
    <member name="M:Leadtools.Forms.DocumentWriters.SvgDocumentOptions.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Leadtools.Forms.DocumentWriters.SvgDocumentOptions" /> class. <a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
      <remarks>
        <para>Currently, the <see cref="T:Leadtools.Forms.DocumentWriters.SvgDocumentOptions" /> class contains no extra options.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.DocumentWriters.SvgDocumentOptions" />.</example>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.DocumentWriters.DocumentWriter" />
      <seealso cref="T:FT.Topics.ProgrammingWithDocumentWriters">Programming with LEADTOOLS Document Writers</seealso>
      <seealso cref="T:Leadtools.Topics.FilesToBeIncludedWithYourApplication">Files to be Included with Your Application</seealso>
      <seealso cref="T:Leadtools.Topics.UnlockingSpecialLEADFeatures">Unlocking Special LEAD Features</seealso>
    </member>
    <member name="M:Leadtools.Forms.DocumentWriters.SvgDocumentOptions.Clone">
      <summary>Creates an exact copy of this <see cref="T:Leadtools.Forms.DocumentWriters.DocumentOptions" /><a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
      <returns>The <see cref="T:Leadtools.Forms.DocumentWriters.DocumentOptions" /> this method creates.</returns>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Forms.DocumentWriters.DocumentWriter" />.</example>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.DocumentWriters.DocumentWriter">Document Writers</seealso>
      <seealso cref="T:FT.Topics.ProgrammingWithDocumentWriters">Programming with LEADTOOLS Document Writers</seealso>
      <seealso cref="T:Leadtools.Topics.FilesToBeIncludedWithYourApplication">Files to be Included with Your Application</seealso>
      <seealso cref="T:Leadtools.Topics.UnlockingSpecialLEADFeatures">Unlocking Special LEAD Features</seealso>
    </member>
    <member name="P:Leadtools.Forms.DocumentWriters.SvgDocumentOptions.Format">
      <summary>Gets the document format type associated with this options class. <a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
      <value>This property will always return <see cref="T:Leadtools.Forms.DocumentWriters.DocumentFormat">DocumentFormat.Svg</see>.</value>
      <remarks>
        <para>This property is required internally by LEADTOOLS.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.DocumentWriters.SvgDocumentOptions" />.</example>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.DocumentWriters.DocumentWriter" />
      <seealso cref="T:FT.Topics.ProgrammingWithDocumentWriters">Programming with LEADTOOLS Document Writers</seealso>
      <seealso cref="T:Leadtools.Topics.FilesToBeIncludedWithYourApplication">Files to be Included with Your Application</seealso>
      <seealso cref="T:Leadtools.Topics.UnlockingSpecialLEADFeatures">Unlocking Special LEAD Features</seealso>
    </member>
    <member name="T:Leadtools.Forms.DocumentWriters.PubDocumentOptions">
      <summary>Provides extra options to use when saving a document using the eBooks Format (ePUB). <a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
      <remarks>
        <para>The options set in the <see cref="T:Leadtools.Forms.DocumentWriters.PubDocumentOptions" /> class will be used when the user saves a document using the <see cref="T:Leadtools.Forms.DocumentWriters.DocumentFormat">DocumentFormat.Pub</see> format.</para>
        <para>To change the options used with the PUB format, perform the following steps:
            <list type="number"><item><description>Use the <see cref="M:Leadtools.Forms.DocumentWriters.DocumentWriter.GetOptions(Leadtools.Forms.DocumentWriters.DocumentFormat)">DocumentWriter.GetOptions</see> method of the <see cref="T:Leadtools.Forms.DocumentWriters.DocumentWriter" /> object being used. 
            Passing <see cref="T:Leadtools.Forms.DocumentWriters.DocumentFormat">DocumentFormat.Pub</see> to the <i>format</i> parameter. Note that the resulting object from the base 
            <see cref="T:Leadtools.Forms.DocumentWriters.DocumentOptions" /> class needs to be cast to <see cref="T:Leadtools.Forms.DocumentWriters.PubDocumentOptions" />.</description></item><item><description>Use the various <see cref="T:Leadtools.Forms.DocumentWriters.PubDocumentOptions" /> properties to change the options.</description></item><item><description>Use <see cref="M:Leadtools.Forms.DocumentWriters.DocumentWriter.SetOptions(Leadtools.Forms.DocumentWriters.DocumentFormat,Leadtools.Forms.DocumentWriters.DocumentOptions)">DocumentWriter.SetOptions</see> to set the new options in the engine.</description></item><item><description>Now you can call the <see cref="M:Leadtools.Forms.DocumentWriters.DocumentWriter.BeginDocument(System.String,Leadtools.Forms.DocumentWriters.DocumentFormat)">DocumentWriter.BeginDocument</see> method (again, with <see cref="T:Leadtools.Forms.DocumentWriters.DocumentFormat">DocumentFormat.Pub</see> 
            for the <i>format</i> parameter) to create a new document and add the pages.</description></item></list></para>
        <para>Note that this format does not support calling <see cref="M:Leadtools.Forms.DocumentWriters.DocumentWriter.InsertPage(Leadtools.Forms.DocumentWriters.DocumentPage,System.Int32)">DocumentWriter.InsertPage</see>.</para>
        <para>Currently, the <see cref="T:Leadtools.Forms.DocumentWriters.MobDocumentOptions" /> class contains no extra options.</para>
      </remarks>
      <noexample />
      <keywords>PUB|Document Writers</keywords>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.DocumentWriters.DocumentWriter" />
      <seealso cref="T:FT.Topics.ProgrammingWithDocumentWriters">Programming with LEADTOOLS Document Writers</seealso>
      <seealso cref="T:Leadtools.Topics.FilesToBeIncludedWithYourApplication">Files to be Included with Your Application</seealso>
      <seealso cref="T:Leadtools.Topics.UnlockingSpecialLEADFeatures">Unlocking Special LEAD Features</seealso>
    </member>
    <member name="M:Leadtools.Forms.DocumentWriters.PubDocumentOptions.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Leadtools.Forms.DocumentWriters.PubDocumentOptions" /> class. <a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
      <noremarks />
      <noexample />
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.DocumentWriters.DocumentWriter" />
      <seealso cref="T:FT.Topics.ProgrammingWithDocumentWriters">Programming with LEADTOOLS Document Writers</seealso>
      <seealso cref="T:Leadtools.Topics.FilesToBeIncludedWithYourApplication">Files to be Included with Your Application</seealso>
      <seealso cref="T:Leadtools.Topics.UnlockingSpecialLEADFeatures">Unlocking Special LEAD Features</seealso>
    </member>
    <member name="M:Leadtools.Forms.DocumentWriters.PubDocumentOptions.Clone">
      <summary>Creates an exact copy of this <see cref="T:Leadtools.Forms.DocumentWriters.DocumentOptions" /><a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
      <returns>The <see cref="T:Leadtools.Forms.DocumentWriters.DocumentOptions" /> this method creates.</returns>
      <noremarks />
      <noexample />
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.DocumentWriters.DocumentWriter">Document Writers</seealso>
      <seealso cref="T:FT.Topics.ProgrammingWithDocumentWriters">Programming with LEADTOOLS Document Writers</seealso>
      <seealso cref="T:Leadtools.Topics.FilesToBeIncludedWithYourApplication">Files to be Included with Your Application</seealso>
      <seealso cref="T:Leadtools.Topics.UnlockingSpecialLEADFeatures">Unlocking Special LEAD Features</seealso>
    </member>
    <member name="M:Leadtools.Forms.DocumentWriters.PubDocumentOptions.Clone_WinRT">
      <summary>
            This class implementation of <see cref="T:Leadtools.Forms.DocumentWriters.DocumentOptions" />.
            </summary>
      <returns>Refer to <see cref="M:Leadtools.Forms.DocumentWriters.DocumentOptions.Clone">DocumentOptions.Clone</see>.</returns>
      <noremarks />
      <noexample />
      <winrt />
    </member>
    <member name="P:Leadtools.Forms.DocumentWriters.PubDocumentOptions.Format">
      <summary>Gets the document format type associated with this options class. <a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
      <value>This property will always return <see cref="T:Leadtools.Forms.DocumentWriters.DocumentFormat">DocumentFormat.Pub</see>.</value>
      <remarks>
        <para>This property is required internally by LEADTOOLS.</para>
      </remarks>
      <noexample />
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.DocumentWriters.DocumentWriter" />
      <seealso cref="T:FT.Topics.ProgrammingWithDocumentWriters">Programming with LEADTOOLS Document Writers</seealso>
      <seealso cref="T:Leadtools.Topics.FilesToBeIncludedWithYourApplication">Files to be Included with Your Application</seealso>
      <seealso cref="T:Leadtools.Topics.UnlockingSpecialLEADFeatures">Unlocking Special LEAD Features</seealso>
    </member>
    <member name="P:Leadtools.Forms.DocumentWriters.PubDocumentOptions.Format_WinRT">
      <summary>
            This class implementation of <see cref="P:Leadtools.Forms.DocumentWriters.DocumentOptions.Format">DocumentOptions.Format</see>.
            </summary>
      <value>Refer to <see cref="P:Leadtools.Forms.DocumentWriters.DocumentOptions.Format">DocumentOptions.Format</see>.</value>
      <noremarks />
      <noexample />
      <winrt />
    </member>
    <member name="P:Leadtools.Forms.DocumentWriters.PubDocumentOptions.PageRestriction_WinRT">
      <summary>
            This class implementation of <see cref="P:Leadtools.Forms.DocumentWriters.DocumentOptions.PageRestriction">DocumentOptions.PageRestriction</see>.
            </summary>
      <value>Refer to <see cref="P:Leadtools.Forms.DocumentWriters.DocumentOptions.PageRestriction">DocumentOptions.PageRestriction</see>.</value>
      <noremarks />
      <noexample />
      <winrt />
    </member>
    <member name="P:Leadtools.Forms.DocumentWriters.PubDocumentOptions.EmptyPageWidth_WinRT">
      <summary>
            This class implementation of <see cref="P:Leadtools.Forms.DocumentWriters.DocumentOptions.EmptyPageWidth">DocumentOptions.EmptyPageWidth</see>.
            </summary>
      <value>Refer to <see cref="P:Leadtools.Forms.DocumentWriters.DocumentOptions.EmptyPageWidth">DocumentOptions.EmptyPageWidth</see>.</value>
      <noremarks />
      <noexample />
      <winrt />
    </member>
    <member name="P:Leadtools.Forms.DocumentWriters.PubDocumentOptions.EmptyPageHeight_WinRT">
      <summary>
            This class implementation of <see cref="P:Leadtools.Forms.DocumentWriters.DocumentOptions.EmptyPageHeight">DocumentOptions.EmptyPageHeight</see>.
            </summary>
      <value>Refer to <see cref="P:Leadtools.Forms.DocumentWriters.DocumentOptions.EmptyPageHeight">DocumentOptions.EmptyPageHeight</see>.</value>
      <noremarks />
      <noexample />
      <winrt />
    </member>
    <member name="P:Leadtools.Forms.DocumentWriters.PubDocumentOptions.EmptyPageResolution_WinRT">
      <summary>
            This class implementation of <see cref="P:Leadtools.Forms.DocumentWriters.DocumentOptions.EmptyPageResolution">DocumentOptions.EmptyPageResolution</see>.
            </summary>
      <value>Refer to <see cref="P:Leadtools.Forms.DocumentWriters.DocumentOptions.EmptyPageResolution">DocumentOptions.EmptyPageResolution</see>.</value>
      <noremarks />
      <noexample />
      <winrt />
    </member>
    <member name="P:Leadtools.Forms.DocumentWriters.PubDocumentOptions.DocumentResolution_WinRT">
      <summary>
            This class implementation of <see cref="P:Leadtools.Forms.DocumentWriters.DocumentOptions.DocumentResolution">DocumentOptions.DocumentResolution</see>.
            </summary>
      <value>Refer to <see cref="P:Leadtools.Forms.DocumentWriters.DocumentOptions.DocumentResolution">DocumentOptions.DocumentResolution</see>.</value>
      <noremarks />
      <noexample />
      <winrt />
    </member>
    <member name="P:Leadtools.Forms.DocumentWriters.PubDocumentOptions.MaintainAspectRatio_WinRT">
      <summary>
            This class implementation of <see cref="P:Leadtools.Forms.DocumentWriters.DocumentOptions.MaintainAspectRatio">DocumentOptions.MaintainAspectRatio</see>.
            </summary>
      <value>Refer to <see cref="P:Leadtools.Forms.DocumentWriters.DocumentOptions.MaintainAspectRatio">DocumentOptions.MaintainAspectRatio</see>.</value>
      <noremarks />
      <noexample />
      <winrt />
    </member>
    <member name="T:Leadtools.Forms.DocumentWriters.XlsDocumentOptions">
      <summary>Provides extra options to use when saving a document using the Microsoft Excel 2003 format (XLS). <a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
      <remarks>
        <para>The options set in the <see cref="T:Leadtools.Forms.DocumentWriters.XlsDocumentOptions" /> class will be used when the user saves a document using the <see cref="T:Leadtools.Forms.DocumentWriters.DocumentFormat">DocumentFormat.Xls</see> format.</para>
        <para>To change the options used with the XLS format, perform the following steps:
            <list type="number"><item><description>Use the <see cref="M:Leadtools.Forms.DocumentWriters.DocumentWriter.GetOptions(Leadtools.Forms.DocumentWriters.DocumentFormat)">DocumentWriter.GetOptions</see> method of the <see cref="T:Leadtools.Forms.DocumentWriters.DocumentWriter" /> object being used, 
            passing <see cref="T:Leadtools.Forms.DocumentWriters.DocumentFormat">DocumentFormat.Xls</see> to the <i>format</i> parameter. Note the resulting object from the
            base <see cref="T:Leadtools.Forms.DocumentWriters.DocumentOptions" /> class needs to be cast to <see cref="T:Leadtools.Forms.DocumentWriters.XlsDocumentOptions" />.</description></item><item><description>Use the various <see cref="T:Leadtools.Forms.DocumentWriters.XlsDocumentOptions" /> properties to change the options.</description></item><item><description>Use <see cref="M:Leadtools.Forms.DocumentWriters.DocumentWriter.SetOptions(Leadtools.Forms.DocumentWriters.DocumentFormat,Leadtools.Forms.DocumentWriters.DocumentOptions)">DocumentWriter.SetOptions</see> to set the new options in the engine.</description></item><item><description>Now call the <see cref="M:Leadtools.Forms.DocumentWriters.DocumentWriter.BeginDocument(System.String,Leadtools.Forms.DocumentWriters.DocumentFormat)">DocumentWriter.BeginDocument</see> method (with <see cref="T:Leadtools.Forms.DocumentWriters.DocumentFormat">DocumentFormat.Xls</see> for the
            <i>format</i> parameter) to create a new document and add the pages.</description></item></list></para>
        <para>Currently, the <see cref="T:Leadtools.Forms.DocumentWriters.XlsDocumentOptions" /> class contains no extra options.</para>
      </remarks>
      <example>
        <p>This example will create a new Windows Enhanced Meta File (EMF) file using the various supported options.
            </p>
        <code lang="VB">      Imports Leadtools.Forms.DocumentWriters
      Imports Leadtools
      Imports Leadtools.Codecs

      &lt;TestMethod&gt; _
      Public Sub XlsDocumentOptionsExample()
         Dim inputFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "Leadtools.pdf")
         Dim outputFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "Example.xls")
         ' Setup a new RasterCodecs object
         Dim codecs As New RasterCodecs()
         codecs.Options.RasterizeDocument.Load.Resolution = 300

         ' Get the number of pages in the input document
         Dim pageCount As Integer = codecs.GetTotalPages(inputFileName)

         ' Create a new instance of the LEADTOOLS Document Writer
         Dim docWriter As New DocumentWriter()

         ' Change the XLS options
         Dim xlsOptions As XlsDocumentOptions = DirectCast(docWriter.GetOptions(DocumentFormat.Xls), XlsDocumentOptions)
         ' XLS currently does not have any extra options
         ' In the future, you can modify the options here if needed
         docWriter.SetOptions(DocumentFormat.Xls, xlsOptions)

         ' Create a new XLS document
         Console.WriteLine("Creating new XLS document: {0}", outputFileName)
         docWriter.BeginDocument(outputFileName, DocumentFormat.Xls)

         ' Loop through all the pages
         For pageNumber As Integer = 1 To pageCount
            ' Get the page as SVG
            Console.WriteLine("Loading page {0}", pageNumber)
            Dim page As New DocumentSvgPage()
            page.SvgDocument = codecs.LoadSvg(inputFileName, pageNumber, Nothing)

            ' Add the page
            Console.WriteLine("Adding page {0}", pageNumber)
            docWriter.AddPage(page)

            page.SvgDocument.Dispose()
         Next

         ' Finally finish writing the XLS file on disk
         docWriter.EndDocument()
         codecs.Dispose()
      End Sub</code>
        <code lang="CS">      using Leadtools.Forms.DocumentWriters;
      using Leadtools;
      using Leadtools.Codecs;

      public void XlsDocumentOptionsExample()
      {
         var inputFileName = Path.Combine(LEAD_VARS.ImagesDir, "Leadtools.pdf");
         var outputFileName = Path.Combine(LEAD_VARS.ImagesDir, "Example.xls");
         // Setup a new RasterCodecs object
         var codecs = new RasterCodecs();
         codecs.Options.RasterizeDocument.Load.Resolution = 300;

         // Get the number of pages in the input document
         var pageCount = codecs.GetTotalPages(inputFileName);

         // Create a new instance of the LEADTOOLS Document Writer
         var docWriter = new DocumentWriter();

         // Change the XLS options
         var xlsOptions = docWriter.GetOptions(DocumentFormat.Xls) as XlsDocumentOptions;
         // XLS currently does not have any extra options
         // In the future, you can modify the options here if needed
         docWriter.SetOptions(DocumentFormat.Xls, xlsOptions);

         // Create a new XLS document
         Console.WriteLine("Creating new XLS document: {0}", outputFileName);
         docWriter.BeginDocument(outputFileName, DocumentFormat.Xls);

         // Loop through all the pages
         for (var pageNumber = 1; pageNumber &lt;= pageCount; pageNumber++)
         {
            // Get the page as SVG
            Console.WriteLine("Loading page {0}", pageNumber);
            var page = new DocumentSvgPage();
            page.SvgDocument = codecs.LoadSvg(inputFileName, pageNumber, null);

            // Add the page
            Console.WriteLine("Adding page {0}", pageNumber);
            docWriter.AddPage(page);

            page.SvgDocument.Dispose();
         }

         // Finally finish writing the XLS file on disk
         docWriter.EndDocument();
         codecs.Dispose();
      }</code>
      </example>
      <keywords>XLS|Excel|Document Writers,Xls</keywords>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.DocumentWriters.DocumentWriter" />
      <seealso cref="T:FT.Topics.ProgrammingWithDocumentWriters">Programming with LEADTOOLS Document Writers</seealso>
      <seealso cref="T:Leadtools.Topics.FilesToBeIncludedWithYourApplication">Files to be Included with Your Application</seealso>
      <seealso cref="T:Leadtools.Topics.UnlockingSpecialLEADFeatures">Unlocking Special LEAD Features</seealso>
    </member>
    <member name="M:Leadtools.Forms.DocumentWriters.XlsDocumentOptions.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Leadtools.Forms.DocumentWriters.XlsDocumentOptions" /> class. <a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
      <remarks>
        <para>Currently, the <see cref="T:Leadtools.Forms.DocumentWriters.XlsDocumentOptions" /> class contains no extra options.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.DocumentWriters.XlsDocumentOptions" />.</example>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.DocumentWriters.DocumentWriter" />
      <seealso cref="T:FT.Topics.ProgrammingWithDocumentWriters">Programming with LEADTOOLS Document Writers</seealso>
      <seealso cref="T:Leadtools.Topics.FilesToBeIncludedWithYourApplication">Files to be Included with Your Application</seealso>
      <seealso cref="T:Leadtools.Topics.UnlockingSpecialLEADFeatures">Unlocking Special LEAD Features</seealso>
    </member>
    <member name="M:Leadtools.Forms.DocumentWriters.XlsDocumentOptions.Clone">
      <summary>Creates an exact copy of this <see cref="T:Leadtools.Forms.DocumentWriters.DocumentOptions" />. <a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
      <returns>The <see cref="T:Leadtools.Forms.DocumentWriters.DocumentOptions" /> this method creates.</returns>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Forms.DocumentWriters.DocumentWriter" />.</example>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.DocumentWriters.DocumentWriter">Document Writers</seealso>
      <seealso cref="T:FT.Topics.ProgrammingWithDocumentWriters">Programming with LEADTOOLS Document Writers</seealso>
      <seealso cref="T:Leadtools.Topics.FilesToBeIncludedWithYourApplication">Files to be Included with Your Application</seealso>
      <seealso cref="T:Leadtools.Topics.UnlockingSpecialLEADFeatures">Unlocking Special LEAD Features</seealso>
    </member>
    <member name="P:Leadtools.Forms.DocumentWriters.XlsDocumentOptions.Format">
      <summary>Gets the document format type associated with this options class. <a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
      <value>This property will always return <see cref="T:Leadtools.Forms.DocumentWriters.DocumentFormat">DocumentFormat.Xls</see>.</value>
      <remarks>
        <para>This property is required internally by LEADTOOLS.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.DocumentWriters.XlsDocumentOptions" />.</example>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.DocumentWriters.DocumentWriter" />
      <seealso cref="T:FT.Topics.ProgrammingWithDocumentWriters">Programming with LEADTOOLS Document Writers</seealso>
      <seealso cref="T:Leadtools.Topics.FilesToBeIncludedWithYourApplication">Files to be Included with Your Application</seealso>
      <seealso cref="T:Leadtools.Topics.UnlockingSpecialLEADFeatures">Unlocking Special LEAD Features</seealso>
    </member>
    <member name="T:Leadtools.Forms.DocumentWriters.DocDocumentOptions">
      <summary>Provides extra options to use when saving a document using the Microsoft Word 2003 document format (DOC) format. <a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
      <keywords>OCR, DOC |OCR, DOCX|Recognize, DOC|DOC | DOC|Word|Microsoft Word|Document Writers,DOC|Document Writers,Word</keywords>
      <remarks>
        <para>The options set in the <see cref="T:Leadtools.Forms.DocumentWriters.DocDocumentOptions" /> class will be used when the user saves a document using the 
            <see cref="T:Leadtools.Forms.DocumentWriters.DocumentFormat">DocumentFormat.Doc</see> format.</para>
        <para>To change the options used with the DOC format, perform the following steps:
            <list type="number"><item><description>Use the <see cref="M:Leadtools.Forms.DocumentWriters.DocumentWriter.GetOptions(Leadtools.Forms.DocumentWriters.DocumentFormat)">DocumentWriter.GetOptions</see> method of the 
              <see cref="T:Leadtools.Forms.DocumentWriters.DocumentWriter" /> object being used. 
            Passing <see cref="T:Leadtools.Forms.DocumentWriters.DocumentFormat">DocumentFormat.Doc</see> to the <i>format</i> parameter. Note that the resulting object from the
            base <see cref="T:Leadtools.Forms.DocumentWriters.DocumentOptions" /> class needs to be cast to <see cref="T:Leadtools.Forms.DocumentWriters.DocDocumentOptions" />.</description></item><item><description>Use the various <see cref="T:Leadtools.Forms.DocumentWriters.DocDocumentOptions" /> properties to change the options.</description></item><item><description>Use <see cref="M:Leadtools.Forms.DocumentWriters.DocumentWriter.SetOptions(Leadtools.Forms.DocumentWriters.DocumentFormat,Leadtools.Forms.DocumentWriters.DocumentOptions)">DocumentWriter.SetOptions</see> to set the new options in the engine.</description></item><item><description>Now you can call the <see cref="M:Leadtools.Forms.DocumentWriters.DocumentWriter.BeginDocument(System.String,Leadtools.Forms.DocumentWriters.DocumentFormat)">DocumentWriter.BeginDocument</see> method 
              (with <see cref="T:Leadtools.Forms.DocumentWriters.DocumentFormat">DocumentFormat.Doc</see> for the
            <i>format</i> parameter) to create a new document and add the pages.</description></item></list></para>
        <para>The <see cref="T:Leadtools.Forms.DocumentWriters.DocDocumentOptions" /> class contains the following properties:
            <list type="table"><listheader><term>Property</term><description>Description</description></listheader><item><term><see cref="P:Leadtools.Forms.DocumentWriters.DocDocumentOptions.TextMode">DocDocumentOptions.TextMode</see></term><description>Controls how and when to frames the text blocks in the resulting DOC file.</description></item></list></para>
        <para>Note that this format does not support calling <see cref="M:Leadtools.Forms.DocumentWriters.DocumentWriter.InsertPage(Leadtools.Forms.DocumentWriters.DocumentPage,System.Int32)">DocumentWriter.InsertPage</see>.</para>
      </remarks>
      <example>
        <p>
          <para>This example will create a new Microsoft Word 2003 document (DOC) file using some of the supported options.</para>
        </p>
        <code lang="VB">      Imports Leadtools.Forms.DocumentWriters
      Imports Leadtools
      Imports Leadtools.Codecs

      &lt;TestMethod&gt; _
      Public Sub DocDocumentOptionsExample()
         Dim inputFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "Leadtools.pdf")
         Dim outputFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "Example.doc")
         ' Setup a new RasterCodecs object
         Dim codecs As New RasterCodecs()
         codecs.Options.RasterizeDocument.Load.Resolution = 300

         ' Get the number of pages in the input document
         Dim pageCount As Integer = codecs.GetTotalPages(inputFileName)

         ' Create a new instance of the LEADTOOLS Document Writer
         Dim docWriter As New DocumentWriter()

         ' Change the DOC options to add frames to the file
         Dim docOptions As DocDocumentOptions = DirectCast(docWriter.GetOptions(DocumentFormat.Doc), DocDocumentOptions)
         docOptions.TextMode = DocumentTextMode.Framed
         docWriter.SetOptions(DocumentFormat.Doc, docOptions)

         ' Create a new DOC document
         Console.WriteLine("Creating new DOC document: {0}", outputFileName)
         docWriter.BeginDocument(outputFileName, DocumentFormat.Doc)

         ' Loop through all the pages
         For pageNumber As Integer = 1 To pageCount
            ' Get the page as SVG
            Console.WriteLine("Loading page {0}", pageNumber)
            Dim page As New DocumentSvgPage()
            page.SvgDocument = codecs.LoadSvg(inputFileName, pageNumber, Nothing)

            ' Add the page
            Console.WriteLine("Adding page {0}", pageNumber)
            docWriter.AddPage(page)

            page.SvgDocument.Dispose()
         Next

         ' Finally finish writing the DOC file on disk
         docWriter.EndDocument()
         codecs.Dispose()
      End Sub</code>
        <code lang="CS">      using Leadtools.Forms.DocumentWriters;
      using Leadtools;
      using Leadtools.Codecs;

      public void DocDocumentOptionsExample()
      {
         var inputFileName = Path.Combine(LEAD_VARS.ImagesDir, "Leadtools.pdf");
         var outputFileName = Path.Combine(LEAD_VARS.ImagesDir, "Example.doc");
         // Setup a new RasterCodecs object
         var codecs = new RasterCodecs();
         codecs.Options.RasterizeDocument.Load.Resolution = 300;

         // Get the number of pages in the input document
         var pageCount = codecs.GetTotalPages(inputFileName);

         // Create a new instance of the LEADTOOLS Document Writer
         var docWriter = new DocumentWriter();

         // Change the DOC options to add frames to the file
         var docOptions = docWriter.GetOptions(DocumentFormat.Doc) as DocDocumentOptions;
         docOptions.TextMode = DocumentTextMode.Framed;
         docWriter.SetOptions(DocumentFormat.Doc, docOptions);

         // Create a new DOC document
         Console.WriteLine("Creating new DOC document: {0}", outputFileName);
         docWriter.BeginDocument(outputFileName, DocumentFormat.Doc);

         // Loop through all the pages
         for (var pageNumber = 1; pageNumber &lt;= pageCount; pageNumber++)
         {
            // Get the page as SVG
            Console.WriteLine("Loading page {0}", pageNumber);
            var page = new DocumentSvgPage();
            page.SvgDocument = codecs.LoadSvg(inputFileName, pageNumber, null);

            // Add the page
            Console.WriteLine("Adding page {0}", pageNumber);
            docWriter.AddPage(page);

            page.SvgDocument.Dispose();
         }

         // Finally finish writing the DOC file on disk
         docWriter.EndDocument();
         codecs.Dispose();
      }</code>
      </example>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.DocumentWriters.DocumentWriter" />
      <seealso cref="T:FT.Topics.ProgrammingWithDocumentWriters">Programming with LEADTOOLS Document Writers</seealso>
      <seealso cref="T:Leadtools.Topics.FilesToBeIncludedWithYourApplication">Files to be Included with Your Application</seealso>
      <seealso cref="T:Leadtools.Topics.UnlockingSpecialLEADFeatures">Unlocking Special LEAD Features</seealso>
    </member>
    <member name="M:Leadtools.Forms.DocumentWriters.DocDocumentOptions.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Leadtools.Forms.DocumentWriters.DocDocumentOptions" /> class. <a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
      <remarks>
        <para>The following table lists the default values of the <see cref="T:Leadtools.Forms.DocumentWriters.DocDocumentOptions" /> properties:
            <list type="table"><listheader><term>Property</term><description>Value</description></listheader><item><term>TextMode</term><description><see cref="T:Leadtools.Forms.DocumentWriters.DocumentTextMode">DocumentTextMode.Auto</see></description></item></list></para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.DocumentWriters.DocDocumentOptions" />.</example>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.DocumentWriters.DocumentWriter" />
      <seealso cref="T:FT.Topics.ProgrammingWithDocumentWriters">Programming with LEADTOOLS Document Writers</seealso>
      <seealso cref="T:Leadtools.Topics.FilesToBeIncludedWithYourApplication">Files to be Included with Your Application</seealso>
      <seealso cref="T:Leadtools.Topics.UnlockingSpecialLEADFeatures">Unlocking Special LEAD Features</seealso>
    </member>
    <member name="M:Leadtools.Forms.DocumentWriters.DocDocumentOptions.Clone">
      <summary>Creates an exact copy of this <see cref="T:Leadtools.Forms.DocumentWriters.DocumentOptions" /><a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
      <returns>The <see cref="T:Leadtools.Forms.DocumentWriters.DocumentOptions" /> this method creates.</returns>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Forms.DocumentWriters.DocumentWriter" />.</example>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.DocumentWriters.DocumentWriter" />
      <seealso cref="T:FT.Topics.ProgrammingWithDocumentWriters">Programming with LEADTOOLS Document Writers</seealso>
      <seealso cref="T:FT.Topics.ProgrammingWithDocumentWriters">Files to be Included with Your Application</seealso>
      <seealso cref="T:Leadtools.Topics.UnlockingSpecialLEADFeatures">Unlocking Special LEAD Features</seealso>
    </member>
    <member name="P:Leadtools.Forms.DocumentWriters.DocDocumentOptions.Format">
      <summary>Gets the document format type associated with this options class. <a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
      <value>This property will always return <see cref="T:Leadtools.Forms.DocumentWriters.DocumentFormat">DocumentFormat.Doc</see>.</value>
      <remarks>
        <para>This property is required internally by LEADTOOLS.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.DocumentWriters.DocDocumentOptions" />.</example>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.DocumentWriters.DocumentWriter" />
      <seealso cref="T:FT.Topics.ProgrammingWithDocumentWriters">Programming with LEADTOOLS Document Writers</seealso>
      <seealso cref="T:Leadtools.Topics.FilesToBeIncludedWithYourApplication" />
      <seealso cref="T:Leadtools.Topics.UnlockingSpecialLEADFeatures">Unlocking Special LEAD Features</seealso>
    </member>
    <member name="P:Leadtools.Forms.DocumentWriters.DocDocumentOptions.TextMode">
      <summary>Gets or sets a value that controls how and when to frames the text blocks in the resulting DOC file. <a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
      <value>Controls how and when to frames the text blocks in the resulting DOC file. Default value is <see cref="T:Leadtools.Forms.DocumentWriters.DocumentTextMode">DocumentTextMode.Auto</see>.</value>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Forms.DocumentWriters.DocDocumentOptions" />.</example>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.DocumentWriters.DocumentWriter" />
      <seealso cref="T:FT.Topics.ProgrammingWithDocumentWriters">Programming with LEADTOOLS Document Writers</seealso>
      <seealso cref="T:Leadtools.Topics.FilesToBeIncludedWithYourApplication">Files to be Included with Your Application</seealso>
      <seealso cref="T:Leadtools.Topics.UnlockingSpecialLEADFeatures">Unlocking Special LEAD Features</seealso>
    </member>
    <member name="T:Leadtools.Forms.DocumentWriters.DocumentWriter">
      <summary>Support for creating document files such as PDF, XPS, DOC, HTML, RTF, or Text from Scalable Vector Graphics (SVG), Windows Enhanced Meta Files (EMF) or raster images. <a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="WinRTicon.png" class="WinRTIconTag" name="WinRTIconTag" title="WinRT support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="winrtphone.png" class="WinRTPhoneIconTag" name="WinRTPhoneIconTag" title="WinRT Phone support" border="0" /></a></summary>
      <remarks>
        <para>The <see cref="T:Leadtools.Forms.DocumentWriters.DocumentWriter" /> class is used to create multi-page and searchable documents from one or more SVG, EMF or raster image based pages. Refer
            to <see cref="T:FT.Topics.ProgrammingWithDocumentWriters">LEADTOOLS Document Writers</see> for more
            information.</para>
        <para>Support for various popular formats is included, such as PDF, DOC/DOCX, HTML, RTF, XPS or Text. For a list of all the document formats supported, refer to the
            <see cref="T:Leadtools.Forms.DocumentWriters.DocumentFormat" /> enumeration.</para>
      </remarks>
      <example>
        <p>
          <para>This example shows how to create document file from SVG-based pages using basic functionality of the <see cref="T:Leadtools.Forms.DocumentWriters.DocumentWriter" /> class.
            For an example on creating documents from EMF objects, refer to <see cref="T:Leadtools.Forms.DocumentWriters.DocumentEmfPage" /> and for an example on creating mixed documents
            from SVG, EMF and empty pages, refer to <see cref="T:Leadtools.Forms.DocumentWriters.DocumentRasterPage" />.</para>
        </p>
        <code lang="VB">      Imports Leadtools
      Imports Leadtools.Codecs
      Imports Leadtools.Forms.DocumentWriters
      Imports Leadtools.Forms.Ocr

      &lt;TestMethod&gt; _
      Public Sub DocumentWriterExample()
         Dim inputFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "Leadtools.docx")
         Dim outputFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "Example.pdf")
         ' Setup a new RasterCodecs object
         Dim codecs As New RasterCodecs()
         codecs.Options.RasterizeDocument.Load.Resolution = 300

         ' Get the number of pages in the input document
         Dim pageCount As Integer = codecs.GetTotalPages(inputFileName)

         ' Create a new instance of the LEADTOOLS Document Writer
         Dim docWriter As New DocumentWriter()

         ' Change the PDF options
         Dim pdfOptions As PdfDocumentOptions = DirectCast(docWriter.GetOptions(DocumentFormat.Pdf), PdfDocumentOptions)
         pdfOptions.DocumentType = PdfDocumentType.PdfA
         docWriter.SetOptions(DocumentFormat.Pdf, pdfOptions)

         ' Create a new PDF document
         Console.WriteLine("Creating new PDF document: {0}", outputFileName)
         docWriter.BeginDocument(outputFileName, DocumentFormat.Pdf)

         ' Loop through all the pages
         For pageNumber As Integer = 1 To pageCount
            ' Get the page as SVG
            Console.WriteLine("Loading page {0}", pageNumber)
            Dim page As New DocumentSvgPage()
            page.SvgDocument = codecs.LoadSvg(inputFileName, pageNumber, Nothing)

            ' Add the page
            Console.WriteLine("Adding page {0}", pageNumber)
            docWriter.AddPage(page)

            page.SvgDocument.Dispose()
         Next

         ' Finally finish writing the PDF file on disk
         docWriter.EndDocument()
         codecs.Dispose()
      End Sub</code>
        <code lang="CS">      using Leadtools;
      using Leadtools.Codecs;
      using Leadtools.Forms.DocumentWriters;
      using Leadtools.Forms.Ocr;

      public void DocumentWriterExample()
      {
         var inputFileName = Path.Combine(LEAD_VARS.ImagesDir, "Leadtools.docx");
         var outputFileName = Path.Combine(LEAD_VARS.ImagesDir, "Example.pdf");
         // Setup a new RasterCodecs object
         var codecs = new RasterCodecs();
         codecs.Options.RasterizeDocument.Load.Resolution = 300;

         // Get the number of pages in the input document
         var pageCount = codecs.GetTotalPages(inputFileName);

         // Create a new instance of the LEADTOOLS Document Writer
         var docWriter = new DocumentWriter();

         // Change the PDF options
         var pdfOptions = docWriter.GetOptions(DocumentFormat.Pdf) as PdfDocumentOptions;
         pdfOptions.DocumentType = PdfDocumentType.PdfA;
         docWriter.SetOptions(DocumentFormat.Pdf, pdfOptions);

         // Create a new PDF document
         Console.WriteLine("Creating new PDF document: {0}", outputFileName);
         docWriter.BeginDocument(outputFileName, DocumentFormat.Pdf);

         // Loop through all the pages
         for (var pageNumber = 1; pageNumber &lt;= pageCount; pageNumber++)
         {
            // Get the page as SVG
            Console.WriteLine("Loading page {0}", pageNumber);
            var page = new DocumentSvgPage();
            page.SvgDocument = codecs.LoadSvg(inputFileName, pageNumber, null);

            // Add the page
            Console.WriteLine("Adding page {0}", pageNumber);
            docWriter.AddPage(page);

            page.SvgDocument.Dispose();
         }

         // Finally finish writing the PDF file on disk
         docWriter.EndDocument();
         codecs.Dispose();
      }</code>
      </example>
      <keywords>PDF|PDF/A|XPS|Text|Word|Microsoft Word|RTF|HTML|HTM|SVG|EMF|TXT|DOC|Document Writers,PDF|Document Writers,PDF/A|Document Writers,XPS|Document Writers,Text|Document Writers,DOC|Document Writers,Word|Document Writers,RTF|Document Writers,EMF|Document Writers,SVG|Document Writers,HTML</keywords>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.DocumentWriters.DocumentPage" />
      <seealso cref="T:Leadtools.Forms.DocumentWriters.DocumentFormat" />
      <seealso cref="T:FT.Topics.ProgrammingWithDocumentWriters">Programming with LEADTOOLS Document Writers</seealso>
      <seealso cref="T:Leadtools.Topics.FilesToBeIncludedWithYourApplication">Files to be Included with Your Application</seealso>
      <seealso cref="T:Leadtools.Topics.UnlockingSpecialLEADFeatures">Unlocking Special LEAD Features</seealso>
    </member>
    <member name="M:Leadtools.Forms.DocumentWriters.DocumentWriter.GetSupportedFormats">
      <summary>Gets an array containing the supported formats. <a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="WinRTicon.png" class="WinRTIconTag" name="WinRTIconTag" title="WinRT support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="winrtphone.png" class="WinRTPhoneIconTag" name="WinRTPhoneIconTag" title="WinRT Phone support" border="0" /></a></summary>
      <returns>An array containing the supported formats.</returns>
      <remarks>
        <para>Note: Not all formats are supported in the .NET and Windows Runtime. Use this method to find the current level of support.</para>
      </remarks>
      <noexample />
    </member>
    <member name="M:Leadtools.Forms.DocumentWriters.DocumentWriter.GetFormatFileExtension(Leadtools.Forms.DocumentWriters.DocumentFormat)">
      <summary>Gets the default file extension for the specified document format. <a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="WinRTicon.png" class="WinRTIconTag" name="WinRTIconTag" title="WinRT support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="winrtphone.png" class="WinRTPhoneIconTag" name="WinRTPhoneIconTag" title="WinRT Phone support" border="0" /></a></summary>
      <param name="format">The document format requested.</param>
      <returns>A <see cref="T:System.String" /> containing the file extension for the specified format (without the ".").</returns>
      <remarks>
        <para>This method will return the default file extension commonly used with file of types <paramref name="format" />. For example, Adobe PDF files commonly have "pdf" extensions,
            Microsoft Word 2003 documents commonly have "doc" extensions and so forth.</para>
        <para>For more information on the various document formats supported by the LEADTOOLS Document Writers, refer to <see cref="T:Leadtools.Forms.DocumentWriters.DocumentFormat" />.</para>
        <para>To get a friendly name for a particular document format use <see cref="M:Leadtools.Forms.DocumentWriters.DocumentWriter.GetFormatFriendlyName(Leadtools.Forms.DocumentWriters.DocumentFormat)" />.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.DocumentWriters.DocumentWriter" />.</example>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.DocumentWriters.DocumentPage" />
      <seealso cref="T:Leadtools.Forms.DocumentWriters.DocumentFormat" />
      <seealso cref="T:FT.Topics.ProgrammingWithDocumentWriters">Programming with LEADTOOLS Document Writers</seealso>
      <seealso cref="T:Leadtools.Topics.FilesToBeIncludedWithYourApplication">Files to be Included with Your Application</seealso>
      <seealso cref="T:Leadtools.Topics.UnlockingSpecialLEADFeatures">Unlocking Special LEAD Features</seealso>
    </member>
    <member name="M:Leadtools.Forms.DocumentWriters.DocumentWriter.GetFormatFriendlyName(Leadtools.Forms.DocumentWriters.DocumentFormat)">
      <summary>Gets the friendly name of the specified document format. <a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="WinRTicon.png" class="WinRTIconTag" name="WinRTIconTag" title="WinRT support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="winrtphone.png" class="WinRTPhoneIconTag" name="WinRTPhoneIconTag" title="WinRT Phone support" border="0" /></a></summary>
      <param name="format">The document format requested.</param>
      <returns>A <see cref="T:System.String" /> containing the friendly name for the specified format.</returns>
      <remarks>
        <para>This method will return a friendly name used for <paramref name="format" />. For example, Adobe PDF files will return a string similar to "Adobe PDF" and 
            Microsoft Word 2003 documents will return "Microsoft Word" and so forth. You can use this value in your application when presenting the user with a list to select a format to save
            the documents.</para>
        <para>For more information on the various document formats supported by the LEADTOOLS Document Writers, refer to <see cref="T:Leadtools.Forms.DocumentWriters.DocumentFormat" />.</para>
        <para>To get the file extension for a particular document format, use <see cref="M:Leadtools.Forms.DocumentWriters.DocumentWriter.GetFormatFileExtension(Leadtools.Forms.DocumentWriters.DocumentFormat)" />.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.DocumentWriters.DocumentWriter" />.</example>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.DocumentWriters.DocumentPage" />
      <seealso cref="T:Leadtools.Forms.DocumentWriters.DocumentFormat" />
      <seealso cref="T:FT.Topics.ProgrammingWithDocumentWriters">Programming with LEADTOOLS Document Writers</seealso>
      <seealso cref="T:Leadtools.Topics.FilesToBeIncludedWithYourApplication">Files to be Included with Your Application</seealso>
      <seealso cref="T:Leadtools.Topics.UnlockingSpecialLEADFeatures">Unlocking Special LEAD Features</seealso>
    </member>
    <member name="M:Leadtools.Forms.DocumentWriters.DocumentWriter.#ctor">
      <summary>Creates a new instance of the <see cref="T:Leadtools.Forms.DocumentWriters.DocumentWriter" /> class. <a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
      <remarks>
        <para>Refer to <see cref="T:Leadtools.Forms.DocumentWriters.DocumentWriter" /> class on more information on how to use the LEADTOOLS Document Writers.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.DocumentWriters.DocumentWriter" />.</example>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.DocumentWriters.DocumentPage" />
      <seealso cref="T:Leadtools.Forms.DocumentWriters.DocumentFormat" />
      <seealso cref="T:FT.Topics.ProgrammingWithDocumentWriters">Programming with LEADTOOLS Document Writers</seealso>
      <seealso cref="T:Leadtools.Topics.FilesToBeIncludedWithYourApplication">Files to be Included with Your Application</seealso>
      <seealso cref="T:Leadtools.Topics.UnlockingSpecialLEADFeatures">Unlocking Special LEAD Features</seealso>
    </member>
    <member name="M:Leadtools.Forms.DocumentWriters.DocumentWriter.GetOptions(Leadtools.Forms.DocumentWriters.DocumentFormat)">
      <summary>Gets the extra options to use when saving a document using the specified format. <a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="WinRTicon.png" class="WinRTIconTag" name="WinRTIconTag" title="WinRT support" border="0" /></a></summary>
      <param name="format">The document format.</param>
      <returns>The document options for this format. Note that the returned object from the base <see cref="T:Leadtools.Forms.DocumentWriters.DocumentOptions" /> class needs to be cast to
            one of the derived classes based on <paramref name="format" />.</returns>
      <remarks>
        <para>You cannot use the <see cref="T:Leadtools.Forms.DocumentWriters.DocumentOptions" /> class directly. Instead, use one of the derived classes to get and set the options associated with a document format. The
            following table lists the document formats and the <see cref="T:Leadtools.Forms.DocumentWriters.DocumentOptions" /> derived class associated with it:
            <table><tr><th>Format (the value of <paramref name="format" />)</th><th>Class</th></tr><tr><td><see cref="T:Leadtools.Forms.DocumentWriters.DocumentFormat">DocumentFormat.Ltd</see></td><td><see cref="T:Leadtools.Forms.DocumentWriters.LtdDocumentOptions" /></td></tr><tr><td><see cref="T:Leadtools.Forms.DocumentWriters.DocumentFormat">DocumentFormat.Pdf</see></td><td><see cref="T:Leadtools.Forms.DocumentWriters.PdfDocumentOptions" /></td></tr><tr><td><see cref="T:Leadtools.Forms.DocumentWriters.DocumentFormat">DocumentFormat.Doc</see></td><td><see cref="T:Leadtools.Forms.DocumentWriters.DocDocumentOptions" /></td></tr><tr><td><see cref="T:Leadtools.Forms.DocumentWriters.DocumentFormat">DocumentFormat.Rtf</see></td><td><see cref="T:Leadtools.Forms.DocumentWriters.RtfDocumentOptions" /></td></tr><tr><td><see cref="T:Leadtools.Forms.DocumentWriters.DocumentFormat">DocumentFormat.Text</see></td><td><see cref="T:Leadtools.Forms.DocumentWriters.TextDocumentOptions" /></td></tr><tr><td><see cref="T:Leadtools.Forms.DocumentWriters.DocumentFormat">DocumentFormat.Html</see></td><td><see cref="T:Leadtools.Forms.DocumentWriters.HtmlDocumentOptions" /></td></tr><tr><td><see cref="T:Leadtools.Forms.DocumentWriters.DocumentFormat">DocumentFormat.Emf</see></td><td><see cref="T:Leadtools.Forms.DocumentWriters.EmfDocumentOptions" /></td></tr><tr><td><see cref="T:Leadtools.Forms.DocumentWriters.DocumentFormat">DocumentFormat.Xps</see></td><td><see cref="T:Leadtools.Forms.DocumentWriters.XpsDocumentOptions" /></td></tr><tr><td><see cref="T:Leadtools.Forms.DocumentWriters.DocumentFormat">DocumentFormat.Docx</see></td><td><see cref="T:Leadtools.Forms.DocumentWriters.DocxDocumentOptions" /></td></tr><tr><td><see cref="T:Leadtools.Forms.DocumentWriters.DocumentFormat">DocumentFormat.Xls</see></td><td><see cref="T:Leadtools.Forms.DocumentWriters.XlsDocumentOptions" /></td></tr><tr><td><see cref="T:Leadtools.Forms.DocumentWriters.DocumentFormat">DocumentFormat.Pub</see></td><td><see cref="T:Leadtools.Forms.DocumentWriters.PubDocumentOptions" /></td></tr><tr><td><see cref="T:Leadtools.Forms.DocumentWriters.DocumentFormat">DocumentFormat.Mob</see></td><td><see cref="T:Leadtools.Forms.DocumentWriters.MobDocumentOptions" /></td></tr><tr><td><see cref="T:Leadtools.Forms.DocumentWriters.DocumentFormat">DocumentFormat.Svg</see></td><td><see cref="T:Leadtools.Forms.DocumentWriters.SvgDocumentOptions" /></td></tr><tr><td><see cref="T:Leadtools.Forms.DocumentWriters.DocumentFormat">DocumentFormat.AltoXml</see></td><td><see cref="T:Leadtools.Forms.DocumentWriters.AltoXmlDocumentOptions" /></td></tr></table></para>
        <para>To change the options used with a particular format, perform the following steps:
            <ol><li>Use the <see cref="M:Leadtools.Forms.DocumentWriters.DocumentWriter.GetOptions(Leadtools.Forms.DocumentWriters.DocumentFormat)">DocumentWriter.GetOptions</see> method of the <see cref="T:Leadtools.Forms.DocumentWriters.DocumentWriter" /> being used,
                  passing <see cref="T:Leadtools.Forms.DocumentWriters.DocumentFormat" /> desired in to the <paramref name="format" /> parameter. Note that the resulting object from the
                  base <see cref="T:Leadtools.Forms.DocumentWriters.DocumentOptions" /> class needs to be cast to appropriate derived class described in the table above.</li><li>Use the various derived class properties to change the options.</li><li>Use <see cref="M:Leadtools.Forms.DocumentWriters.DocumentWriter.SetOptions(Leadtools.Forms.DocumentWriters.DocumentFormat,Leadtools.Forms.DocumentWriters.DocumentOptions)">DocumentWriter.SetOptions</see> to set the new options in the engine.</li><li>Now you can call the <see cref="M:Leadtools.Forms.DocumentWriters.DocumentWriter.BeginDocument(System.String,Leadtools.Forms.DocumentWriters.DocumentFormat)">DocumentWriter.BeginDocument</see> method (with the desired <see cref="T:Leadtools.Forms.DocumentWriters.DocumentFormat" /> for
                  the <i>format</i> parameter) to create a new document and add the pages.</li></ol></para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.DocumentWriters.DocumentWriter" />.</example>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.DocumentWriters.DocumentPage" />
      <seealso cref="T:Leadtools.Forms.DocumentWriters.DocumentFormat" />
      <seealso cref="T:FT.Topics.ProgrammingWithDocumentWriters">Programming with LEADTOOLS Document Writers</seealso>
      <seealso cref="T:Leadtools.Topics.FilesToBeIncludedWithYourApplication">Files to be Included with Your Application</seealso>
      <seealso cref="T:Leadtools.Topics.UnlockingSpecialLEADFeatures">Unlocking Special LEAD Features</seealso>
    </member>
    <member name="M:Leadtools.Forms.DocumentWriters.DocumentWriter.GetOptions_WinRT(Leadtools.Forms.DocumentWriters.DocumentFormat)">
      <summary>
            Gets the extra options to use when saving a document using the specified format.
            </summary>
      <param name="format">The document format.</param>
      <returns>The document options for this format. Note that the returned object from the <see cref="T:Leadtools.Forms.DocumentWriters.DocumentOptions" /> interface needs to be cast to
            one of the derived classes based on <paramref name="format" />.</returns>
      <remarks>
        <para>You cannot use the <see cref="T:Leadtools.Forms.DocumentWriters.DocumentOptions" /> class directly. Instead, use one of the derived classes to get and set the options associated with a document format. The
            following table lists the document formats and the <see cref="T:Leadtools.Forms.DocumentWriters.DocumentOptions" /> implementation class associated with it:
            <table><tr><th>Format (the value of <paramref name="format" />)</th><th>Class</th></tr><tr><td><see cref="T:Leadtools.Forms.DocumentWriters.DocumentFormat">DocumentFormat.Ltd</see></td><td><see cref="T:Leadtools.Forms.DocumentWriters.LtdDocumentOptions" /></td></tr><tr><td><see cref="T:Leadtools.Forms.DocumentWriters.DocumentFormat">DocumentFormat.Pdf</see></td><td><see cref="T:Leadtools.Forms.DocumentWriters.PdfDocumentOptions" /></td></tr><tr><td><see cref="T:Leadtools.Forms.DocumentWriters.DocumentFormat">DocumentFormat.Doc</see></td><td><see cref="T:Leadtools.Forms.DocumentWriters.DocDocumentOptions" /></td></tr><tr><td><see cref="T:Leadtools.Forms.DocumentWriters.DocumentFormat">DocumentFormat.Rtf</see></td><td><see cref="T:Leadtools.Forms.DocumentWriters.RtfDocumentOptions" /></td></tr><tr><td><see cref="T:Leadtools.Forms.DocumentWriters.DocumentFormat">DocumentFormat.Text</see></td><td><see cref="T:Leadtools.Forms.DocumentWriters.TextDocumentOptions" /></td></tr><tr><td><see cref="T:Leadtools.Forms.DocumentWriters.DocumentFormat">DocumentFormat.Html</see></td><td><see cref="T:Leadtools.Forms.DocumentWriters.HtmlDocumentOptions" /></td></tr><tr><td><see cref="T:Leadtools.Forms.DocumentWriters.DocumentFormat">DocumentFormat.Emf</see></td><td><see cref="T:Leadtools.Forms.DocumentWriters.EmfDocumentOptions" /></td></tr><tr><td><see cref="T:Leadtools.Forms.DocumentWriters.DocumentFormat">DocumentFormat.Xps</see></td><td><see cref="T:Leadtools.Forms.DocumentWriters.XpsDocumentOptions" /></td></tr><tr><td><see cref="T:Leadtools.Forms.DocumentWriters.DocumentFormat">DocumentFormat.Docx</see></td><td><see cref="T:Leadtools.Forms.DocumentWriters.DocxDocumentOptions" /></td></tr><tr><td><see cref="T:Leadtools.Forms.DocumentWriters.DocumentFormat">DocumentFormat.Xls</see></td><td><see cref="T:Leadtools.Forms.DocumentWriters.XlsDocumentOptions" /></td></tr><tr><td><see cref="T:Leadtools.Forms.DocumentWriters.DocumentFormat">DocumentFormat.Pub</see></td><td><see cref="T:Leadtools.Forms.DocumentWriters.PubDocumentOptions" /></td></tr><tr><td><see cref="T:Leadtools.Forms.DocumentWriters.DocumentFormat">DocumentFormat.Mob</see></td><td><see cref="T:Leadtools.Forms.DocumentWriters.MobDocumentOptions" /></td></tr><tr><td><see cref="T:Leadtools.Forms.DocumentWriters.DocumentFormat">DocumentFormat.Svg</see></td><td><see cref="T:Leadtools.Forms.DocumentWriters.SvgDocumentOptions" /></td></tr><tr><td><see cref="T:Leadtools.Forms.DocumentWriters.DocumentFormat">DocumentFormat.AltoXml</see></td><td><see cref="T:Leadtools.Forms.DocumentWriters.AltoXmlDocumentOptions" /></td></tr></table></para>
        <para>To change the options used with a particular format, perform the following steps:
            <ol><li>Use the <see cref="M:Leadtools.Forms.DocumentWriters.DocumentWriter.GetOptions(Leadtools.Forms.DocumentWriters.DocumentFormat)">DocumentWriter.GetOptions</see> method of the <see cref="T:Leadtools.Forms.DocumentWriters.DocumentWriter" /> being used, 
                  passing <see cref="T:Leadtools.Forms.DocumentWriters.DocumentFormat" /> desired in to the <paramref name="format" /> parameter. Note that the resulting object from the
                  base <see cref="T:Leadtools.Forms.DocumentWriters.DocumentOptions" /> class needs to be cast to appropriate derived class described in the table above.</li><li>Use the various derived class properties to change the options.</li><li>Use <see cref="M:Leadtools.Forms.DocumentWriters.DocumentWriter.SetOptions(Leadtools.Forms.DocumentWriters.DocumentFormat,Leadtools.Forms.DocumentWriters.DocumentOptions)">DocumentWriter.SetOptions</see> to set the new options in the engine.</li><li>Now you can call the <see cref="M:Leadtools.Forms.DocumentWriters.DocumentWriter.BeginDocument(System.String,Leadtools.Forms.DocumentWriters.DocumentFormat)">DocumentWriter.BeginDocument</see> method (with the desired <see cref="T:Leadtools.Forms.DocumentWriters.DocumentFormat" /> for
                  the <i>format</i> parameter) to create a new document and add the pages.</li></ol></para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.DocumentWriters.DocumentWriter" />.</example>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.DocumentWriters.DocumentPage" />
      <seealso cref="T:Leadtools.Forms.DocumentWriters.DocumentFormat" />
      <seealso cref="T:FT.Topics.ProgrammingWithDocumentWriters">Programming with LEADTOOLS Document Writers</seealso>
      <seealso cref="T:Leadtools.Topics.FilesToBeIncludedWithYourApplication">Files to be Included with Your Application</seealso>
      <seealso cref="T:Leadtools.Topics.UnlockingSpecialLEADFeatures">Unlocking Special LEAD Features</seealso>
      <winrt />
    </member>
    <member name="M:Leadtools.Forms.DocumentWriters.DocumentWriter.SetOptions(Leadtools.Forms.DocumentWriters.DocumentFormat,Leadtools.Forms.DocumentWriters.DocumentOptions)">
      <summary>Sets the extra options to use when saving a document using the specified format. <a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="WinRTicon.png" class="WinRTIconTag" name="WinRTIconTag" title="WinRT support" border="0" /></a></summary>
      <param name="format">The document format.</param>
      <param name="options">An instance of an object derived from <see cref="T:Leadtools.Forms.DocumentWriters.DocumentOptions" />. The remarks section lists the various document formats and the derived object that can be used.</param>
      <remarks>
        <para>You cannot use the <see cref="T:Leadtools.Forms.DocumentWriters.DocumentOptions" /> class directly. Instead, use one of the derived classes to get and set the options associated with a document format. The
            following table list the document formats and the <see cref="T:Leadtools.Forms.DocumentWriters.DocumentOptions" /> derived class associated with it:
            <table><tr><th>Format (the value of <paramref name="format" />)</th><th>Class</th></tr><tr><td><see cref="T:Leadtools.Forms.DocumentWriters.DocumentFormat">DocumentFormat.Ltd</see></td><td><see cref="T:Leadtools.Forms.DocumentWriters.LtdDocumentOptions" /></td></tr><tr><td><see cref="T:Leadtools.Forms.DocumentWriters.DocumentFormat">DocumentFormat.Pdf</see></td><td><see cref="T:Leadtools.Forms.DocumentWriters.PdfDocumentOptions" /></td></tr><tr><td><see cref="T:Leadtools.Forms.DocumentWriters.DocumentFormat">DocumentFormat.Doc</see></td><td><see cref="T:Leadtools.Forms.DocumentWriters.DocDocumentOptions" /></td></tr><tr><td><see cref="T:Leadtools.Forms.DocumentWriters.DocumentFormat">DocumentFormat.Rtf</see></td><td><see cref="T:Leadtools.Forms.DocumentWriters.RtfDocumentOptions" /></td></tr><tr><td><see cref="T:Leadtools.Forms.DocumentWriters.DocumentFormat">DocumentFormat.Text</see></td><td><see cref="T:Leadtools.Forms.DocumentWriters.TextDocumentOptions" /></td></tr><tr><td><see cref="T:Leadtools.Forms.DocumentWriters.DocumentFormat">DocumentFormat.Html</see></td><td><see cref="T:Leadtools.Forms.DocumentWriters.HtmlDocumentOptions" /></td></tr><tr><td><see cref="T:Leadtools.Forms.DocumentWriters.DocumentFormat">DocumentFormat.Emf</see></td><td><see cref="T:Leadtools.Forms.DocumentWriters.EmfDocumentOptions" /></td></tr><tr><td><see cref="T:Leadtools.Forms.DocumentWriters.DocumentFormat">DocumentFormat.Xps</see></td><td><see cref="T:Leadtools.Forms.DocumentWriters.XpsDocumentOptions" /></td></tr><tr><td><see cref="T:Leadtools.Forms.DocumentWriters.DocumentFormat">DocumentFormat.Docx</see></td><td><see cref="T:Leadtools.Forms.DocumentWriters.DocxDocumentOptions" /></td></tr><tr><td><see cref="T:Leadtools.Forms.DocumentWriters.DocumentFormat">DocumentFormat.Xls</see></td><td><see cref="T:Leadtools.Forms.DocumentWriters.XlsDocumentOptions" /></td></tr><tr><td><see cref="T:Leadtools.Forms.DocumentWriters.DocumentFormat">DocumentFormat.Pub</see></td><td><see cref="T:Leadtools.Forms.DocumentWriters.PubDocumentOptions" /></td></tr><tr><td><see cref="T:Leadtools.Forms.DocumentWriters.DocumentFormat">DocumentFormat.Mob</see></td><td><see cref="T:Leadtools.Forms.DocumentWriters.MobDocumentOptions" /></td></tr><tr><td><see cref="T:Leadtools.Forms.DocumentWriters.DocumentFormat">DocumentFormat.Svg</see></td><td><see cref="T:Leadtools.Forms.DocumentWriters.SvgDocumentOptions" /></td></tr><tr><td><see cref="T:Leadtools.Forms.DocumentWriters.DocumentFormat">DocumentFormat.AltoXml</see></td><td><see cref="T:Leadtools.Forms.DocumentWriters.AltoXmlDocumentOptions" /></td></tr></table></para>
        <para>To change the options used with a particular format, perform the following steps:
            <ol><li>Use the <see cref="M:Leadtools.Forms.DocumentWriters.DocumentWriter.GetOptions(Leadtools.Forms.DocumentWriters.DocumentFormat)">DocumentWriter.GetOptions</see> method of the <see cref="T:Leadtools.Forms.DocumentWriters.DocumentWriter" /> object you are using 
                      passing <see cref="T:Leadtools.Forms.DocumentWriters.DocumentFormat" /> desired in to the <paramref name="format" /> parameter. Note that the resulting object from the
                       base <see cref="T:Leadtools.Forms.DocumentWriters.DocumentOptions" /> class needs to be cast to appropriate derived class described in the table above.</li><li>Use the various derived class properties to change the options.</li><li>Use <see cref="M:Leadtools.Forms.DocumentWriters.DocumentWriter.SetOptions(Leadtools.Forms.DocumentWriters.DocumentFormat,Leadtools.Forms.DocumentWriters.DocumentOptions)">DocumentWriter.SetOptions</see> to set the new options in the engine.</li><li>Now you can call the <see cref="M:Leadtools.Forms.DocumentWriters.DocumentWriter.BeginDocument(System.String,Leadtools.Forms.DocumentWriters.DocumentFormat)">DocumentWriter.BeginDocument</see> method (with the desired <see cref="T:Leadtools.Forms.DocumentWriters.DocumentFormat" /> for the 
                      <i>format</i> parameter) to create a new document and add the pages.</li></ol></para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.DocumentWriters.DocumentWriter" />.</example>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.DocumentWriters.DocumentPage" />
      <seealso cref="T:Leadtools.Forms.DocumentWriters.DocumentFormat" />
      <seealso cref="T:FT.Topics.ProgrammingWithDocumentWriters">Programming with LEADTOOLS Document Writers</seealso>
      <seealso cref="T:Leadtools.Topics.FilesToBeIncludedWithYourApplication">Files to be Included with Your Application</seealso>
      <seealso cref="T:Leadtools.Topics.UnlockingSpecialLEADFeatures">Unlocking Special LEAD Features</seealso>
    </member>
    <member name="M:Leadtools.Forms.DocumentWriters.DocumentWriter.SetOptions_WinRT(Leadtools.Forms.DocumentWriters.DocumentFormat,Leadtools.Forms.DocumentWriters.DocumentOptions)">
      <summary>
            Sets the extra options to use when saving a document using the specified format.
            </summary>
      <param name="format">The document format.</param>
      <param name="options">An instance of an object that implements <see cref="T:Leadtools.Forms.DocumentWriters.DocumentOptions" />. The remarks section lists the various document formats and the derived object that can be used.</param>
      <remarks>
        <para>You cannot use the <see cref="T:Leadtools.Forms.DocumentWriters.DocumentOptions" /> class directly. Instead, use one of the derived classes to get and set the options associated with a document format. The
            following table list the document formats and the <see cref="T:Leadtools.Forms.DocumentWriters.DocumentOptions" /> implementation class associated with it:
            <table><tr><th>Format (the value of <paramref name="format" />)</th><th>Class</th></tr><tr><td><see cref="T:Leadtools.Forms.DocumentWriters.DocumentFormat">DocumentFormat.Ltd</see></td><td><see cref="T:Leadtools.Forms.DocumentWriters.LtdDocumentOptions" /></td></tr><tr><td><see cref="T:Leadtools.Forms.DocumentWriters.DocumentFormat">DocumentFormat.Pdf</see></td><td><see cref="T:Leadtools.Forms.DocumentWriters.PdfDocumentOptions" /></td></tr><tr><td><see cref="T:Leadtools.Forms.DocumentWriters.DocumentFormat">DocumentFormat.Doc</see></td><td><see cref="T:Leadtools.Forms.DocumentWriters.DocDocumentOptions" /></td></tr><tr><td><see cref="T:Leadtools.Forms.DocumentWriters.DocumentFormat">DocumentFormat.Rtf</see></td><td><see cref="T:Leadtools.Forms.DocumentWriters.RtfDocumentOptions" /></td></tr><tr><td><see cref="T:Leadtools.Forms.DocumentWriters.DocumentFormat">DocumentFormat.Text</see></td><td><see cref="T:Leadtools.Forms.DocumentWriters.TextDocumentOptions" /></td></tr><tr><td><see cref="T:Leadtools.Forms.DocumentWriters.DocumentFormat">DocumentFormat.Html</see></td><td><see cref="T:Leadtools.Forms.DocumentWriters.HtmlDocumentOptions" /></td></tr><tr><td><see cref="T:Leadtools.Forms.DocumentWriters.DocumentFormat">DocumentFormat.Emf</see></td><td><see cref="T:Leadtools.Forms.DocumentWriters.EmfDocumentOptions" /></td></tr><tr><td><see cref="T:Leadtools.Forms.DocumentWriters.DocumentFormat">DocumentFormat.Xps</see></td><td><see cref="T:Leadtools.Forms.DocumentWriters.XpsDocumentOptions" /></td></tr><tr><td><see cref="T:Leadtools.Forms.DocumentWriters.DocumentFormat">DocumentFormat.Docx</see></td><td><see cref="T:Leadtools.Forms.DocumentWriters.DocxDocumentOptions" /></td></tr><tr><td><see cref="T:Leadtools.Forms.DocumentWriters.DocumentFormat">DocumentFormat.Xls</see></td><td><see cref="T:Leadtools.Forms.DocumentWriters.XlsDocumentOptions" /></td></tr><tr><td><see cref="T:Leadtools.Forms.DocumentWriters.DocumentFormat">DocumentFormat.Pub</see></td><td><see cref="T:Leadtools.Forms.DocumentWriters.PubDocumentOptions" /></td></tr><tr><td><see cref="T:Leadtools.Forms.DocumentWriters.DocumentFormat">DocumentFormat.Mob</see></td><td><see cref="T:Leadtools.Forms.DocumentWriters.MobDocumentOptions" /></td></tr><tr><td><see cref="T:Leadtools.Forms.DocumentWriters.DocumentFormat">DocumentFormat.Svg</see></td><td><see cref="T:Leadtools.Forms.DocumentWriters.SvgDocumentOptions" /></td></tr><tr><td><see cref="T:Leadtools.Forms.DocumentWriters.DocumentFormat">DocumentFormat.AltoXml</see></td><td><see cref="T:Leadtools.Forms.DocumentWriters.AltoXmlDocumentOptions" /></td></tr></table></para>
        <para>To change the options used with a particular format, perform the following steps:
            <ol><li>Use the <see cref="M:Leadtools.Forms.DocumentWriters.DocumentWriter.GetOptions(Leadtools.Forms.DocumentWriters.DocumentFormat)">DocumentWriter.GetOptions</see> method of the <see cref="T:Leadtools.Forms.DocumentWriters.DocumentWriter" /> object you are using 
                      passing <see cref="T:Leadtools.Forms.DocumentWriters.DocumentFormat" /> desired in to the <paramref name="format" /> parameter. Note that the resulting object from the
                       <see cref="T:Leadtools.Forms.DocumentWriters.DocumentOptions" /> interface needs to be cast to appropriate derived class described in the table above.</li><li>Use the various derived class properties to change the options.</li><li>Use <see cref="M:Leadtools.Forms.DocumentWriters.DocumentWriter.SetOptions(Leadtools.Forms.DocumentWriters.DocumentFormat,Leadtools.Forms.DocumentWriters.DocumentOptions)">DocumentWriter.SetOptions</see> to set the new options in the engine.</li><li>Now you can call the <see cref="M:Leadtools.Forms.DocumentWriters.DocumentWriter.BeginDocument(System.String,Leadtools.Forms.DocumentWriters.DocumentFormat)">DocumentWriter.BeginDocument</see> method (with the desired <see cref="T:Leadtools.Forms.DocumentWriters.DocumentFormat" /> for the 
                      <i>format</i> parameter) to create a new document and add the pages.</li></ol></para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.DocumentWriters.DocumentWriter" />.</example>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.DocumentWriters.DocumentPage" />
      <seealso cref="T:Leadtools.Forms.DocumentWriters.DocumentFormat" />
      <seealso cref="T:FT.Topics.ProgrammingWithDocumentWriters">Programming with LEADTOOLS Document Writers</seealso>
      <seealso cref="T:Leadtools.Topics.FilesToBeIncludedWithYourApplication">Files to be Included with Your Application</seealso>
      <seealso cref="T:Leadtools.Topics.UnlockingSpecialLEADFeatures">Unlocking Special LEAD Features</seealso>
      <winrt />
    </member>
    <member name="M:Leadtools.Forms.DocumentWriters.DocumentWriter.LoadOptions(System.String)">
      <summary>Loads the document options from an XML file on disk. <a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
      <param name="fileName">The name of XML file containing the options.</param>
      <remarks>
        <para>This method will load the options saved to an XML file using the <see cref="M:Leadtools.Forms.DocumentWriters.DocumentWriter.SaveOptions(System.String)">SaveOptions(string)</see> method.</para>
        <para>To load and save the options to an XML stream instead of a file, use <see cref="M:Leadtools.Forms.DocumentWriters.DocumentWriter.LoadOptions(System.IO.Stream)">LoadOptions(Stream)</see> and <see cref="M:Leadtools.Forms.DocumentWriters.DocumentWriter.SaveOptions(System.IO.Stream)">SaveOptions(Stream)</see>.</para>
        <para>Saving the options to an XML file allows you to set the options the required way once and then re-use them in multiple sessions (or multiple <see cref="T:Leadtools.Forms.DocumentWriters.DocumentWriter" /> instances).
            Each document format supported by the LEADTOOLS Document Writer contain extra functionality and options that can be accessed with the <see cref="M:Leadtools.Forms.DocumentWriters.DocumentWriter.GetOptions(Leadtools.Forms.DocumentWriters.DocumentFormat)" /> and <see cref="M:Leadtools.Forms.DocumentWriters.DocumentWriter.SetOptions(Leadtools.Forms.DocumentWriters.DocumentFormat,Leadtools.Forms.DocumentWriters.DocumentOptions)" />
            methods. For more information, refer to <see cref="T:Leadtools.Forms.DocumentWriters.DocumentOptions" />.</para>
        <para>The following options are saved to the XML:</para>
        <list type="bullet">
          <item>
            <description>
              <see cref="T:Leadtools.Forms.DocumentWriters.LtdDocumentOptions" />
            </description>
          </item>
          <item>
            <description>
              <see cref="T:Leadtools.Forms.DocumentWriters.PdfDocumentOptions" />
            </description>
          </item>
          <item>
            <description>
              <see cref="T:Leadtools.Forms.DocumentWriters.DocDocumentOptions" />
            </description>
          </item>
          <item>
            <description>
              <see cref="T:Leadtools.Forms.DocumentWriters.RtfDocumentOptions" />
            </description>
          </item>
          <item>
            <description>
              <see cref="T:Leadtools.Forms.DocumentWriters.TextDocumentOptions" />
            </description>
          </item>
          <item>
            <description>
              <see cref="T:Leadtools.Forms.DocumentWriters.HtmlDocumentOptions" />
            </description>
          </item>
          <item>
            <description>
              <see cref="T:Leadtools.Forms.DocumentWriters.EmfDocumentOptions" />
            </description>
          </item>
          <item>
            <description>
              <see cref="T:Leadtools.Forms.DocumentWriters.XpsDocumentOptions" />
            </description>
          </item>
          <item>
            <description>
              <see cref="T:Leadtools.Forms.DocumentWriters.DocxDocumentOptions" />
            </description>
          </item>
          <item>
            <description>
              <see cref="T:Leadtools.Forms.DocumentWriters.XlsDocumentOptions" />
            </description>
          </item>
          <item>
            <description>
              <see cref="T:Leadtools.Forms.DocumentWriters.PubDocumentOptions" />
            </description>
          </item>
          <item>
            <description>
              <see cref="T:Leadtools.Forms.DocumentWriters.MobDocumentOptions" />
            </description>
          </item>
          <item>
            <description>
              <see cref="T:Leadtools.Forms.DocumentWriters.SvgDocumentOptions" />
            </description>
          </item>
          <item>
            <description>
              <see cref="T:Leadtools.Forms.DocumentWriters.AltoXmlDocumentOptions" />
            </description>
          </item>
        </list>
      </remarks>
      <example>For an example, refer to <see cref="M:Leadtools.Forms.DocumentWriters.DocumentWriter.SaveOptions(System.String)" />.</example>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.DocumentWriters.DocumentPage" />
      <seealso cref="T:Leadtools.Forms.DocumentWriters.DocumentFormat" />
      <seealso cref="T:FT.Topics.ProgrammingWithDocumentWriters">Programming with LEADTOOLS Document Writers</seealso>
      <seealso cref="T:Leadtools.Topics.FilesToBeIncludedWithYourApplication">Files to be Included with Your Application</seealso>
      <seealso cref="T:Leadtools.Topics.UnlockingSpecialLEADFeatures">Unlocking Special LEAD Features</seealso>
    </member>
    <member name="M:Leadtools.Forms.DocumentWriters.DocumentWriter.LoadOptions(System.IO.Stream)">
      <summary>Loads the document options from an XML stream. <a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
      <param name="stream">A standard .NET <see cref="T:System.IO.Stream" /> containing the options.</param>
      <remarks>
        <para>This method will load the options saved to an XML stream using the <see cref="M:Leadtools.Forms.DocumentWriters.DocumentWriter.SaveOptions(System.IO.Stream)">SaveOptions(Stream)</see> method.</para>
        <para>To load and save the options to an XML disk file instead of a stream, use <see cref="M:Leadtools.Forms.DocumentWriters.DocumentWriter.LoadOptions(System.String)">LoadOptions(string)</see> and <see cref="M:Leadtools.Forms.DocumentWriters.DocumentWriter.SaveOptions(System.String)">SaveOptions(string)</see>.</para>
        <para>Saving the options to an XML file allows you to set the options the required way once and then re-use them in multiple sessions (or multiple <see cref="T:Leadtools.Forms.DocumentWriters.DocumentWriter" /> instances).
            Each document format supported by the LEADTOOLS Document Writer contain extra functionality and options that can be accessed with the <see cref="M:Leadtools.Forms.DocumentWriters.DocumentWriter.GetOptions(Leadtools.Forms.DocumentWriters.DocumentFormat)" /> and <see cref="M:Leadtools.Forms.DocumentWriters.DocumentWriter.SetOptions(Leadtools.Forms.DocumentWriters.DocumentFormat,Leadtools.Forms.DocumentWriters.DocumentOptions)" />
            methods. For more information, refer to <see cref="T:Leadtools.Forms.DocumentWriters.DocumentOptions" />.</para>
        <para>The following options are saved to the XML:</para>
        <para>The following options are saved to the XML:</para>
        <list type="bullet">
          <item>
            <description>
              <see cref="T:Leadtools.Forms.DocumentWriters.LtdDocumentOptions" />
            </description>
          </item>
          <item>
            <description>
              <see cref="T:Leadtools.Forms.DocumentWriters.PdfDocumentOptions" />
            </description>
          </item>
          <item>
            <description>
              <see cref="T:Leadtools.Forms.DocumentWriters.DocDocumentOptions" />
            </description>
          </item>
          <item>
            <description>
              <see cref="T:Leadtools.Forms.DocumentWriters.RtfDocumentOptions" />
            </description>
          </item>
          <item>
            <description>
              <see cref="T:Leadtools.Forms.DocumentWriters.TextDocumentOptions" />
            </description>
          </item>
          <item>
            <description>
              <see cref="T:Leadtools.Forms.DocumentWriters.HtmlDocumentOptions" />
            </description>
          </item>
          <item>
            <description>
              <see cref="T:Leadtools.Forms.DocumentWriters.EmfDocumentOptions" />
            </description>
          </item>
          <item>
            <description>
              <see cref="T:Leadtools.Forms.DocumentWriters.XpsDocumentOptions" />
            </description>
          </item>
          <item>
            <description>
              <see cref="T:Leadtools.Forms.DocumentWriters.DocxDocumentOptions" />
            </description>
          </item>
          <item>
            <description>
              <see cref="T:Leadtools.Forms.DocumentWriters.XlsDocumentOptions" />
            </description>
          </item>
          <item>
            <description>
              <see cref="T:Leadtools.Forms.DocumentWriters.PubDocumentOptions" />
            </description>
          </item>
          <item>
            <description>
              <see cref="T:Leadtools.Forms.DocumentWriters.MobDocumentOptions" />
            </description>
          </item>
          <item>
            <description>
              <see cref="T:Leadtools.Forms.DocumentWriters.SvgDocumentOptions" />
            </description>
          </item>
          <item>
            <description>
              <see cref="T:Leadtools.Forms.DocumentWriters.AltoXmlDocumentOptions" />
            </description>
          </item>
        </list>
      </remarks>
      <example>For an example, refer to <see cref="M:Leadtools.Forms.DocumentWriters.DocumentWriter.SaveOptions(System.IO.Stream)" />.</example>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.DocumentWriters.DocumentPage" />
      <seealso cref="T:Leadtools.Forms.DocumentWriters.DocumentFormat" />
      <seealso cref="T:FT.Topics.ProgrammingWithDocumentWriters">Programming with LEADTOOLS Document Writers</seealso>
      <seealso cref="T:Leadtools.Topics.FilesToBeIncludedWithYourApplication">Files to be Included with Your Application</seealso>
      <seealso cref="T:Leadtools.Topics.UnlockingSpecialLEADFeatures">Unlocking Special LEAD Features</seealso>
    </member>
    <member name="M:Leadtools.Forms.DocumentWriters.DocumentWriter.SaveOptions(System.String)">
      <summary>Saves the document options to an XML file on disk. <a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
      <param name="fileName">The name of XML file to save the options to.</param>
      <remarks>
        <para>To load the options saved into a disk file by the <see cref="M:Leadtools.Forms.DocumentWriters.DocumentWriter.SaveOptions(System.String)">SaveOptions(string)</see> method, use <see cref="M:Leadtools.Forms.DocumentWriters.DocumentWriter.LoadOptions(System.String)">LoadOptions(string)</see>.</para>
        <para>To load and save the options to an XML stream instead of a file, use <see cref="M:Leadtools.Forms.DocumentWriters.DocumentWriter.LoadOptions(System.IO.Stream)">LoadOptions(Stream)</see> and <see cref="M:Leadtools.Forms.DocumentWriters.DocumentWriter.SaveOptions(System.IO.Stream)">SaveOptions(Stream)</see>.</para>
        <para>Saving the options to an XML file allows the options to be set the required way once and then re-used in multiple sessions (or multiple <see cref="T:Leadtools.Forms.DocumentWriters.DocumentWriter" /> instances).
            Each document format supported by the LEADTOOLS Document Writer contain extra functionality and options that can be accessed with the <see cref="M:Leadtools.Forms.DocumentWriters.DocumentWriter.GetOptions(Leadtools.Forms.DocumentWriters.DocumentFormat)" /> and <see cref="M:Leadtools.Forms.DocumentWriters.DocumentWriter.SetOptions(Leadtools.Forms.DocumentWriters.DocumentFormat,Leadtools.Forms.DocumentWriters.DocumentOptions)" />
            methods. For more information, refer to <see cref="T:Leadtools.Forms.DocumentWriters.DocumentOptions" />.</para>
        <para>The following options are saved to the XML:</para>
        <para>The following options are saved to the XML:</para>
        <list type="bullet">
          <item>
            <description>
              <see cref="T:Leadtools.Forms.DocumentWriters.LtdDocumentOptions" />
            </description>
          </item>
          <item>
            <description>
              <see cref="T:Leadtools.Forms.DocumentWriters.PdfDocumentOptions" />
            </description>
          </item>
          <item>
            <description>
              <see cref="T:Leadtools.Forms.DocumentWriters.DocDocumentOptions" />
            </description>
          </item>
          <item>
            <description>
              <see cref="T:Leadtools.Forms.DocumentWriters.RtfDocumentOptions" />
            </description>
          </item>
          <item>
            <description>
              <see cref="T:Leadtools.Forms.DocumentWriters.TextDocumentOptions" />
            </description>
          </item>
          <item>
            <description>
              <see cref="T:Leadtools.Forms.DocumentWriters.HtmlDocumentOptions" />
            </description>
          </item>
          <item>
            <description>
              <see cref="T:Leadtools.Forms.DocumentWriters.EmfDocumentOptions" />
            </description>
          </item>
          <item>
            <description>
              <see cref="T:Leadtools.Forms.DocumentWriters.XpsDocumentOptions" />
            </description>
          </item>
          <item>
            <description>
              <see cref="T:Leadtools.Forms.DocumentWriters.DocxDocumentOptions" />
            </description>
          </item>
          <item>
            <description>
              <see cref="T:Leadtools.Forms.DocumentWriters.XlsDocumentOptions" />
            </description>
          </item>
          <item>
            <description>
              <see cref="T:Leadtools.Forms.DocumentWriters.PubDocumentOptions" />
            </description>
          </item>
          <item>
            <description>
              <see cref="T:Leadtools.Forms.DocumentWriters.MobDocumentOptions" />
            </description>
          </item>
          <item>
            <description>
              <see cref="T:Leadtools.Forms.DocumentWriters.SvgDocumentOptions" />
            </description>
          </item>
          <item>
            <description>
              <see cref="T:Leadtools.Forms.DocumentWriters.AltoXmlDocumentOptions" />
            </description>
          </item>
        </list>
      </remarks>
      <example>
        <p>
          <para>This example will change some of the options in a <see cref="T:Leadtools.Forms.DocumentWriters.DocumentWriter" /> object, saves them to disk and then re-load them in a new instance.</para>
        </p>
        <code lang="VB">      Imports Leadtools
      Imports Leadtools.Codecs
      Imports Leadtools.Forms.DocumentWriters
      Imports Leadtools.Forms.Ocr

      &lt;TestMethod&gt; _
      Public Sub DocumentOptionsDiskExample()
         Dim xmlFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "DocumentWriterOptions.xml")
         ' Create a new instance of the LEADTOOLS Document Writer
         Dim docWriter1 As New DocumentWriter()

         ' Show the default PDF and HTML options before
         ShowOptions("Default options for docWriter1", docWriter1)

         ' Change the PDF options and HTML options
         Dim pdfOptions As PdfDocumentOptions = DirectCast(docWriter1.GetOptions(DocumentFormat.Pdf), PdfDocumentOptions)
         pdfOptions.DocumentType = PdfDocumentType.PdfA
         pdfOptions.ImageOverText = True
         docWriter1.SetOptions(DocumentFormat.Pdf, pdfOptions)

         Dim htmlOptions As HtmlDocumentOptions = DirectCast(docWriter1.GetOptions(DocumentFormat.Html), HtmlDocumentOptions)
         htmlOptions.DocumentType = HtmlDocumentType.IENetscape
         htmlOptions.UseBackgroundColor = True
         htmlOptions.BackgroundColor = RasterColor.FromKnownColor(RasterKnownColor.LightBlue)
         docWriter1.SetOptions(DocumentFormat.Html, htmlOptions)

         ' Show the options again
         ShowOptions("New options for docWriter1", docWriter1)

         ' Save these options to disk
         docWriter1.SaveOptions(xmlFileName)

         ' Create a new DocumentWriter object
         Dim docWriter2 As New DocumentWriter()

         ' Show its options, should be the defaults
         ShowOptions("Default options for docWriter2", docWriter2)

         ' Load the options from disk to this object
         docWriter2.LoadOptions(xmlFileName)

         ' Show the options now, should be the saved ones
         ShowOptions("Options for docWriter2 after loading from the XML file", docWriter2)
      End Sub

      Private Sub ShowOptions(message As String, docWriter As DocumentWriter)
         Console.WriteLine(message)

         Dim pdfOptions As PdfDocumentOptions = DirectCast(docWriter.GetOptions(DocumentFormat.Pdf), PdfDocumentOptions)
         Console.WriteLine("  PDF options: ")
         Console.WriteLine("    DocumentType:  " + pdfOptions.DocumentType.ToString())
         Console.WriteLine("    FontEmbedMode: " + pdfOptions.FontEmbedMode.ToString())
         Console.WriteLine("    ImageOverText: " + pdfOptions.ImageOverText.ToString())

         Dim htmlOptions As HtmlDocumentOptions = DirectCast(docWriter.GetOptions(DocumentFormat.Html), HtmlDocumentOptions)
         Console.WriteLine("  HTML options: ")
         Console.WriteLine("    DocumentType:       " + htmlOptions.DocumentType.ToString())
         Console.WriteLine("    FontEmbedMode:      " + htmlOptions.FontEmbedMode.ToString())
         Console.WriteLine("    UseBackgroundColor: " + htmlOptions.UseBackgroundColor.ToString())
         Console.WriteLine("    BackgroundColor:    " + htmlOptions.BackgroundColor.ToString())
         Console.WriteLine("-------------------------")
      End Sub</code>
        <code lang="CS">      using Leadtools;
      using Leadtools.Codecs;
      using Leadtools.Forms.DocumentWriters;
      using Leadtools.Forms.Ocr;

      public void DocumentOptionsDiskExample()
      {
         var xmlFileName = Path.Combine(LEAD_VARS.ImagesDir, "DocumentWriterOptions.xml");
         // Create a new instance of the LEADTOOLS Document Writer
         var docWriter1 = new DocumentWriter();

         // Show the default PDF and HTML options before
         ShowOptions("Default options for docWriter1", docWriter1);

         // Change the PDF options and HTML options
         var pdfOptions = docWriter1.GetOptions(DocumentFormat.Pdf) as PdfDocumentOptions;
         pdfOptions.DocumentType = PdfDocumentType.PdfA;
         pdfOptions.ImageOverText = true;
         docWriter1.SetOptions(DocumentFormat.Pdf, pdfOptions);

         var htmlOptions = docWriter1.GetOptions(DocumentFormat.Html) as HtmlDocumentOptions;
         htmlOptions.DocumentType = HtmlDocumentType.IENetscape;
         htmlOptions.UseBackgroundColor = true;
         htmlOptions.BackgroundColor = RasterColor.FromKnownColor(RasterKnownColor.LightBlue);
         docWriter1.SetOptions(DocumentFormat.Html, htmlOptions);

         // Show the options again
         ShowOptions("New options for docWriter1", docWriter1);

         // Save these options to disk
         docWriter1.SaveOptions(xmlFileName);

         // Create a new DocumentWriter object
         var docWriter2 = new DocumentWriter();

         // Show its options, should be the defaults
         ShowOptions("Default options for docWriter2", docWriter2);

         // Load the options from disk to this object
         docWriter2.LoadOptions(xmlFileName);

         // Show the options now, should be the saved ones
         ShowOptions("Options for docWriter2 after loading from the XML file", docWriter2);
      }

      private void ShowOptions(string message, DocumentWriter docWriter)
      {
         Console.WriteLine(message);

         var pdfOptions = docWriter.GetOptions(DocumentFormat.Pdf) as PdfDocumentOptions;
         Console.WriteLine("  PDF options: ");
         Console.WriteLine("    DocumentType:  " + pdfOptions.DocumentType);
         Console.WriteLine("    FontEmbedMode: " + pdfOptions.FontEmbedMode);
         Console.WriteLine("    ImageOverText: " + pdfOptions.ImageOverText);

         var htmlOptions = docWriter.GetOptions(DocumentFormat.Html) as HtmlDocumentOptions;
         Console.WriteLine("  HTML options: ");
         Console.WriteLine("    DocumentType:       " + htmlOptions.DocumentType);
         Console.WriteLine("    FontEmbedMode:      " + htmlOptions.FontEmbedMode);
         Console.WriteLine("    UseBackgroundColor: " + htmlOptions.UseBackgroundColor);
         Console.WriteLine("    BackgroundColor:    " + htmlOptions.BackgroundColor);
         Console.WriteLine("-------------------------");
      }</code>
      </example>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.DocumentWriters.DocumentPage" />
      <seealso cref="T:Leadtools.Forms.DocumentWriters.DocumentFormat" />
      <seealso cref="T:FT.Topics.ProgrammingWithDocumentWriters">Programming with LEADTOOLS Document Writers</seealso>
      <seealso cref="T:Leadtools.Topics.FilesToBeIncludedWithYourApplication">Files to be Included with Your Application</seealso>
      <seealso cref="T:Leadtools.Topics.UnlockingSpecialLEADFeatures">Unlocking Special LEAD Features</seealso>
    </member>
    <member name="M:Leadtools.Forms.DocumentWriters.DocumentWriter.SaveOptions(System.IO.Stream)">
      <summary>Saves the document options to an XML stream. <a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
      <param name="stream">A standard .NET <see cref="T:System.IO.Stream" /> to save the options to.</param>
      <remarks>
        <para>To load the options saved into a .NET stream the <see cref="M:Leadtools.Forms.DocumentWriters.DocumentWriter.SaveOptions(System.IO.Stream)">SaveOptions(Stream)</see> method, use <see cref="M:Leadtools.Forms.DocumentWriters.DocumentWriter.LoadOptions(System.IO.Stream)">LoadOptions(Stream)</see>.</para>
        <para>To load and save the options to an XML file on disk instead of a stream, use <see cref="M:Leadtools.Forms.DocumentWriters.DocumentWriter.LoadOptions(System.String)">LoadOptions(string)</see> and <see cref="M:Leadtools.Forms.DocumentWriters.DocumentWriter.SaveOptions(System.String)">SaveOptions(string)</see>.</para>
        <para>Saving the options to an XML file allows the options to be the required way once and then re-used in multiple sessions (or multiple <see cref="T:Leadtools.Forms.DocumentWriters.DocumentWriter" /> instances).
            Each document format supported by the LEADTOOLS Document Writer contain extra functionality and options that can be accessed with the <see cref="M:Leadtools.Forms.DocumentWriters.DocumentWriter.GetOptions(Leadtools.Forms.DocumentWriters.DocumentFormat)" /> and <see cref="M:Leadtools.Forms.DocumentWriters.DocumentWriter.SetOptions(Leadtools.Forms.DocumentWriters.DocumentFormat,Leadtools.Forms.DocumentWriters.DocumentOptions)" />
            methods. For more information, refer to <see cref="T:Leadtools.Forms.DocumentWriters.DocumentOptions" />.</para>
        <para>The following options are saved to the XML:</para>
        <para>The following options are saved to the XML:</para>
        <list type="bullet">
          <item>
            <description>
              <see cref="T:Leadtools.Forms.DocumentWriters.LtdDocumentOptions" />
            </description>
          </item>
          <item>
            <description>
              <see cref="T:Leadtools.Forms.DocumentWriters.PdfDocumentOptions" />
            </description>
          </item>
          <item>
            <description>
              <see cref="T:Leadtools.Forms.DocumentWriters.DocDocumentOptions" />
            </description>
          </item>
          <item>
            <description>
              <see cref="T:Leadtools.Forms.DocumentWriters.RtfDocumentOptions" />
            </description>
          </item>
          <item>
            <description>
              <see cref="T:Leadtools.Forms.DocumentWriters.TextDocumentOptions" />
            </description>
          </item>
          <item>
            <description>
              <see cref="T:Leadtools.Forms.DocumentWriters.HtmlDocumentOptions" />
            </description>
          </item>
          <item>
            <description>
              <see cref="T:Leadtools.Forms.DocumentWriters.EmfDocumentOptions" />
            </description>
          </item>
          <item>
            <description>
              <see cref="T:Leadtools.Forms.DocumentWriters.XpsDocumentOptions" />
            </description>
          </item>
          <item>
            <description>
              <see cref="T:Leadtools.Forms.DocumentWriters.DocxDocumentOptions" />
            </description>
          </item>
          <item>
            <description>
              <see cref="T:Leadtools.Forms.DocumentWriters.XlsDocumentOptions" />
            </description>
          </item>
          <item>
            <description>
              <see cref="T:Leadtools.Forms.DocumentWriters.PubDocumentOptions" />
            </description>
          </item>
          <item>
            <description>
              <see cref="T:Leadtools.Forms.DocumentWriters.MobDocumentOptions" />
            </description>
          </item>
          <item>
            <description>
              <see cref="T:Leadtools.Forms.DocumentWriters.SvgDocumentOptions" />
            </description>
          </item>
          <item>
            <description>
              <see cref="T:Leadtools.Forms.DocumentWriters.AltoXmlDocumentOptions" />
            </description>
          </item>
        </list>
      </remarks>
      <example>
        <p>
          <para>This example will change some of the options in a <see cref="T:Leadtools.Forms.DocumentWriters.DocumentWriter" /> object, saves them to a memory stream and then re-load them in a new instance.</para>
        </p>
        <code lang="VB">      Imports Leadtools
      Imports Leadtools.Codecs
      Imports Leadtools.Forms.DocumentWriters
      Imports Leadtools.Forms.Ocr

      &lt;TestMethod&gt; _
      Public Sub DocumentOptionsStreamExample()
         ' Use a memory stream to save the options to
         Using stream As New MemoryStream()
            ' Create a new instance of the LEADTOOLS Document Writer
            Dim docWriter1 As New DocumentWriter()
            ' Show the default PDF and HTML options before
            ShowMyOptions("Default options for docWriter1", docWriter1)

            ' Change the PDF options and HTML options
            Dim pdfOptions As PdfDocumentOptions = DirectCast(docWriter1.GetOptions(DocumentFormat.Pdf), PdfDocumentOptions)
            pdfOptions.DocumentType = PdfDocumentType.PdfA
            pdfOptions.ImageOverText = True
            docWriter1.SetOptions(DocumentFormat.Pdf, pdfOptions)

            Dim htmlOptions As HtmlDocumentOptions = DirectCast(docWriter1.GetOptions(DocumentFormat.Html), HtmlDocumentOptions)
            htmlOptions.DocumentType = HtmlDocumentType.IENetscape
            htmlOptions.UseBackgroundColor = True
            htmlOptions.BackgroundColor = RasterColor.FromKnownColor(RasterKnownColor.LightBlue)
            docWriter1.SetOptions(DocumentFormat.Html, htmlOptions)

            ' Show the options again
            ShowMyOptions("New options for docWriter1", docWriter1)

            ' Save these options to the stream
            docWriter1.SaveOptions(stream)
            ' Reset the stream back to its original position
            stream.Position = 0

            ' Create a new DocumentWriter object
            Dim docWriter2 As New DocumentWriter()

            ' Show its options, should be the defaults
            ShowMyOptions("Default options for docWriter2", docWriter2)

            ' Load the options from the memory to this object
            docWriter2.LoadOptions(stream)

            ' Show the options now, should be the saved ones
            ShowMyOptions("Options for docWriter2 after loading from the XML file", docWriter2)
         End Using
      End Sub

      Private Sub ShowMyOptions(message As String, docWriter As DocumentWriter)
         Console.WriteLine(message)

         Dim pdfOptions As PdfDocumentOptions = DirectCast(docWriter.GetOptions(DocumentFormat.Pdf), PdfDocumentOptions)
         Console.WriteLine("  PDF options: ")
         Console.WriteLine("    DocumentType:  " + pdfOptions.DocumentType.ToString())
         Console.WriteLine("    FontEmbedMode: " + pdfOptions.FontEmbedMode.ToString())
         Console.WriteLine("    ImageOverText: " + pdfOptions.ImageOverText.ToString())

         Dim htmlOptions As HtmlDocumentOptions = DirectCast(docWriter.GetOptions(DocumentFormat.Html), HtmlDocumentOptions)
         Console.WriteLine("  HTML options: ")
         Console.WriteLine("    DocumentType:       " + htmlOptions.DocumentType.ToString())
         Console.WriteLine("    FontEmbedMode:      " + htmlOptions.FontEmbedMode.ToString())
         Console.WriteLine("    UseBackgroundColor: " + htmlOptions.UseBackgroundColor.ToString())
         Console.WriteLine("    BackgroundColor:    " + htmlOptions.BackgroundColor.ToString())
         Console.WriteLine("-------------------------")
      End Sub</code>
        <code lang="CS">      using Leadtools;
      using Leadtools.Codecs;
      using Leadtools.Forms.DocumentWriters;
      using Leadtools.Forms.Ocr;

      public void DocumentOptionsStreamExample()
      {
         // Use a memory stream to save the options to
         using (var stream = new MemoryStream())
         {
            // Create a new instance of the LEADTOOLS Document Writer
            var docWriter1 = new DocumentWriter();
            // Show the default PDF and HTML options before
            ShowMyOptions("Default options for docWriter1", docWriter1);

            // Change the PDF options and HTML options
            var pdfOptions = docWriter1.GetOptions(DocumentFormat.Pdf) as PdfDocumentOptions;
            pdfOptions.DocumentType = PdfDocumentType.PdfA;
            pdfOptions.ImageOverText = true;
            docWriter1.SetOptions(DocumentFormat.Pdf, pdfOptions);

            var htmlOptions = docWriter1.GetOptions(DocumentFormat.Html) as HtmlDocumentOptions;
            htmlOptions.DocumentType = HtmlDocumentType.IENetscape;
            htmlOptions.UseBackgroundColor = true;
            htmlOptions.BackgroundColor = RasterColor.FromKnownColor(RasterKnownColor.LightBlue);
            docWriter1.SetOptions(DocumentFormat.Html, htmlOptions);

            // Show the options again
            ShowMyOptions("New options for docWriter1", docWriter1);

            // Save these options to the stream
            docWriter1.SaveOptions(stream);
            // Reset the stream back to its original position
            stream.Position = 0;

            // Create a new DocumentWriter object
            var docWriter2 = new DocumentWriter();

            // Show its options, should be the defaults
            ShowMyOptions("Default options for docWriter2", docWriter2);

            // Load the options from the memory to this object
            docWriter2.LoadOptions(stream);

            // Show the options now, should be the saved ones
            ShowMyOptions("Options for docWriter2 after loading from the XML file", docWriter2);
         }
      }

      private void ShowMyOptions(string message, DocumentWriter docWriter)
      {
         Console.WriteLine(message);

         var pdfOptions = docWriter.GetOptions(DocumentFormat.Pdf) as PdfDocumentOptions;
         Console.WriteLine("  PDF options: ");
         Console.WriteLine("    DocumentType:  " + pdfOptions.DocumentType);
         Console.WriteLine("    FontEmbedMode: " + pdfOptions.FontEmbedMode);
         Console.WriteLine("    ImageOverText: " + pdfOptions.ImageOverText);

         var htmlOptions = docWriter.GetOptions(DocumentFormat.Html) as HtmlDocumentOptions;
         Console.WriteLine("  HTML options: ");
         Console.WriteLine("    DocumentType:       " + htmlOptions.DocumentType);
         Console.WriteLine("    FontEmbedMode:      " + htmlOptions.FontEmbedMode);
         Console.WriteLine("    UseBackgroundColor: " + htmlOptions.UseBackgroundColor);
         Console.WriteLine("    BackgroundColor:    " + htmlOptions.BackgroundColor);
         Console.WriteLine("-------------------------");
      }</code>
      </example>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.DocumentWriters.DocumentPage" />
      <seealso cref="T:Leadtools.Forms.DocumentWriters.DocumentFormat" />
      <seealso cref="T:FT.Topics.ProgrammingWithDocumentWriters">Programming with LEADTOOLS Document Writers</seealso>
      <seealso cref="T:Leadtools.Topics.FilesToBeIncludedWithYourApplication">Files to be Included with Your Application</seealso>
      <seealso cref="T:Leadtools.Topics.UnlockingSpecialLEADFeatures">Unlocking Special LEAD Features</seealso>
    </member>
    <member name="M:Leadtools.Forms.DocumentWriters.DocumentWriter.BeginDocument(System.String,Leadtools.Forms.DocumentWriters.DocumentFormat)">
      <summary>Creates a new document and prepares it for the new pages to be added. <a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
      <param name="fileName">The name of new document file.</param>
      <param name="format">The format of the new document.</param>
      <remarks>
        <para>The <see cref="T:Leadtools.Forms.DocumentWriters.DocumentWriter" /> class is used to create multi-page and searchable documents from one or more SVG, EMF or raster image based pages as follows:</para>
        <list type="number">
          <item>
            <description>
              <see cref="M:Leadtools.Forms.DocumentWriters.DocumentWriter.BeginDocument(System.String,Leadtools.Forms.DocumentWriters.DocumentFormat)">DocumentWriter.BeginDocument</see>
            </description>
          </item>
          <item>
            <description>
              <see cref="M:Leadtools.Forms.DocumentWriters.DocumentWriter.AddPage(Leadtools.Forms.DocumentWriters.DocumentPage)">DocumentWriter.AddPage</see> or <see cref="M:Leadtools.Forms.DocumentWriters.DocumentWriter.InsertPage(Leadtools.Forms.DocumentWriters.DocumentPage,System.Int32)">DocumentWriter.InsertPage&gt;</see></description>
          </item>
          <item>
            <description>
              <see cref="M:Leadtools.Forms.DocumentWriters.DocumentWriter.EndDocument">DocumentWriter.EndDocument</see>
            </description>
          </item>
          <item>
            <description>
              <see cref="M:Leadtools.Forms.DocumentWriters.DocumentWriter.Convert(System.String,System.String,Leadtools.Forms.DocumentWriters.DocumentFormat)">DocumentWriter.Convert</see>
            </description>
          </item>
        </list>
        <para>Refer to <see cref="T:FT.Topics.ProgrammingWithDocumentWriters">LEADTOOLS Document Writers</see> for more
            information.</para>
        <para>Support for various popular formats is included, such as PDF, DOC/DOCX, XPS, HTML, RTF or Text. For a list of all the document formats supported, refer to the
            <see cref="T:Leadtools.Forms.DocumentWriters.DocumentFormat" /> enumeration.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.DocumentWriters.DocumentWriter" />.</example>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.DocumentWriters.DocumentPage" />
      <seealso cref="T:Leadtools.Forms.DocumentWriters.DocumentFormat" />
      <seealso cref="T:FT.Topics.ProgrammingWithDocumentWriters">Programming with LEADTOOLS Document Writers</seealso>
      <seealso cref="T:Leadtools.Topics.FilesToBeIncludedWithYourApplication">Files to be Included with Your Application</seealso>
      <seealso cref="T:Leadtools.Topics.UnlockingSpecialLEADFeatures">Unlocking Special LEAD Features</seealso>
    </member>
    <member name="M:Leadtools.Forms.DocumentWriters.DocumentWriter.AddPage(Leadtools.Forms.DocumentWriters.DocumentPage)">
      <summary>Adds a new page to current document being created. <a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
      <param name="page">The new page properties</param>
      <remarks>
        <para>This method can be called multiple times for each page to be added to the new document. To create a new document and on information on how to use the <see cref="T:Leadtools.Forms.DocumentWriters.DocumentWriter" />
            class, Refer to <see cref="T:FT.Topics.ProgrammingWithDocumentWriters">LEADTOOLS Document Writers</see> for more
            information.</para>
        <para>Depending on the type of the page, the <see cref="P:Leadtools.Forms.DocumentWriters.DocumentSvgPage.SvgDocument" />, <see cref="P:Leadtools.Forms.DocumentWriters.DocumentEmfPage.EmfHandle">DocumentEmfPage.EmfHandle</see>
            or <see cref="P:Leadtools.Forms.DocumentWriters.DocumentRasterPage.Image">DocumentRasterPage.Image</see> property of the <paramref name="page" /> parameter must contain a
            valid object. The <see cref="P:Leadtools.Forms.DocumentWriters.DocumentSvgPage.Image">DocumentSvgPage.Image</see>, <see cref="P:Leadtools.Forms.DocumentWriters.DocumentEmfPage.Image">DocumentEmfPage.Image</see>
            property is optional and is used only when the document being created is PDF with the Image/Text overlay option. To create a PDF
            document with image/text overlay, perform the following steps:
            <list type="bullet"><item><description>Set the value of the <see cref="P:Leadtools.Forms.DocumentWriters.PdfDocumentOptions.ImageOverText">PdfDocumentOptions.ImageOverText</see> to <strong>true</strong>. You can use the
            <see cref="M:Leadtools.Forms.DocumentWriters.DocumentWriter.GetOptions(Leadtools.Forms.DocumentWriters.DocumentFormat)" /> and <see cref="M:Leadtools.Forms.DocumentWriters.DocumentWriter.SetOptions(Leadtools.Forms.DocumentWriters.DocumentFormat,Leadtools.Forms.DocumentWriters.DocumentOptions)" /> methods to the get the options used when saving a PDF document.</description></item><item><description>Call <see cref="M:Leadtools.Forms.DocumentWriters.DocumentWriter.BeginDocument(System.String,Leadtools.Forms.DocumentWriters.DocumentFormat)" /> with <see cref="T:Leadtools.Forms.DocumentWriters.DocumentFormat">DocumentFormat.Pdf</see> as the format to use.</description></item><item><description>Add the document pages, the <see cref="P:Leadtools.Forms.DocumentWriters.DocumentSvgPage.SvgDocument">DocumentSvgPage.SvgDocument</see> or
              <see cref="P:Leadtools.Forms.DocumentWriters.DocumentEmfPage.EmfHandle">DocumentEmfPage.EmfHandle</see> property must point to the SVG or EMF representation of the page respectively
            and the <see cref="P:Leadtools.Forms.DocumentWriters.DocumentSvgPage.Image">DocumentSvgPage.Image</see> or <see cref="P:Leadtools.Forms.DocumentWriters.DocumentEmfPage.Image">DocumentEmfPage.Image</see> must contain
            a <see cref="T:Leadtools.RasterImage" /> object for the image to be used as the overlay for the page.</description></item><item><description>Repeat for each page in the document.</description></item><item><description>Call <see cref="M:Leadtools.Forms.DocumentWriters.DocumentWriter.EndDocument" /> to finish creating the document file on disk.</description></item></list></para>
        <para>
          <see cref="M:Leadtools.Forms.DocumentWriters.DocumentWriter.AddPage(Leadtools.Forms.DocumentWriters.DocumentPage)" /> will append the new page at the end of the document. To insert a page at a random place in the document, use <see cref="M:Leadtools.Forms.DocumentWriters.DocumentWriter.InsertPage(Leadtools.Forms.DocumentWriters.DocumentPage,System.Int32)" />.
            Note that <see cref="M:Leadtools.Forms.DocumentWriters.DocumentWriter.InsertPage(Leadtools.Forms.DocumentWriters.DocumentPage,System.Int32)" /> is only supported if the was crated using the <see cref="T:Leadtools.Forms.DocumentWriters.DocumentFormat">DocumentFormat.Ltd</see> format.</para>
        <para>For more information, refer to <see cref="T:Leadtools.Forms.DocumentWriters.PdfDocumentOptions" />.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.DocumentWriters.DocumentWriter" />.</example>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.DocumentWriters.DocumentPage" />
      <seealso cref="T:Leadtools.Forms.DocumentWriters.DocumentFormat" />
      <seealso cref="T:FT.Topics.ProgrammingWithDocumentWriters">Programming with LEADTOOLS Document Writers</seealso>
      <seealso cref="T:Leadtools.Topics.FilesToBeIncludedWithYourApplication">Files to be Included with Your Application</seealso>
      <seealso cref="T:Leadtools.Topics.UnlockingSpecialLEADFeatures">Unlocking Special LEAD Features</seealso>
    </member>
    <member name="M:Leadtools.Forms.DocumentWriters.DocumentWriter.InsertPage(Leadtools.Forms.DocumentWriters.DocumentPage,System.Int32)">
      <summary>Inserts a new page to current document being created. <a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
      <param name="page">The new page properties</param>
      <param name="pageNumber">1-based number of <paramref name="page" />.</param>
      <remarks>
        <para>
          <see cref="M:Leadtools.Forms.DocumentWriters.DocumentWriter.AddPage(Leadtools.Forms.DocumentWriters.DocumentPage)" /> will append the new page at the end of the document. To insert a page at a random place in the document, use <see cref="M:Leadtools.Forms.DocumentWriters.DocumentWriter.InsertPage(Leadtools.Forms.DocumentWriters.DocumentPage,System.Int32)" />.
            Note that <see cref="M:Leadtools.Forms.DocumentWriters.DocumentWriter.InsertPage(Leadtools.Forms.DocumentWriters.DocumentPage,System.Int32)" /> is only supported if the was crated using the <see cref="T:Leadtools.Forms.DocumentWriters.DocumentFormat">DocumentFormat.Ltd</see> format.</para>
        <para>This method can be called multiple times for each page to be added to the new document. To create a new document and on information on how to use the <see cref="T:Leadtools.Forms.DocumentWriters.DocumentWriter" />
            class, Refer to <see cref="T:FT.Topics.ProgrammingWithDocumentWriters">LEADTOOLS Document Writers</see> for more
            information.</para>
        <para>Depending on the type of the page, the <see cref="P:Leadtools.Forms.DocumentWriters.DocumentSvgPage.SvgDocument" />, <see cref="P:Leadtools.Forms.DocumentWriters.DocumentEmfPage.EmfHandle">DocumentEmfPage.EmfHandle</see>
            or <see cref="P:Leadtools.Forms.DocumentWriters.DocumentRasterPage.Image">DocumentRasterPage.Image</see> property of the <paramref name="page" /> parameter must contain a
            valid object.</para>
      </remarks>
      <noexample />
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.DocumentWriters.DocumentPage" />
      <seealso cref="T:Leadtools.Forms.DocumentWriters.DocumentFormat" />
      <seealso cref="T:FT.Topics.ProgrammingWithDocumentWriters">Programming with LEADTOOLS Document Writers</seealso>
      <seealso cref="T:Leadtools.Topics.FilesToBeIncludedWithYourApplication">Files to be Included with Your Application</seealso>
      <seealso cref="T:Leadtools.Topics.UnlockingSpecialLEADFeatures">Unlocking Special LEAD Features</seealso>
    </member>
    <member name="M:Leadtools.Forms.DocumentWriters.DocumentWriter.EndDocument">
      <summary>Finalize the document being created on disk. <a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
      <remarks>
        <para>This method should be called after all the pages has been added to a new document. Use <see cref="M:Leadtools.Forms.DocumentWriters.DocumentWriter.BeginDocument(System.String,Leadtools.Forms.DocumentWriters.DocumentFormat)" /> to create a new document and use <see cref="M:Leadtools.Forms.DocumentWriters.DocumentWriter.AddPage(Leadtools.Forms.DocumentWriters.DocumentPage)" />
            for each page to be added to the document.</para>
        <para>For more information on how to use the <see cref="T:Leadtools.Forms.DocumentWriters.DocumentWriter" /> class to create new documents, refer to <see cref="M:Leadtools.Forms.DocumentWriters.DocumentWriter.BeginDocument(System.String,Leadtools.Forms.DocumentWriters.DocumentFormat)" />.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.DocumentWriters.DocumentWriter" />.</example>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.DocumentWriters.DocumentPage" />
      <seealso cref="T:Leadtools.Forms.DocumentWriters.DocumentFormat" />
      <seealso cref="T:FT.Topics.ProgrammingWithDocumentWriters">Programming with LEADTOOLS Document Writers</seealso>
      <seealso cref="T:Leadtools.Topics.FilesToBeIncludedWithYourApplication">Files to be Included with Your Application</seealso>
      <seealso cref="T:Leadtools.Topics.UnlockingSpecialLEADFeatures">Unlocking Special LEAD Features</seealso>
    </member>
    <member name="M:Leadtools.Forms.DocumentWriters.DocumentWriter.Convert(System.String,System.String,Leadtools.Forms.DocumentWriters.DocumentFormat)">
      <summary>Converts a document from the LEADTOOLS Temporary Document format to any of the formats supported by the LEADTOOLS Document Writer. <a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="WinRTicon.png" class="WinRTIconTag" name="WinRTIconTag" title="WinRT support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="winrtphone.png" class="WinRTPhoneIconTag" name="WinRTPhoneIconTag" title="WinRT Phone support" border="0" /></a></summary>
      <param name="ltdFileName">The name of an existing LEADTOOLS Temporary Document Format file on disk.</param>
      <param name="outputFileName">The name of the converted document file to be created.</param>
      <param name="format">The format of the converted document file to be created. This parameter cannot be <see cref="T:Leadtools.Forms.DocumentWriters.DocumentFormat">DocumentFormat.Ltd</see>.</param>
      <remarks>
        <para>Use the <see cref="M:Leadtools.Forms.DocumentWriters.DocumentWriter.Convert(System.String,System.String,Leadtools.Forms.DocumentWriters.DocumentFormat)" /> method to convert a file created with the proprietary <see cref="T:Leadtools.Forms.DocumentWriters.DocumentFormat">DocumentFormat.Ltd</see> to any of the other popular formats
            supported by the LEADTOOLS Document Writers.</para>
        <para>The LEADTOOLS Temporary Document format (LTD) was created to support adding a large number of pages to a document in one or more sessions. The file created on disk is 
            proprietary is is intended to be converted after all the pages are collected to the final desired format such as PDF, DOC or HTML.</para>
        <para>You can also use the <see cref="M:Leadtools.Forms.DocumentWriters.DocumentWriter.AppendLtd(System.String,System.String)">DocumentWriter.AppendLtd</see> method to append pages from one LTD file to another.</para>
        <para>For more information, refer to <see cref="T:Leadtools.Forms.DocumentWriters.DocumentFormat">DocumentFormat.Ltd</see>.</para>
        <para>For more information on creating a document using the LEADTOOLS Document Writer, refer to <see cref="M:Leadtools.Forms.DocumentWriters.DocumentWriter.BeginDocument(System.String,Leadtools.Forms.DocumentWriters.DocumentFormat)" />.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.DocumentWriters.DocumentWriter" />.</example>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.DocumentWriters.DocumentPage" />
      <seealso cref="T:Leadtools.Forms.DocumentWriters.DocumentFormat" />
      <seealso cref="T:FT.Topics.ProgrammingWithDocumentWriters">Programming with LEADTOOLS Document Writers</seealso>
      <seealso cref="T:Leadtools.Topics.FilesToBeIncludedWithYourApplication">Files to be Included with Your Application</seealso>
      <seealso cref="T:Leadtools.Topics.UnlockingSpecialLEADFeatures">Unlocking Special LEAD Features</seealso>
    </member>
    <member name="M:Leadtools.Forms.DocumentWriters.DocumentWriter.AppendLtd(System.String,System.String)">
      <summary>Appends one LEADTOOLS Temporary Document (LTD) file to another. <a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
      <param name="sourceFileName">The source LTD file.</param>
      <param name="destFileName">The destination LTD file.</param>
      <remarks>
        <para>
          <para>You can use this method to append several LTD files together before calling <see cref="M:Leadtools.Forms.DocumentWriters.DocumentWriter.Convert(System.String,System.String,Leadtools.Forms.DocumentWriters.DocumentFormat)" />. The example below shows how this can
            be useful in a multi-threading OCR solution.</para>
        </para>
        <para>
          <paramref name="sourceFileName" /> must exist on disk before calling this method, otherwise, an exception will be thrown.</para>
        <para>
          <paramref name="destFileName" /> may or may not exit prior to calling this method, if it does not exist, a new file is created and the
            data is copied as is from the source file.</para>
        <para>When this method returns, <paramref name="destFileName" /> will contain all the pages from the source and destination file (if exists), for example
            if the source file has 10 pages and the destination file has 20 pages, the result will be an LTD with 30 pages in <paramref name="destFileName" /> with
            the 10 pages from the source file appended to the end of the destination file at page index 20, 21, 22, etc.</para>
        <para>The source file name is never changed by this method.</para>
      </remarks>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.DocumentWriters.DocumentPage" />
      <seealso cref="T:Leadtools.Forms.DocumentWriters.DocumentFormat" />
      <seealso cref="T:FT.Topics.ProgrammingWithDocumentWriters">Programming with LEADTOOLS Document Writers</seealso>
      <seealso cref="T:Leadtools.Topics.FilesToBeIncludedWithYourApplication">Files to be Included with Your Application</seealso>
      <seealso cref="T:Leadtools.Topics.UnlockingSpecialLEADFeatures">Unlocking Special LEAD Features</seealso>
      <example>
        <p>
          <para>This example will show how to use multiple threads to speed up OCR recognition of a multi-page image file. This example shows
            part of internal functionality already achieved with the <see cref="T:Leadtools.Forms.Ocr.IOcrAutoRecognizeManager" /> class.</para>
        </p>
        <code lang="VB">      Imports Leadtools
      Imports Leadtools.Codecs
      Imports Leadtools.Forms.DocumentWriters
      Imports Leadtools.Forms.Ocr

      &lt;TestMethod&gt; _
      Public Sub AppendLtdExample()
         ' Get a multi-page source file
         Dim inputFileName As String = GetImageFileName()
         Dim outputFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "AppendLtdExample.pdf")
         ' This is the LTD file we will use to append all recognition data
         Dim mainLtdFileName As String = Path.GetTempFileName()

         If (File.Exists(outputFileName)) Then File.Delete(outputFileName)

         If (File.Exists(mainLtdFileName)) Then File.Delete(mainLtdFileName)

         ' Use OCR Advantage engine
         Using ocrEngine As IOcrEngine = OcrEngineManager.CreateEngine(OcrEngineType.Advantage, False)
            ocrEngine.Startup(Nothing, Nothing, Nothing, LEAD_VARS.OcrAdvantageRuntimeDir)

            ' We can re-use LTD files, so create one
            Dim pageLtdFileName As String = Path.GetTempFileName()

            ' Get number of pages
            Dim pageCount As Integer = ocrEngine.RasterCodecsInstance.GetTotalPages(inputFileName)
            For pageNumber As Integer = 1 To pageCount
               ' OCR this page and save it as LTD
               Console.WriteLine("Processing page {0} of {1}", pageNumber, pageCount)
               RecognizeAndSaveLtd(ocrEngine, inputFileName, pageNumber, pageLtdFileName)

               ' Append this LTD to the main one
               ' Notice, first time, the main LTD does not exist, AppendLtd will
               ' just copy the data over from the source file
               ocrEngine.DocumentWriterInstance.AppendLtd(pageLtdFileName, mainLtdFileName)
            Next

            ' No need for this anymore
            File.Delete(pageLtdFileName)

            ' We are done, convert the LTD to final format, here, we will
            ' use PDF
            Console.WriteLine("Converting to final format")
            ocrEngine.DocumentWriterInstance.Convert(mainLtdFileName, outputFileName, DocumentFormat.Pdf)
         End Using

         Console.WriteLine("Success, file {0} is created", outputFileName)
      End Sub

      Private Shared Sub RecognizeAndSaveLtd(ocrEngine As IOcrEngine, inputFileName As String, pageNumber As Integer, pageLtdFileName As String)
         ' Delete the LTD file if it exists so we can put fresh data in it
         If (File.Exists(pageLtdFileName)) Then File.Delete(pageLtdFileName)

         ' Create an OCR document
         Using ocrDocument As IOcrDocument = ocrEngine.DocumentManager.CreateDocument()
            ' Load the page
            Console.WriteLine("  Loading the page")
            ocrDocument.Pages.AddPages(inputFileName, pageNumber, pageNumber, Nothing)

            Dim ocrPage As IOcrPage = ocrDocument.Pages(0)

            ' Auto-zone it
            Console.WriteLine("  Auto-zoning the page")
            ocrPage.AutoZone(Nothing)

            ' Recognize it
            Console.WriteLine("  Recognizing the page")
            ocrPage.Recognize(Nothing)

            ' Save it
            Console.WriteLine("  Saving the page")
            ocrDocument.Save(pageLtdFileName, DocumentFormat.Ltd, Nothing)
         End Using
      End Sub

      Private Shared Function GetImageFileName() As String
         Dim pageTileTemplate As String = Path.Combine(LEAD_VARS.ImagesDir, "Ocr{0}.tif")
         Dim multiPageImageFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "AppendLtdExample.tif")

         If File.Exists(multiPageImageFileName) Then File.Delete(multiPageImageFileName)

         ' Create a multi-page TIF file by stitching OCR1 to OCR4.tif shipped with LEADTOOLS
         Using codecs As New RasterCodecs()
            Dim finalImage As RasterImage = Nothing

            For page As Integer = 1 To 4
               Dim pageImage As RasterImage = codecs.Load(String.Format(pageTileTemplate, page))
               If IsNothing(finalImage) Then
                  finalImage = pageImage
               Else
                  finalImage.AddPage(pageImage)
                  pageImage.Dispose()
               End If
            Next

            ' Save the final image
            codecs.Save(finalImage, multiPageImageFileName, RasterImageFormat.CcittGroup4, 1)
         End Using

         Return multiPageImageFileName
      End Function

      Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
      Public Const OcrAdvantageRuntimeDir As String = "C:\LEADTOOLS 19\Bin\Common\OcrAdvantageRuntime"
      End Class
</code>
        <code lang="CS">      using Leadtools;
      using Leadtools.Codecs;
      using Leadtools.Forms.DocumentWriters;
      using Leadtools.Forms.Ocr;

      public void AppendLtdExample()
      {
         // Get a multi-page source file
         var inputFileName = GetImageFileName();
         var outputFileName = Path.Combine(LEAD_VARS.ImagesDir, "AppendLtdExample.pdf");
         // This is the LTD file we will use to append all recognition data
         string mainLtdFileName = Path.GetTempFileName();

         if (File.Exists(outputFileName))
            File.Delete(outputFileName);

         if (File.Exists(mainLtdFileName))
            File.Delete(mainLtdFileName);

         // Use OCR Advantage engine
         using (var ocrEngine = OcrEngineManager.CreateEngine(OcrEngineType.Advantage, false))
         {
            ocrEngine.Startup(null, null, null, LEAD_VARS.OcrAdvantageRuntimeDir);

            // We can re-use LTD files, so create one
            var pageLtdFileName = Path.GetTempFileName();

            // Get number of pages
            var pageCount = ocrEngine.RasterCodecsInstance.GetTotalPages(inputFileName);
            for (var pageNumber = 1; pageNumber &lt;= pageCount; pageNumber++)
            {
               // OCR this page and save it as LTD
               Console.WriteLine("Processing page {0} of {1}", pageNumber, pageCount);
               RecognizeAndSaveLtd(ocrEngine, inputFileName, pageNumber, pageLtdFileName);

               // Append this LTD to the main one
               // Notice, first time, the main LTD does not exist, AppendLtd will
               // just copy the data over from the source file
               ocrEngine.DocumentWriterInstance.AppendLtd(pageLtdFileName, mainLtdFileName);
            }

            // No need for this anymore
            File.Delete(pageLtdFileName);

            // We are done, convert the LTD to final format, here, we will
            // use PDF
            Console.WriteLine("Converting to final format");
            ocrEngine.DocumentWriterInstance.Convert(mainLtdFileName, outputFileName, DocumentFormat.Pdf);
         }

         Console.WriteLine("Success, file {0} is created", outputFileName);
      }

      private static void RecognizeAndSaveLtd(IOcrEngine ocrEngine, string inputFileName, int pageNumber, string pageLtdFileName)
      {
         // Delete the LTD file if it exists so we can put fresh data in it
         if (File.Exists(pageLtdFileName))
            File.Delete(pageLtdFileName);

         // Create an OCR document
         using (var ocrDocument = ocrEngine.DocumentManager.CreateDocument())
         {
            // Load the page
            Console.WriteLine("  Loading the page");
            ocrDocument.Pages.AddPages(inputFileName, pageNumber, pageNumber, null);

            var ocrPage = ocrDocument.Pages[0];

            // Auto-zone it
            Console.WriteLine("  Auto-zoning the page");
            ocrPage.AutoZone(null);

            // Recognize it
            Console.WriteLine("  Recognizing the page");
            ocrPage.Recognize(null);

            // Save it
            Console.WriteLine("  Saving the page");
            ocrDocument.Save(pageLtdFileName, DocumentFormat.Ltd, null);
         }
      }

      private static string GetImageFileName()
      {
         var pageTileTemplate = Path.Combine(LEAD_VARS.ImagesDir, "Ocr{0}.tif");
         var multiPageImageFileName = Path.Combine(LEAD_VARS.ImagesDir, "AppendLtdExample.tif");

         if (File.Exists(multiPageImageFileName))
            File.Delete(multiPageImageFileName);

         // Create a multi-page TIF file by stitching OCR1 to OCR4.tif shipped with LEADTOOLS
         using (var codecs = new RasterCodecs())
         {
            RasterImage finalImage = null;

            for (int page = 1; page &lt;= 4; page++)
            {
               var pageImage = codecs.Load(string.Format(pageTileTemplate, page));
               if (finalImage == null)
               {
                  finalImage = pageImage;
               }
               else
               {
                  finalImage.AddPage(pageImage);
                  pageImage.Dispose();
               }
            }

            // Save the final image
            codecs.Save(finalImage, multiPageImageFileName, RasterImageFormat.CcittGroup4, 1);
         }

         return multiPageImageFileName;
      }

      static class LEAD_VARS
      {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
      public const string OcrAdvantageRuntimeDir = @"C:\LEADTOOLS 19\Bin\Common\OcrAdvantageRuntime";
      }
</code>
      </example>
    </member>
    <member name="M:Leadtools.Forms.DocumentWriters.DocumentWriter.UpdateMetaFileResolution(System.IntPtr,System.Int32,System.Int32)">
      <summary>Changes the resolution of an existing Windows Enhanced Metafile (EMF). <a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
      <param name="emfHandle">Handle to the source EMF</param>
      <param name="xResolution">New horizontal resolution</param>
      <param name="yResolution">New vertical resolution</param>
      <returns>A handle to the modified Windows Enhanced Metafile (EMF).</returns>
      <remarks>
        <para>This method is especially helpful in case you use the <strong>CreateEnhMetaFile</strong> Windows API when generating the EMF handle.
            For example, requirement is to create an EMF with 8.5 by 11 inches at 300 DPI. With CreateEnhMetaFile, the resolution of the generated EMF
            is the same as the resolution of the reference HDC. Since it is impractical to find an HDC with resolution equal to the desired one, you
            can use <see cref="M:Leadtools.Forms.DocumentWriters.DocumentWriter.UpdateMetaFileResolution(System.IntPtr,System.Int32,System.Int32)" /> to accomplish this. Here is an example:</para>
        <para>
          <pre>
            <code lang="C#">
            const int resolution = 300;
            // Calculate the width in pixels:
            int widthInPixels = (int)(8.5 * resolution);
            int heightInPixels = (int)(11.0 * resolution);
            Win32.RECT rc = new Win32.RECT();
            rc.left = 0;
            rc.top = 0;
            rc.right = widthInPixels;
            rc.bottom = heightInPixels;
            IntPtr hdc = Win32.CreateEnhMetaFile(IntPtr.Zero, IntPtr.Zero, rc, IntPtr.Zero);
            IntPtr hEmfTemp = Win32.CloseEnhMetaFile(hdc);
            // hEmfTemp has the same resolution as the screen, change it to the desired one
            IntPtr hEmf;
            hEmf = DocumentWriter.UpdateMetaFileResolution(hEmfTemp, resolution, resolution);
            Win32.DeleteEnhMetaFile(hEmfTemp);
            // hEmf now is 8.5 by 11 at 300
            </code>
          </pre>
        </para>
        <para> If xResolution or yResolution is 0, then the original resolution of the EMF handle will be used.
            If either xResolution or yResolution is equal to -1, then the aspect ratio for original EMF handle will be
            maintained and the positive value for either xResolution or yResolution will be used as the resolution (DPI)
            value for the modified emf handle.</para>
        <para>Note that xResolution and yResolution cannot be both less than zero.</para>
      </remarks>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.DocumentWriters.DocumentWriter" />
      <seealso cref="T:Leadtools.Forms.DocumentWriters.DocumentFormat" />
      <seealso cref="T:FT.Topics.ProgrammingWithDocumentWriters">Programming with LEADTOOLS Document Writers</seealso>
      <seealso cref="T:Leadtools.Topics.FilesToBeIncludedWithYourApplication">Files to be Included with Your Application</seealso>
      <seealso cref="T:Leadtools.Topics.UnlockingSpecialLEADFeatures">Unlocking Special LEAD Features</seealso>
      <example>
        <p>
          <para>This example will load an Enhanced Metafile from disk and then change its resolution to 200 by 200 dots per inch.</para>
        </p>
        <code lang="VB">      Imports Leadtools
      Imports Leadtools.Codecs
      Imports Leadtools.Forms.DocumentWriters
      Imports Leadtools.Forms.Ocr

      Private Shared Sub ShowMetaFileDimension(hemf As IntPtr)
         ' Use System.Drawing.Imaging.Metafile to load the EMF and get its information
         Using metafile As New System.Drawing.Imaging.Metafile(hemf, False)
            Console.WriteLine("Size: {0} by {1} pixels", metafile.Width, metafile.Height)
            Console.WriteLine("Resolution: {0} by {1} pixels/inch", metafile.HorizontalResolution, metafile.VerticalResolution)
         End Using
      End Sub
      '''/ Windows API
      &lt;DllImport("gdi32")&gt; _
      Private Shared Function GetEnhMetaFile(lpszMetaFile As String) As IntPtr
      End Function
      &lt;DllImport("gdi32")&gt; _
      Private Shared Function DeleteEnhMetaFile(hemf As IntPtr) As Integer
      End Function

      &lt;TestMethod&gt; _
      Public Sub ChangeMetaFileResolutionExample()
         ' Load the original meta file
         Dim hemf As IntPtr = GetEnhMetaFile(Path.Combine(LEAD_VARS.ImagesDir, "Ocr1.emf"))

         ' Show the dimension
         Console.WriteLine("Original EMF dimension:")
         ShowMetaFileDimension(hemf)

         ' Change the resolution to be 200 by 200 dots/inch
         Dim hemfDest As IntPtr = DocumentWriter.UpdateMetaFileResolution(hemf, 200, 200)

         ' No need for the original handle anymore
         DeleteEnhMetaFile(hemf)

         Console.WriteLine("New EMF dimension:")
         ShowMetaFileDimension(hemfDest)

         DeleteEnhMetaFile(hemfDest)
      End Sub</code>
        <code lang="CS">      using Leadtools;
      using Leadtools.Codecs;
      using Leadtools.Forms.DocumentWriters;
      using Leadtools.Forms.Ocr;

      private static void ShowMetaFileDimension(IntPtr hemf)
      {
         // Use System.Drawing.Imaging.Metafile to load the EMF and get its information
         using (var metafile = new System.Drawing.Imaging.Metafile(hemf, false))
         {
            Console.WriteLine("Size: {0} by {1} pixels", metafile.Width, metafile.Height);
            Console.WriteLine("Resolution: {0} by {1} pixels/inch", metafile.HorizontalResolution, metafile.VerticalResolution);
         }
      }
      //// Windows API
      [DllImport("gdi32")]
      private extern static IntPtr GetEnhMetaFile(string lpszMetaFile);
      [DllImport("gdi32")]
      private extern static int DeleteEnhMetaFile(IntPtr hemf);

      [TestMethod]
      public void ChangeMetaFileResolutionExample()
      {
         // Load the original meta file
         var hemf = GetEnhMetaFile(Path.Combine(LEAD_VARS.ImagesDir, "Ocr1.emf"));

         // Show the dimension
         Console.WriteLine("Original EMF dimension:");
         ShowMetaFileDimension(hemf);

         // Change the resolution to be 200 by 200 dots/inch
         var hemfDest = DocumentWriter.UpdateMetaFileResolution(hemf, 200, 200);

         // No need for the original handle anymore
         DeleteEnhMetaFile(hemf);

         Console.WriteLine("New EMF dimension:");
         ShowMetaFileDimension(hemfDest);

         DeleteEnhMetaFile(hemfDest);
      }</code>
      </example>
      <keywords>EMF|Document Writers|Document Writers,EMF</keywords>
    </member>
    <member name="E:Leadtools.Forms.DocumentWriters.DocumentWriter.Progress">
      <summary>Document writer progress notification event. <a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="WinRTicon.png" class="WinRTIconTag" name="WinRTIconTag" title="WinRT support" border="0" /></a></summary>
      <event>Reports the progress of the current operation in this <see cref="T:Leadtools.Forms.DocumentWriters.DocumentWriter" /> object and offers the client an opportunity to abort.</event>
      <remarks>
        <para>The <see cref="E:Leadtools.Forms.DocumentWriters.DocumentWriter.Progress" /> event allows you to monitor the progress of a document writer operation as well as cancel
            the operation if required. This event occur when calling the following methods of the <see cref="T:Leadtools.Forms.DocumentWriters.DocumentWriter" /> class:
            <ul><li><see cref="M:Leadtools.Forms.DocumentWriters.DocumentWriter.BeginDocument(System.String,Leadtools.Forms.DocumentWriters.DocumentFormat)">DocumentWriter.BeginDocument</see></li><li><see cref="M:Leadtools.Forms.DocumentWriters.DocumentWriter.AddPage(Leadtools.Forms.DocumentWriters.DocumentPage)">DocumentWriter.AddPage</see> or <see cref="M:Leadtools.Forms.DocumentWriters.DocumentWriter.InsertPage(Leadtools.Forms.DocumentWriters.DocumentPage,System.Int32)">DocumentWriter.InsertPage</see></li><li><see cref="M:Leadtools.Forms.DocumentWriters.DocumentWriter.EndDocument">DocumentWriter.EndDocument</see></li><li><see cref="M:Leadtools.Forms.DocumentWriters.DocumentWriter.Convert(System.String,System.String,Leadtools.Forms.DocumentWriters.DocumentFormat)">DocumentWriter.Convert</see></li></ul></para>
        <para>The <see cref="T:Leadtools.Forms.DocumentWriters.DocumentProgressEventArgs" /> class defines the data for the <see cref="E:Leadtools.Forms.DocumentWriters.DocumentWriter.Progress" /> event. It contains the following:
            <ul><li><see cref="P:Leadtools.Forms.DocumentWriters.DocumentProgressEventArgs.Percentage">DocumentProgressEventArgs.Percentage</see> property. The value of this property will go from
            0 to 100 during an operation. This property is read-only.</li><li><see cref="P:Leadtools.Forms.DocumentWriters.DocumentProgressEventArgs.Cancel">DocumentProgressEventArgs.Cancel</see> property. Setting The value of this property to <strong>true</strong> will
            cancel the current operation.</li></ul></para>
      </remarks>
      <example>
        <p>
          <para>This example will show how to use the <see cref="E:Leadtools.Forms.DocumentWriters.DocumentWriter.Progress" /> event to create a Windows Forms dialog box with a progress bar and a cancel button.</para>
        </p>
        <code lang="VB">      Imports Leadtools
      Imports Leadtools.Codecs
      Imports Leadtools.Forms.DocumentWriters

      &lt;TestMethod&gt; _
      Public Sub DocumentWriterProgressExample()
         ' Get the input and output file names to use
         Dim inputFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "Leadtools.docx")
         Dim outputFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "Example.pdf")
         ' Show the progress dialog
         Using dlg As New MyProgressDialog(inputFileName, outputFileName)
            If dlg.ShowDialog() = DialogResult.OK Then
               MessageBox.Show("Done!")
            Else
               MessageBox.Show("User has canceled the operation or an error occured.")
            End If
         End Using
      End Sub

      ' Dialog box to show the 
      Private Class MyProgressDialog
         Inherits Form
         ' Files
         Private _inputFileName As String
         Private _outputFileName As String

         ' The controls on the dialog
         Private _descriptionLabel As Label
         Private _progressBar As ProgressBar
         Private _cancelButton As Button

         ' Has the operation been canceled?
         Private _isCancelPending As Boolean
         ' Is the dialog working?
         Private _isWorking As Boolean

         Public Sub New(inputFileName As String, outputFileName As String)
            InitializeComponent()

            _inputFileName = inputFileName
            _outputFileName = outputFileName
            _isCancelPending = False
            _isWorking = True
         End Sub

         Protected Overrides Sub OnLoad(ByVal e As EventArgs)
            ' To keep the UI functioning, do the conversion in a separate thread
            BeginInvoke(New MethodInvoker(AddressOf DoWork))

            MyBase.OnLoad(e)
         End Sub

         Private Sub DoWork()
            Dim docWriter As DocumentWriter
            Dim operation As String = String.Empty

            Dim progressHandler As EventHandler(Of DocumentProgressEventArgs) = _
               Sub(sender As Object, e As DocumentProgressEventArgs)
                  ' Update the description label progress bar
                  _descriptionLabel.Text = operation
                  _progressBar.Value = e.Percentage

                  ' Check if the user clicked the Cancel button, if so, abort the operation
                  If (_isCancelPending) Then
                     e.Cancel = True
                  End If

                  Application.DoEvents()
               End Sub

            ' Get the number of pages
            Dim codecs As New RasterCodecs()
            codecs.Options.RasterizeDocument.Load.Resolution = 300
            Dim pageCount As Integer = codecs.GetTotalPages(_inputFileName)

            ' Create the document writer
            docWriter = New DocumentWriter()

            ' Create the document
            operation = "Creating the document..."

            ' Subscribe to the progress event
            AddHandler docWriter.Progress, progressHandler
            docWriter.BeginDocument(_outputFileName, DocumentFormat.Pdf)

            ' Add the pages
            For pageNumber As Integer = 1 To pageCount

               If _isCancelPending Then
                  Exit For
               End If

               ' Load the page as SVG
               Dim page As New DocumentSvgPage()
               page.SvgDocument = codecs.LoadSvg(_inputFileName, pageNumber, Nothing)

               ' Add the page, notice we will not be using image/text feature (the default)
               operation = String.Format("Adding page {0} of {1}...", pageNumber, pageCount)
               docWriter.AddPage(page)

               ' Delete the SVG
               page.SvgDocument.Dispose()
            Next

            ' Finally finish writing the PDF file on disk
            operation = "Finishing the document..."
            docWriter.EndDocument()

            ' Remove the progress handler
            RemoveHandler docWriter.Progress, progressHandler

            codecs.Dispose()

            ' Set the dialog results based on whether the user has canceled the operation
            If _isCancelPending Then
               DialogResult = DialogResult.Cancel
            Else
               DialogResult = DialogResult.OK
            End If

            ' The dialog can be closed now
            _isWorking = False

            ' We are done
            Close()
         End Sub

         Private Sub _cancelButton_Click(sender As Object, e As EventArgs)
            ' Set the isCanceled variable to true, this will break from the
            ' progress callback and closes the dialog
            _isCancelPending = True
         End Sub

         Protected Overrides Sub OnFormClosing(ByVal e As FormClosingEventArgs)
            ' Dont allow the form to close while the callback is still working
            ' Instead, cancel the operation
            If _isWorking Then
               e.Cancel = True
            End If

            MyBase.OnFormClosing(e)
         End Sub

         Private Sub InitializeComponent()
            ' Create the controls in this form, a text label, a progress bar and a cancel button
            SuspendLayout()

            ' Text label
            _descriptionLabel = New Label()
            _descriptionLabel.Location = New Point(26, 21)
            _descriptionLabel.Name = "_descriptionLabel"
            _descriptionLabel.Size = New Size(367, 23)
            _descriptionLabel.TabIndex = 0
            _descriptionLabel.TextAlign = ContentAlignment.MiddleLeft
            _descriptionLabel.Text = "Creating final document..."

            ' Progress bar
            _progressBar = New ProgressBar()
            _progressBar.Location = New Point(27, 47)
            _progressBar.Name = "_progressBar"
            _progressBar.Size = New Size(364, 23)
            _progressBar.TabIndex = 1

            ' Cancel button
            _cancelButton = New Button()
            _cancelButton.DialogResult = DialogResult.Cancel
            _cancelButton.Location = New Point(172, 76)
            _cancelButton.Name = "_cancelButton"
            _cancelButton.Size = New Size(75, 23)
            _cancelButton.TabIndex = 2
            _cancelButton.Text = "Cancel"
            _cancelButton.UseVisualStyleBackColor = True
            AddHandler _cancelButton.Click, AddressOf _cancelButton_Click

            ' Add the controls
            Controls.Add(_descriptionLabel)
            Controls.Add(_progressBar)
            Controls.Add(_cancelButton)

            ' Initialize the dialog
            AutoScaleDimensions = New SizeF(6.0F, 13.0F)
            AutoScaleMode = AutoScaleMode.Font
            CancelButton = _cancelButton
            ClientSize = New Size(420, 118)
            FormBorderStyle = FormBorderStyle.FixedDialog
            MaximizeBox = False
            MinimizeBox = False
            Name = "MyProgressDialog"
            ShowInTaskbar = False
            StartPosition = FormStartPosition.CenterParent
            Text = "DocumentWriter Progress Example"

            ResumeLayout()
         End Sub
      End Class</code>
        <code lang="CS">      using Leadtools;
      using Leadtools.Codecs;
      using Leadtools.Forms.DocumentWriters;

      public void DocumentWriterProgressExample()
      {
         // Get the input and output file names to use
         var inputFileName = Path.Combine(LEAD_VARS.ImagesDir, "Leadtools.docx");
         var outputFileName = Path.Combine(LEAD_VARS.ImagesDir, "Example.pdf");
         // Show the progress dialog
         using (var dlg = new MyProgressDialog(inputFileName, outputFileName))
         {
            if (dlg.ShowDialog() == DialogResult.OK)
               MessageBox.Show("Done!");
            else
               MessageBox.Show("User has canceled the operation or an error occured.");
         }
      }

      // Dialog box to show the 
      private class MyProgressDialog : Form
      {
         // Files
         private string _inputFileName;
         private string _outputFileName;

         // The controls on the dialog
         private Label _descriptionLabel;
         private ProgressBar _progressBar;
         private Button _cancelButton;

         // Has the operation been canceled?
         private bool _isCancelPending;
         // Is the dialog working?
         private bool _isWorking;

         public MyProgressDialog(string inputFileName, string outputFileName)
         {
            InitializeComponent();

            _inputFileName = inputFileName;
            _outputFileName = outputFileName;
            _isCancelPending = false;
            _isWorking = true;
         }

         protected override void OnLoad(EventArgs e)
         {
            // To keep the UI functioning, do the conversion in a separate thread
            BeginInvoke(new MethodInvoker(DoWork));

            base.OnLoad(e);
         }

         private void DoWork()
         {
            DocumentWriter docWriter;
            string operation = string.Empty;

            EventHandler&lt;DocumentProgressEventArgs&gt; progressHandler = (object sender, DocumentProgressEventArgs e) =&gt;
            {
               // Update the description label progress bar
               _descriptionLabel.Text = operation;
               _progressBar.Value = e.Percentage;

               // Check if the user clicked the Cancel button, if so, abort the operation
               if (_isCancelPending)
                  e.Cancel = true;

               Application.DoEvents();
            };

            // Get the number of pages
            var codecs = new RasterCodecs();
            codecs.Options.RasterizeDocument.Load.Resolution = 300;
            var pageCount = codecs.GetTotalPages(_inputFileName);

            // Create the document writer
            docWriter = new DocumentWriter();

            // Create the document
            operation = "Creating the document...";

            // Subscribe to the progress event
            docWriter.Progress += new EventHandler&lt;DocumentProgressEventArgs&gt;(progressHandler);
            docWriter.BeginDocument(_outputFileName, DocumentFormat.Pdf);

            // Add the pages
            for (var pageNumber = 1; pageNumber &lt;= pageCount &amp;&amp; !_isCancelPending; pageNumber++)
            {
               // Load the page as SVG
               var page = new DocumentSvgPage();
               page.SvgDocument = codecs.LoadSvg(_inputFileName, pageNumber, null);

               // Add the page, notice we will not be using image/text feature (the default)
               operation = string.Format("Adding page {0} of {1}...", pageNumber, pageCount);
               docWriter.AddPage(page);

               // Delete the SVG
               page.SvgDocument.Dispose();
            }

            // Finally finish writing the PDF file on disk
            operation = "Finishing the document...";
            docWriter.EndDocument();

            // Remove the progress handler
            docWriter.Progress -= new EventHandler&lt;DocumentProgressEventArgs&gt;(progressHandler);

            codecs.Dispose();

            // Set the dialog results based on whether the user has canceled the operation
            if (_isCancelPending)
               DialogResult = DialogResult.Cancel;
            else
               DialogResult = DialogResult.OK;

            // The dialog can be closed now
            _isWorking = false;

            // We are done
            Close();
         }

         private void _cancelButton_Click(object sender, EventArgs e)
         {
            // Set the isCanceled variable to true, this will break from the
            // progress callback and closes the dialog
            _isCancelPending = true;
         }

         protected override void OnFormClosing(FormClosingEventArgs e)
         {
            // Dont allow the form to close while the callback is still working
            // Instead, cancel the operation
            if (_isWorking)
               e.Cancel = true;

            base.OnFormClosing(e);
         }

         private void InitializeComponent()
         {
            // Create the controls in this form, a text label, a progress bar and a cancel button
            SuspendLayout();

            // Text label
            _descriptionLabel = new Label();
            _descriptionLabel.Location = new Point(26, 21);
            _descriptionLabel.Name = "_descriptionLabel";
            _descriptionLabel.Size = new Size(367, 23);
            _descriptionLabel.TabIndex = 0;
            _descriptionLabel.TextAlign = ContentAlignment.MiddleLeft;
            _descriptionLabel.Text = "Creating final document...";

            // Progress bar
            _progressBar = new ProgressBar();
            _progressBar.Location = new Point(27, 47);
            _progressBar.Name = "_progressBar";
            _progressBar.Size = new Size(364, 23);
            _progressBar.TabIndex = 1;

            // Cancel button
            _cancelButton = new Button();
            _cancelButton.DialogResult = DialogResult.Cancel;
            _cancelButton.Location = new Point(172, 76);
            _cancelButton.Name = "_cancelButton";
            _cancelButton.Size = new Size(75, 23);
            _cancelButton.TabIndex = 2;
            _cancelButton.Text = "Cancel";
            _cancelButton.UseVisualStyleBackColor = true;
            _cancelButton.Click += new System.EventHandler(_cancelButton_Click);

            // Add the controls
            Controls.Add(_descriptionLabel);
            Controls.Add(_progressBar);
            Controls.Add(_cancelButton);

            // Initialize the dialog
            AutoScaleDimensions = new SizeF(6F, 13F);
            AutoScaleMode = AutoScaleMode.Font;
            CancelButton = _cancelButton;
            ClientSize = new Size(420, 118);
            FormBorderStyle = FormBorderStyle.FixedDialog;
            MaximizeBox = false;
            MinimizeBox = false;
            Name = "MyProgressDialog";
            ShowInTaskbar = false;
            StartPosition = FormStartPosition.CenterParent;
            Text = "DocumentWriter Progress Example";

            ResumeLayout();
         }
      }</code>
      </example>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.DocumentWriters.DocumentPage" />
      <seealso cref="T:Leadtools.Forms.DocumentWriters.DocumentFormat" />
      <seealso cref="T:FT.Topics.ProgrammingWithDocumentWriters">Programming with LEADTOOLS Document Writers</seealso>
      <seealso cref="T:Leadtools.Topics.FilesToBeIncludedWithYourApplication">Files to be Included with Your Application</seealso>
      <seealso cref="T:Leadtools.Topics.UnlockingSpecialLEADFeatures">Unlocking Special LEAD Features</seealso>
    </member>
    <member name="T:Leadtools.Forms.DocumentWriters.DocxDocumentOptions">
      <summary>Provides extra options to use when saving a document using the Microsoft Word format (DOCX). <a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
      <keywords>Recognize, DOCX|DOCX | DOCX|Word|Microsoft Word|Document Writers,DOCX|Document Writers,Word, Word, Microsoft Word</keywords>
      <remarks>
        <para>The DOCX format is part of Microsoft Open XML specification and first introduced with Microsoft Office 2007.</para>
        <para>The options set in the <see cref="T:Leadtools.Forms.DocumentWriters.DocxDocumentOptions" /> class will be used when the user saves a document using the <see cref="T:Leadtools.Forms.DocumentWriters.DocumentFormat">DocumentFormat.Docx</see> format.</para>
        <para>To change the options used with the DOCX format, perform the following steps:
            <list type="number"><item><description>Use the <see cref="M:Leadtools.Forms.DocumentWriters.DocumentWriter.GetOptions(Leadtools.Forms.DocumentWriters.DocumentFormat)">DocumentWriter.GetOptions</see> method of the <see cref="T:Leadtools.Forms.DocumentWriters.DocumentWriter" /> object being used 
            passing <see cref="T:Leadtools.Forms.DocumentWriters.DocumentFormat">DocumentFormat.Docx </see> to the <i>format</i> parameter. Note that the resulting object from the
            base <see cref="T:Leadtools.Forms.DocumentWriters.DocumentOptions" /> class needs to be cast to <see cref="T:Leadtools.Forms.DocumentWriters.DocxDocumentOptions" />.</description></item><item><description>Use the various <see cref="T:Leadtools.Forms.DocumentWriters.DocxDocumentOptions" /> properties to change the options.</description></item><item><description>Use <see cref="M:Leadtools.Forms.DocumentWriters.DocumentWriter.SetOptions(Leadtools.Forms.DocumentWriters.DocumentFormat,Leadtools.Forms.DocumentWriters.DocumentOptions)">DocumentWriter.SetOptions</see> to set the new options in the engine.</description></item><item><description>Now you can call the <see cref="M:Leadtools.Forms.DocumentWriters.DocumentWriter.BeginDocument(System.String,Leadtools.Forms.DocumentWriters.DocumentFormat)">DocumentWriter.BeginDocument</see> method (with <see cref="T:Leadtools.Forms.DocumentWriters.DocumentFormat">DocumentFormat.Docx</see> for the
            <i>format</i> parameter) to create a new document and add the pages.</description></item></list></para>
        <para>The <see cref="T:Leadtools.Forms.DocumentWriters.DocxDocumentOptions" /> class contains the following properties:
            <list type="table"><listheader><term>Property</term><description>Description</description></listheader><item><term><see cref="P:Leadtools.Forms.DocumentWriters.DocxDocumentOptions.TextMode">DocxDocumentOptions.TextMode</see></term><description>Controls how and when to frames the text blocks in the resulting DOCX file.</description></item></list></para>
        <para> This format requires .NET framework 3.0 or later and Microsoft Open XML Format SDK 2.*. For more information, refer to
            <seealso cref="T:Leadtools.Topics.FilesToBeIncludedWithYourApplication">Files to be Included with Your Application</seealso>.</para>
        <para>Note that this format does not support calling <see cref="M:Leadtools.Forms.DocumentWriters.DocumentWriter.InsertPage(Leadtools.Forms.DocumentWriters.DocumentPage,System.Int32)">DocumentWriter.InsertPage</see>.</para>
      </remarks>
      <example>
        <p>
          <para>This example will create a new Microsoft Word Document (DOCX) file using some of the supported options.</para>
        </p>
        <code lang="VB">      Imports Leadtools.Forms.DocumentWriters
      Imports Leadtools
      Imports Leadtools.Codecs

      &lt;TestMethod&gt; _
      Public Sub DocxDocumentOptionsExample()
         Dim inputFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "Leadtools.pdf")
         Dim outputFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "Example.docx")
         ' Setup a new RasterCodecs object
         Dim codecs As New RasterCodecs()
         codecs.Options.RasterizeDocument.Load.Resolution = 300

         ' Get the number of pages in the input document
         Dim pageCount As Integer = codecs.GetTotalPages(inputFileName)

         ' Create a new instance of the LEADTOOLS Document Writer
         Dim docWriter As New DocumentWriter()

         ' Change the DOCX options to add frames to the file
         Dim docxOptions As DocxDocumentOptions = DirectCast(docWriter.GetOptions(DocumentFormat.Docx), DocxDocumentOptions)
         docxOptions.PageRestriction = DocumentPageRestriction.Relaxed
         docxOptions.TextMode = DocumentTextMode.Framed
         docWriter.SetOptions(DocumentFormat.Docx, docxOptions)

         ' Create a new DOCX document
         Console.WriteLine("Creating new DOCX document: {0}", outputFileName)
         docWriter.BeginDocument(outputFileName, DocumentFormat.Docx)

         ' Loop through all the pages
         For pageNumber As Integer = 1 To pageCount
            ' Get the page as SVG
            Console.WriteLine("Loading page {0}", pageNumber)
            Dim page As New DocumentSvgPage()
            page.SvgDocument = codecs.LoadSvg(inputFileName, pageNumber, Nothing)

            ' Add the page
            Console.WriteLine("Adding page {0}", pageNumber)
            docWriter.AddPage(page)

            page.SvgDocument.Dispose()
         Next

         ' Finally finish writing the DOCX file on disk
         docWriter.EndDocument()
         codecs.Dispose()
      End Sub</code>
        <code lang="CS">      using Leadtools.Forms.DocumentWriters;
      using Leadtools;
      using Leadtools.Codecs;

      public void DocxDocumentOptionsExample()
      {
         var inputFileName = Path.Combine(LEAD_VARS.ImagesDir, "Leadtools.pdf");
         var outputFileName = Path.Combine(LEAD_VARS.ImagesDir, "Example.docx");
         // Setup a new RasterCodecs object
         var codecs = new RasterCodecs();
         codecs.Options.RasterizeDocument.Load.Resolution = 300;

         // Get the number of pages in the input document
         var pageCount = codecs.GetTotalPages(inputFileName);

         // Create a new instance of the LEADTOOLS Document Writer
         var docWriter = new DocumentWriter();

         // Change the DOCX options to add frames to the file
         var docxOptions = docWriter.GetOptions(DocumentFormat.Docx) as DocxDocumentOptions;
         docxOptions.PageRestriction = DocumentPageRestriction.Relaxed;
         docxOptions.TextMode = DocumentTextMode.Framed;
         docWriter.SetOptions(DocumentFormat.Docx, docxOptions);

         // Create a new DOCX document
         Console.WriteLine("Creating new DOCX document: {0}", outputFileName);
         docWriter.BeginDocument(outputFileName, DocumentFormat.Docx);

         // Loop through all the pages
         for (var pageNumber = 1; pageNumber &lt;= pageCount; pageNumber++)
         {
            // Get the page as SVG
            Console.WriteLine("Loading page {0}", pageNumber);
            var page = new DocumentSvgPage();
            page.SvgDocument = codecs.LoadSvg(inputFileName, pageNumber, null);

            // Add the page
            Console.WriteLine("Adding page {0}", pageNumber);
            docWriter.AddPage(page);

            page.SvgDocument.Dispose();
         }

         // Finally finish writing the DOCX file on disk
         docWriter.EndDocument();
         codecs.Dispose();
      }</code>
      </example>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.DocumentWriters.DocumentWriter" />
      <seealso cref="T:FT.Topics.ProgrammingWithDocumentWriters">Programming with LEADTOOLS Document Writers</seealso>
      <seealso cref="T:Leadtools.Topics.FilesToBeIncludedWithYourApplication">Files to be Included with Your Application</seealso>
      <seealso cref="T:Leadtools.Topics.UnlockingSpecialLEADFeatures">Unlocking Special LEAD Features</seealso>
    </member>
    <member name="M:Leadtools.Forms.DocumentWriters.DocxDocumentOptions.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Leadtools.Forms.DocumentWriters.DocxDocumentOptions" /> class. <a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
      <remarks>
        <para>The following table lists the default values of the <see cref="T:Leadtools.Forms.DocumentWriters.DocxDocumentOptions" /> properties:
            <list type="table"><listheader><term>Property</term><description>Value</description></listheader><item><term><see cref="P:Leadtools.Forms.DocumentWriters.DocxDocumentOptions.TextMode" /></term><description><see cref="T:Leadtools.Forms.DocumentWriters.DocumentTextMode">DocumentTextMode.Auto</see></description></item></list></para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.DocumentWriters.DocxDocumentOptions" />.</example>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.DocumentWriters.DocumentWriter" />
      <seealso cref="T:FT.Topics.ProgrammingWithDocumentWriters">Programming with LEADTOOLS Document Writers</seealso>
      <seealso cref="T:Leadtools.Topics.FilesToBeIncludedWithYourApplication">Files to be Included with Your Application</seealso>
      <seealso cref="T:Leadtools.Topics.UnlockingSpecialLEADFeatures">Unlocking Special LEAD Features</seealso>
    </member>
    <member name="M:Leadtools.Forms.DocumentWriters.DocxDocumentOptions.Clone">
      <summary>Creates an exact copy of this <see cref="T:Leadtools.Forms.DocumentWriters.DocumentOptions" />. <a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
      <returns>The <see cref="T:Leadtools.Forms.DocumentWriters.DocumentOptions" /> this method creates.</returns>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Forms.DocumentWriters.DocumentWriter" />.</example>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.DocumentWriters.DocumentWriter">Document Writers</seealso>
      <seealso cref="T:FT.Topics.ProgrammingWithDocumentWriters">Programming with LEADTOOLS Document Writers</seealso>
      <seealso cref="T:Leadtools.Topics.FilesToBeIncludedWithYourApplication">Files to be Included with Your Application</seealso>
      <seealso cref="T:Leadtools.Topics.UnlockingSpecialLEADFeatures">Unlocking Special LEAD Features</seealso>
    </member>
    <member name="P:Leadtools.Forms.DocumentWriters.DocxDocumentOptions.Format">
      <summary>Gets the document format type associated with this options class. <a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
      <value>This property will always return <see cref="T:Leadtools.Forms.DocumentWriters.DocumentFormat">DocumentFormat.Docx</see>.</value>
      <remarks>
        <para>This property is required internally by LEADTOOLS.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.DocumentWriters.DocxDocumentOptions" />.</example>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.DocumentWriters.DocumentWriter" />
      <seealso cref="T:FT.Topics.ProgrammingWithDocumentWriters">Programming with LEADTOOLS Document Writers</seealso>
      <seealso cref="T:Leadtools.Topics.FilesToBeIncludedWithYourApplication">Files to be Included with Your Application</seealso>
      <seealso cref="T:Leadtools.Topics.UnlockingSpecialLEADFeatures">Unlocking Special LEAD Features</seealso>
    </member>
    <member name="P:Leadtools.Forms.DocumentWriters.DocxDocumentOptions.TextMode">
      <summary>Gets or sets a value that controls how and when to frames the text blocks in the resulting DOCX file. <a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
      <value>Controls how and when to frames the text blocks in the resulting DOCX file. Default value is <see cref="T:Leadtools.Forms.DocumentWriters.DocumentTextMode">DocumentTextMode.Auto</see>.</value>
      <remarks>
        <para>Frames are containers supported by the DOCX format for text that can be positioned on a page and sized.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.DocumentWriters.DocxDocumentOptions" />.</example>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.DocumentWriters.DocumentTextMode" />
      <seealso cref="T:Leadtools.Forms.DocumentWriters.DocumentWriter" />
      <seealso cref="T:FT.Topics.ProgrammingWithDocumentWriters">Programming with LEADTOOLS Document Writers</seealso>
      <seealso cref="T:Leadtools.Topics.FilesToBeIncludedWithYourApplication">Files to be Included with Your Application</seealso>
      <seealso cref="T:Leadtools.Topics.UnlockingSpecialLEADFeatures">Unlocking Special LEAD Features</seealso>
    </member>
    <member name="T:Leadtools.Forms.DocumentWriters.EmfDocumentOptions">
      <summary>Provides extra options to use when saving a document using the Windows Enhanced Meta File (EMF) format. <a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
      <remarks>
        <para>The Windows Enhanced Meta File (EMF) format does not support multi-page documents. Therefore, only the last page added with the
            <see cref="M:Leadtools.Forms.DocumentWriters.DocumentWriter.AddPage(Leadtools.Forms.DocumentWriters.DocumentPage)">DocumentWriter.AddPage</see> will be used in the final document.</para>
        <para>Note that this format does not support calling <see cref="M:Leadtools.Forms.DocumentWriters.DocumentWriter.InsertPage(Leadtools.Forms.DocumentWriters.DocumentPage,System.Int32)">DocumentWriter.InsertPage</see>.</para>
        <para>The options set in the <see cref="T:Leadtools.Forms.DocumentWriters.EmfDocumentOptions" /> class will be used when the user saves a document using the <see cref="T:Leadtools.Forms.DocumentWriters.DocumentFormat">DocumentFormat.Emf</see> format.</para>
        <para>To change the options used with the EMF format, perform the following steps:
            <list type="number"><item><description>Use the <see cref="M:Leadtools.Forms.DocumentWriters.DocumentWriter.GetOptions(Leadtools.Forms.DocumentWriters.DocumentFormat)">DocumentWriter.GetOptions</see> method of the <see cref="T:Leadtools.Forms.DocumentWriters.DocumentWriter" /> object being used. 
            Pass <see cref="T:Leadtools.Forms.DocumentWriters.DocumentFormat">DocumentFormat.Emf</see> to the <i>format</i> parameter. Note that the resulting object from the
            base <see cref="T:Leadtools.Forms.DocumentWriters.DocumentOptions" /> class needs to be cast to <see cref="T:Leadtools.Forms.DocumentWriters.EmfDocumentOptions" />.</description></item><item><description>Use the various <see cref="T:Leadtools.Forms.DocumentWriters.EmfDocumentOptions" /> properties to change the options.</description></item><item><description>Use <see cref="M:Leadtools.Forms.DocumentWriters.DocumentWriter.SetOptions(Leadtools.Forms.DocumentWriters.DocumentFormat,Leadtools.Forms.DocumentWriters.DocumentOptions)">DocumentWriter.SetOptions</see> to set the new options in the engine.</description></item><item><description>Now you can call the <see cref="M:Leadtools.Forms.DocumentWriters.DocumentWriter.BeginDocument(System.String,Leadtools.Forms.DocumentWriters.DocumentFormat)">DocumentWriter.BeginDocument</see> method (with <see cref="T:Leadtools.Forms.DocumentWriters.DocumentFormat">DocumentFormat.Emf</see> for the
            <i>format</i> parameter) to create a new document and add the pages.</description></item></list></para>
        <para>Note that this format does not support calling <see cref="M:Leadtools.Forms.DocumentWriters.DocumentWriter.InsertPage(Leadtools.Forms.DocumentWriters.DocumentPage,System.Int32)">DocumentWriter.InsertPage</see>.</para>
        <para>Currently, the <see cref="T:Leadtools.Forms.DocumentWriters.EmfDocumentOptions" /> class contains no extra options.</para>
      </remarks>
      <example>
        <p>
          <para>This example will create a new Windows Enhanced Meta File (EMF) file using the various supported options.</para>
        </p>
        <code lang="VB">      Imports Leadtools.Forms.DocumentWriters
      Imports Leadtools
      Imports Leadtools.Codecs

      &lt;TestMethod&gt; _
      Public Sub EmfDocumentOptionsExample()
         Dim inputFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "Leadtools.pdf")
         Dim outputFileNameTemplate As String = Path.Combine(LEAD_VARS.ImagesDir, "Example{0}.emf")
         ' Setup a new RasterCodecs object
         Dim codecs As New RasterCodecs()
         codecs.Options.RasterizeDocument.Load.Resolution = 300

         ' Get the number of pages in the input document
         Dim pageCount As Integer = codecs.GetTotalPages(inputFileName)

         ' Create a new instance of the LEADTOOLS Document Writer
         Dim docWriter As New DocumentWriter()

         ' Change the EMF options
         Dim emfOptions As EmfDocumentOptions = DirectCast(docWriter.GetOptions(DocumentFormat.Emf), EmfDocumentOptions)
         ' EMF currently does not have any extra options
         ' In the future, you can modify the options here if needed
         docWriter.SetOptions(DocumentFormat.Emf, emfOptions)

         ' EMF does not support multiple pages, so we will create the document inside the loop

         ' Loop through all the pages
         For pageNumber As Integer = 1 To pageCount
            Dim outputFileName As String = String.Format(outputFileNameTemplate, pageNumber)

            ' Create a new EMF document
            Console.WriteLine("Creating new EMF document : {0}", outputFileName)
            docWriter.BeginDocument(outputFileName, DocumentFormat.Emf)

            ' Get the page as SVG
            Console.WriteLine("Loading page {0}", pageNumber)
            Dim page As New DocumentSvgPage()
            page.SvgDocument = codecs.LoadSvg(inputFileName, pageNumber, Nothing)

            ' Add the page
            Console.WriteLine("Adding page {0}", pageNumber)
            docWriter.AddPage(page)

            page.SvgDocument.Dispose()

            ' Finish writing theis EMF file on disk
            docWriter.EndDocument()
         Next
         codecs.Dispose()
      End Sub</code>
        <code lang="CS">      using Leadtools.Forms.DocumentWriters;
      using Leadtools;
      using Leadtools.Codecs;

      public void EmfDocumentOptionsExample()
      {
         var inputFileName = Path.Combine(LEAD_VARS.ImagesDir, "Leadtools.pdf");
         var outputFileNameTemplate = Path.Combine(LEAD_VARS.ImagesDir, "Example{0}.emf");
         // Setup a new RasterCodecs object
         var codecs = new RasterCodecs();
         codecs.Options.RasterizeDocument.Load.Resolution = 300;

         // Get the number of pages in the input document
         var pageCount = codecs.GetTotalPages(inputFileName);

         // Create a new instance of the LEADTOOLS Document Writer
         var docWriter = new DocumentWriter();

         // Change the EMF options
         var emfOptions = docWriter.GetOptions(DocumentFormat.Emf) as EmfDocumentOptions;
         // EMF currently does not have any extra options
         // In the future, you can modify the options here if needed
         docWriter.SetOptions(DocumentFormat.Emf, emfOptions);

         // EMF does not support multiple pages, so we will create the document inside the loop

         // Loop through all the pages
         for (var pageNumber = 1; pageNumber &lt;= pageCount; pageNumber++)
         {
            var outputFileName = string.Format(outputFileNameTemplate, pageNumber);

            // Create a new EMF document
            Console.WriteLine("Creating new EMF document : {0}", outputFileName);
            docWriter.BeginDocument(outputFileName, DocumentFormat.Emf);

            // Get the page as SVG
            Console.WriteLine("Loading page {0}", pageNumber);
            var page = new DocumentSvgPage();
            page.SvgDocument = codecs.LoadSvg(inputFileName, pageNumber, null);

            // Add the page
            Console.WriteLine("Adding page {0}", pageNumber);
            docWriter.AddPage(page);

            page.SvgDocument.Dispose();

            // Finish writing theis EMF file on disk
            docWriter.EndDocument();
         }

         codecs.Dispose();
      }</code>
      </example>
      <keywords>EMF|Document Writers,EMF</keywords>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.DocumentWriters.DocumentWriter" />
      <seealso cref="T:FT.Topics.ProgrammingWithDocumentWriters">Programming with LEADTOOLS Document Writers</seealso>
      <seealso cref="T:Leadtools.Topics.FilesToBeIncludedWithYourApplication">Files to be Included with Your Application</seealso>
      <seealso cref="T:Leadtools.Topics.UnlockingSpecialLEADFeatures">Unlocking Special LEAD Features</seealso>
    </member>
    <member name="M:Leadtools.Forms.DocumentWriters.EmfDocumentOptions.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Leadtools.Forms.DocumentWriters.EmfDocumentOptions" /> class. <a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
      <remarks>
        <para>Currently, the <see cref="T:Leadtools.Forms.DocumentWriters.EmfDocumentOptions" /> class contains no extra options.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.DocumentWriters.EmfDocumentOptions" />.</example>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.DocumentWriters.DocumentWriter" />
      <seealso cref="T:FT.Topics.ProgrammingWithDocumentWriters">Programming with LEADTOOLS Document Writers</seealso>
      <seealso cref="T:Leadtools.Topics.FilesToBeIncludedWithYourApplication">Files to be Included with Your Application</seealso>
      <seealso cref="T:Leadtools.Topics.UnlockingSpecialLEADFeatures">Unlocking Special LEAD Features</seealso>
    </member>
    <member name="M:Leadtools.Forms.DocumentWriters.EmfDocumentOptions.Clone">
      <summary>Creates an exact copy of this <see cref="T:Leadtools.Forms.DocumentWriters.DocumentOptions" /><a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
      <returns>The <see cref="T:Leadtools.Forms.DocumentWriters.DocumentOptions" /> this method creates.</returns>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Forms.DocumentWriters.DocumentWriter" />.</example>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.DocumentWriters.DocumentWriter">Document Writers</seealso>
      <seealso cref="T:FT.Topics.ProgrammingWithDocumentWriters">Programming with LEADTOOLS Document Writers</seealso>
      <seealso cref="T:Leadtools.Topics.FilesToBeIncludedWithYourApplication">Files to be Included with Your Application</seealso>
      <seealso cref="T:Leadtools.Topics.UnlockingSpecialLEADFeatures">Unlocking Special LEAD Features</seealso>
    </member>
    <member name="P:Leadtools.Forms.DocumentWriters.EmfDocumentOptions.Format">
      <summary>Gets the document format type associated with this options class. <a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
      <value>This property will always return <see cref="T:Leadtools.Forms.DocumentWriters.DocumentFormat">DocumentFormat.Emf</see>.</value>
      <remarks>
        <para>This property is required internally by LEADTOOLS.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.DocumentWriters.EmfDocumentOptions" />.</example>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.DocumentWriters.DocumentWriter" />
      <seealso cref="T:FT.Topics.ProgrammingWithDocumentWriters">Programming with LEADTOOLS Document Writers</seealso>
      <seealso cref="T:Leadtools.Topics.FilesToBeIncludedWithYourApplication">Files to be Included with Your Application</seealso>
      <seealso cref="T:Leadtools.Topics.UnlockingSpecialLEADFeatures">Unlocking Special LEAD Features</seealso>
    </member>
    <member name="T:Leadtools.Forms.DocumentWriters.DocumentFormat">
      <summary>Specifies the output document formats supported by the LEADTOOLS Document Writers. <a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="WinRTicon.png" class="WinRTIconTag" name="WinRTIconTag" title="WinRT support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="winrtphone.png" class="WinRTPhoneIconTag" name="WinRTPhoneIconTag" title="WinRT Phone support" border="0" /></a></summary>
      <remarks>
        <para>The <see cref="T:Leadtools.Forms.DocumentWriters.DocumentFormat" /> enumeration specifies the output format for the final document created with the LEADTOOLS Document Writers. Pass the format
            that are desired to the <see cref="M:Leadtools.Forms.DocumentWriters.DocumentWriter.BeginDocument(System.String,Leadtools.Forms.DocumentWriters.DocumentFormat)">DocumentWriter.BeginDocument</see> method.</para>
        <para>To get or set the extra options supported by a format, use the <see cref="M:Leadtools.Forms.DocumentWriters.DocumentWriter.GetOptions(Leadtools.Forms.DocumentWriters.DocumentFormat)">DocumentWriter.GetOptions</see> and
            <see cref="M:Leadtools.Forms.DocumentWriters.DocumentWriter.SetOptions(Leadtools.Forms.DocumentWriters.DocumentFormat,Leadtools.Forms.DocumentWriters.DocumentOptions)">DocumentWriter.SetOptions</see> methods.</para>
        <para>Some of the document formats require a special key to unlock. When using these formats unlock the specified support using the <see cref="T:Leadtools.RasterSupport" /> class first.</para>
        <para>The following table lists the document formats and the support type required to be unlocked before using them:
            <list type="table"><listheader><term>Document Format</term><description>Support Type</description></listheader><item><term>Doc, Docx, Emf, Html, Ltd, Rtf, Text, Pup, Mob, AltoXml, Svg, User and Xls.</term><description><see cref="T:Leadtools.RasterSupportType">RasterSupportType.DocumentWriters</see></description></item><item><term>Pdf and Xps</term><description><see cref="T:Leadtools.RasterSupportType">RasterSupportType.DocumentWriters</see> and <see cref="T:Leadtools.RasterSupportType">RasterSupportType.DocumentWritersPdf</see></description></item></list></para>
        <para>Note: Not all formats are supported in the .NET and Windows Runtime. Use <see cref="M:Leadtools.Forms.DocumentWriters.DocumentWriter.GetSupportedFormats">DocumentWriter.GetSupportedFormats</see> to find the
            current level of support.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.DocumentWriters.DocumentWriter" />.</example>
      <docaddon>yes</docaddon>
      <keywords>PDF|PDF/A|XPS|Text|Word|Microsotf Word|Word|Microsotf Word|Xls|Excel 2003|Microsoft Excel 2003|RTF|HTML|HTM|EMF|TXT|DOC|DOCX|Document Writers,PDF|Document Writers,PDF/A|Document Writers,XPS|Document Writers,Text|Document Writers,DOC,DOCX|Document Writers,Word|Document Writers,RTF|Document Writers,EMF|Document Writers,HTML</keywords>
      <seealso cref="T:Leadtools.Forms.DocumentWriters.DocumentWriter" />
      <seealso cref="T:FT.Topics.ProgrammingWithDocumentWriters">Programming with LEADTOOLS Document Writers</seealso>
      <seealso cref="T:Leadtools.Topics.FilesToBeIncludedWithYourApplication">Files to be Included with Your Application</seealso>
      <seealso cref="T:Leadtools.Topics.UnlockingSpecialLEADFeatures">Unlocking Special LEAD Features</seealso>
    </member>
    <member name="F:Leadtools.Forms.DocumentWriters.DocumentFormat.User">
      <summary>(0xFFFFFFFF)(-1) <para>User-defined document format. The <strong>User</strong> document format is not used inside the LEADTOOLS Document Writers toolkit. An exception will be thrown if <strong>User</strong> is used as an output document format in the <see cref="M:Leadtools.Forms.DocumentWriters.DocumentWriter.BeginDocument(System.String,Leadtools.Forms.DocumentWriters.DocumentFormat)">DocumentWriter.BeginDocument</see> method.
            The <strong>User</strong> format can however be used as an output format when used in the LEADTOOLS OCR toolkit as a special case to instruct the OCR framework to save
            the document using the engine native format.</para><a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="WinRTicon.png" class="WinRTIconTag" name="WinRTIconTag" title="WinRT support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="winrtphone.png" class="WinRTPhoneIconTag" name="WinRTPhoneIconTag" title="WinRT Phone support" border="0" /></a></summary>
    </member>
    <member name="F:Leadtools.Forms.DocumentWriters.DocumentFormat.Ltd">
      <summary>(0x00000000)(0) <para>LEADTOOLS Temporary Document. This format creates a temporary file on disk that can later be converted to any of the other formats supported by the LEADTOOLS
            Document Writers.</para><para>This format supports appending pages to an existing file, therefore, you can use the <strong>Ltd</strong> format if you have large amount of pages to convert over
            multiple sessions. When calling the <see cref="M:Leadtools.Forms.DocumentWriters.DocumentWriter.BeginDocument(System.String,Leadtools.Forms.DocumentWriters.DocumentFormat)">DocumentWriter.BeginDocument</see> method with the <strong>Ltd</strong> document format, the toolkit
            will check if the output file specified exists on disk. If it does, the new pages will be appended to the end of the file. When you are finished adding all the pages
            use the <see cref="M:Leadtools.Forms.DocumentWriters.DocumentWriter.Convert(System.String,System.String,Leadtools.Forms.DocumentWriters.DocumentFormat)">DocumentWriter.Convert</see> method to convert this temporary file to the desired output format.</para><a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="WinRTicon.png" class="WinRTIconTag" name="WinRTIconTag" title="WinRT support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="winrtphone.png" class="WinRTPhoneIconTag" name="WinRTPhoneIconTag" title="WinRT Phone support" border="0" /></a></summary>
    </member>
    <member name="F:Leadtools.Forms.DocumentWriters.DocumentFormat.Pdf">
      <summary>(0x00000001)(1) <para>Adobe Portable Document Format (PDF).</para><para>LEADTOOLS Document Writers support several flavors with multiple options of the PDF format, for more information refer to <see cref="T:Leadtools.Forms.DocumentWriters.PdfDocumentOptions" />. Note: The PDF document
            support requires unlocking an extra key before it can be used. For more information, refer to <see cref="T:Leadtools.RasterSupportType" /> and <see cref="T:Leadtools.Topics.UnlockingSpecialLEADFeatures">Unlocking Special LEAD Features</see>.</para><a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="WinRTicon.png" class="WinRTIconTag" name="WinRTIconTag" title="WinRT support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="winrtphone.png" class="WinRTPhoneIconTag" name="WinRTPhoneIconTag" title="WinRT Phone support" border="0" /></a></summary>
    </member>
    <member name="F:Leadtools.Forms.DocumentWriters.DocumentFormat.Doc">
      <summary>(0x00000002)(2) <para>Microsoft Word 2003 document format (DOC).</para><para>LEADTOOLS Document Writers support extra options for the DOC format. For more information refer to <see cref="T:Leadtools.Forms.DocumentWriters.DocDocumentOptions" />.</para><a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="WinRTicon.png" class="WinRTIconTag" name="WinRTIconTag" title="WinRT support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="winrtphone.png" class="WinRTPhoneIconTag" name="WinRTPhoneIconTag" title="WinRT Phone support" border="0" /></a></summary>
    </member>
    <member name="F:Leadtools.Forms.DocumentWriters.DocumentFormat.Rtf">
      <summary>(0x00000003)(3) <para>Rich Text Format (RTF).</para><para>LEADTOOLS Document Writers support extra options for the RTF format. For more information refer to <see cref="T:Leadtools.Forms.DocumentWriters.RtfDocumentOptions" />.</para><a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="WinRTicon.png" class="WinRTIconTag" name="WinRTIconTag" title="WinRT support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="winrtphone.png" class="WinRTPhoneIconTag" name="WinRTPhoneIconTag" title="WinRT Phone support" border="0" /></a></summary>
    </member>
    <member name="F:Leadtools.Forms.DocumentWriters.DocumentFormat.Html">
      <summary>(0x00000004)(4) <para>HyperText Markup Language (HTML).</para><para>LEADTOOLS Document Writers support several flavors with multiple options of the RTF format. For more information refer to <see cref="T:Leadtools.Forms.DocumentWriters.RtfDocumentOptions" />.</para><a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="WinRTicon.png" class="WinRTIconTag" name="WinRTIconTag" title="WinRT support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="winrtphone.png" class="WinRTPhoneIconTag" name="WinRTPhoneIconTag" title="WinRT Phone support" border="0" /></a></summary>
    </member>
    <member name="F:Leadtools.Forms.DocumentWriters.DocumentFormat.Text">
      <summary>(0x00000005)(5) <para>Text format.</para><para>LEADTOOLS Document Writers support extra options for the Text format. For more information refer to <see cref="T:Leadtools.Forms.DocumentWriters.TextDocumentOptions" />.</para><a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="WinRTicon.png" class="WinRTIconTag" name="WinRTIconTag" title="WinRT support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="winrtphone.png" class="WinRTPhoneIconTag" name="WinRTPhoneIconTag" title="WinRT Phone support" border="0" /></a></summary>
    </member>
    <member name="F:Leadtools.Forms.DocumentWriters.DocumentFormat.Emf">
      <summary>(0x00000006)(6) <para>Windows Enhanced Meta File (EMF).</para><para>EMF format does not support multi-page documents. Therefore, only the last page added with
            <see cref="M:Leadtools.Forms.DocumentWriters.DocumentWriter.AddPage(Leadtools.Forms.DocumentWriters.DocumentPage)">DocumentWriter.AddPage</see> or <see cref="M:Leadtools.Forms.DocumentWriters.DocumentWriter.InsertPage(Leadtools.Forms.DocumentWriters.DocumentPage,System.Int32)">DocumentWriter.InsertPage</see> will be
            used in the final document.</para><a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="WinRTicon.png" class="WinRTIconTag" name="WinRTIconTag" title="WinRT support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="winrtphone.png" class="WinRTPhoneIconTag" name="WinRTPhoneIconTag" title="WinRT Phone support" border="0" /></a></summary>
    </member>
    <member name="F:Leadtools.Forms.DocumentWriters.DocumentFormat.Xps">
      <summary>(0x00000007)(7) <para>Microsoft Open XML Paper Specification (XPS) (this format requires .NET Framework 3.0 or later).</para><para>LEADTOOLS Document Writers support extra options for the XPS format. For more information refer to <see cref="T:Leadtools.Forms.DocumentWriters.XpsDocumentOptions" />.</para><a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="WinRTicon.png" class="WinRTIconTag" name="WinRTIconTag" title="WinRT support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="winrtphone.png" class="WinRTPhoneIconTag" name="WinRTPhoneIconTag" title="WinRT Phone support" border="0" /></a></summary>
    </member>
    <member name="F:Leadtools.Forms.DocumentWriters.DocumentFormat.Docx">
      <summary>(0x00000008)(8) <para>Microsoft Word Document format (DOCX) (this format requires .NET Framework 3.0 or later and Microsoft Open XML Format SDK 2.*.).</para><para>The DOCX format is part of Microsoft Open XML specification and first introduced with Microsoft Office 2007.</para><para>LEADTOOLS Document Writers support extra options for the DOCX format. For more information refer to <see cref="T:Leadtools.Forms.DocumentWriters.DocxDocumentOptions" />.</para><a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="WinRTicon.png" class="WinRTIconTag" name="WinRTIconTag" title="WinRT support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="winrtphone.png" class="WinRTPhoneIconTag" name="WinRTPhoneIconTag" title="WinRT Phone support" border="0" /></a></summary>
    </member>
    <member name="F:Leadtools.Forms.DocumentWriters.DocumentFormat.Xls">
      <summary>(0x00000009)(9) <para>Microsoft Excel 2003 format (XLS).</para><para>LEADTOOLS Document Writers support extra options for the XLS format. For more information refer to <see cref="T:Leadtools.Forms.DocumentWriters.XlsDocumentOptions" />.</para><a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="WinRTicon.png" class="WinRTIconTag" name="WinRTIconTag" title="WinRT support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="winrtphone.png" class="WinRTPhoneIconTag" name="WinRTPhoneIconTag" title="WinRT Phone support" border="0" /></a></summary>
    </member>
    <member name="F:Leadtools.Forms.DocumentWriters.DocumentFormat.Pub">
      <summary>(0x0000000A)(10) <para>eBooks format (ePUB).</para><para>LEADTOOLS Document Writers support extra options for the ePUB format. For more information refer to <see cref="T:Leadtools.Forms.DocumentWriters.PubDocumentOptions" />.</para><a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
    </member>
    <member name="F:Leadtools.Forms.DocumentWriters.DocumentFormat.Mob">
      <summary>(0x0000000B)(11) <para>Mobipocket e-book format (MOB).</para><para>LEADTOOLS Document Writers support extra options for the MOB format. For more information refer to <see cref="T:Leadtools.Forms.DocumentWriters.MobDocumentOptions" />.</para><a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
    </member>
    <member name="F:Leadtools.Forms.DocumentWriters.DocumentFormat.Svg">
      <summary>(0x0000000C)(12) <para>Scalable Vector Graphics format (SVG).</para><para>SVG  format does not support multi-page documents. 
            Therefore, only the last page added with the 
            <see cref="M:Leadtools.Forms.DocumentWriters.DocumentWriter.AddPage(Leadtools.Forms.DocumentWriters.DocumentPage)" /> will be used in the final document.</para><para>For more information refer to <see cref="T:Leadtools.Forms.DocumentWriters.SvgDocumentOptions" />.</para><a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
    </member>
    <member name="F:Leadtools.Forms.DocumentWriters.DocumentFormat.AltoXml">
      <summary>(0x0000000D)(13) <para>ALTO (Analyzed Layout and Text Object) is an XML Schema used by the library of congress to describe OCR text and layout format.</para><para>LEADTOOLS Document Writers support extra options for the ALTO format. For more information refer to <see cref="T:Leadtools.Forms.DocumentWriters.AltoXmlDocumentOptions" />.</para><a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
    </member>
    <member name="T:Leadtools.Forms.DocumentWriters.DocumentPageRestriction">
      <summary>Specifies the page restriction mode used when saving a document. <a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="WinRTicon.png" class="WinRTIconTag" name="WinRTIconTag" title="WinRT support" border="0" /></a></summary>
      <remarks>
        <para>The <see cref="T:Leadtools.Forms.DocumentWriters.DocumentPageRestriction" /> enumeration is used as the type for the
                 <see cref="P:Leadtools.Forms.DocumentWriters.DocumentOptions.PageRestriction">DocumentOptions.PageRestriction</see> property.</para>
        <para>Use the <see cref="P:Leadtools.Forms.DocumentWriters.DocumentOptions.PageRestriction" /> property to control the page creation process used by the <see cref="T:Leadtools.Forms.DocumentWriters.DocumentWriter" />.</para>
        <para>
          <see cref="T:Leadtools.Forms.DocumentWriters.DocumentPageRestriction">DocumentPageRestriction.Default</see> requires a valid EMF handle in the
            <see cref="P:Leadtools.Forms.DocumentWriters.DocumentEmfPage.EmfHandle">DocumentEmfPage.EmfHandle</see> property in order to create a document and thus does not support empty
            pages. Also, if the document supports overlay images (for example, PDF with the <see cref="P:Leadtools.Forms.DocumentWriters.PdfDocumentOptions.ImageOverText" /> option set
            to <strong>true</strong>), then an overlay image must be present in the <see cref="P:Leadtools.Forms.DocumentWriters.DocumentSvgPage.Image">DocumentPage.Image</see> property of
            the page.</para>
        <para>
          <see cref="T:Leadtools.Forms.DocumentWriters.DocumentPageRestriction">DocumentPageRestriction.Relaxed</see> does not require an EMF handle in the
            <see cref="P:Leadtools.Forms.DocumentWriters.DocumentEmfPage.EmfHandle">DocumentEmfPage.EmfHandle</see> property and thus supports creating of a document with zero or more empty
            pages. Also, if the document supports overlay images (for example, PDF with the <see cref="P:Leadtools.Forms.DocumentWriters.PdfDocumentOptions.ImageOverText" /> option set
            to <strong>true</strong>) and an overlay image is not present in the <see cref="P:Leadtools.Forms.DocumentWriters.DocumentSvgPage.Image">DocumentPage.Image</see> property of
            the page, then no overlay is automatically assumed and the page will be created successfully.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.DocumentWriters.DocumentWriter" />.</example>
      <docaddon>yes</docaddon>
      <keywords>Document Writers,page, add page, restrictions, page restrictions|Document Writers</keywords>
      <seealso cref="T:FT.Topics.ProgrammingWithDocumentWriters">Programming with LEADTOOLS Document Writers</seealso>
      <seealso cref="T:Leadtools.Topics.FilesToBeIncludedWithYourApplication">Files to be Included with Your Application</seealso>
      <seealso cref="T:Leadtools.Topics.UnlockingSpecialLEADFeatures">Unlocking Special LEAD Features</seealso>
    </member>
    <member name="F:Leadtools.Forms.DocumentWriters.DocumentPageRestriction.Default">
      <summary>(0x00000000)(0) <para>Default page restriction, requires emf handle to create document.</para><a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="WinRTicon.png" class="WinRTIconTag" name="WinRTIconTag" title="WinRT support" border="0" /></a></summary>
    </member>
    <member name="F:Leadtools.Forms.DocumentWriters.DocumentPageRestriction.Relaxed">
      <summary>(0x00000001)(1) <para> Relaxed page restrictions, emf handle is not mandatory to create document.</para><a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="WinRTicon.png" class="WinRTIconTag" name="WinRTIconTag" title="WinRT support" border="0" /></a></summary>
    </member>
    <member name="T:Leadtools.Forms.DocumentWriters.DocumentFontEmbedMode">
      <summary>Specifies the font embedding mode used when saving a document. <a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="WinRTicon.png" class="WinRTIconTag" name="WinRTIconTag" title="WinRT support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="winrtphone.png" class="WinRTPhoneIconTag" name="WinRTPhoneIconTag" title="WinRT Phone support" border="0" /></a></summary>
      <remarks>
        <para>You can use the <see cref="T:Leadtools.Forms.DocumentWriters.DocumentFontEmbedMode" /> to control how the fonts are embedded in the final document created by the LEADTOOLS Document Writer. The
            <see cref="T:Leadtools.Forms.DocumentWriters.DocumentFormat">DocumentFormat.Pdf</see> and <see cref="T:Leadtools.Forms.DocumentWriters.DocumentFormat">DocumentFormat.Html</see> supports embedding fonts in the final document.</para>
        <para>Use the <see cref="P:Leadtools.Forms.DocumentWriters.PdfDocumentOptions.FontEmbedMode">PdfDocumentOptions.FontEmbedMode</see> property to control the font embedding mode used when creating PDF documents. Note that <see cref="P:Leadtools.Forms.DocumentWriters.PdfDocumentOptions.FontEmbedMode">PdfDocumentOptions.FontEmbedMode</see> is not used
            when saving PDF/A files; all fonts are always embedded in the file.</para>
        <para>Use the <see cref="P:Leadtools.Forms.DocumentWriters.HtmlDocumentOptions.FontEmbedMode">HtmlDocumentOptions.FontEmbedMode</see> property to control the font embedding mode used when creating HTML documents.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.DocumentWriters.PdfDocumentOptions" />.</example>
      <docaddon>yes</docaddon>
      <keywords>Document Writers,PDF|Document Writers,PDF/A|Document Writers,Fonts</keywords>
      <seealso cref="T:FT.Topics.ProgrammingWithDocumentWriters">Programming with LEADTOOLS Document Writers</seealso>
      <seealso cref="T:Leadtools.Topics.FilesToBeIncludedWithYourApplication">Files to be Included with Your Application</seealso>
      <seealso cref="T:Leadtools.Topics.UnlockingSpecialLEADFeatures">Unlocking Special LEAD Features</seealso>
    </member>
    <member name="F:Leadtools.Forms.DocumentWriters.DocumentFontEmbedMode.None">
      <summary>(0x00000000)(0) <para>No font embedding. Smallest output file size.</para><a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="WinRTicon.png" class="WinRTIconTag" name="WinRTIconTag" title="WinRT support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="winrtphone.png" class="WinRTPhoneIconTag" name="WinRTPhoneIconTag" title="WinRT Phone support" border="0" /></a></summary>
    </member>
    <member name="F:Leadtools.Forms.DocumentWriters.DocumentFontEmbedMode.Auto">
      <summary>(0x00000001)(1) <para>Embed fonts that are not commonly available with the exception of Licensed Fonts.</para><a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="WinRTicon.png" class="WinRTIconTag" name="WinRTIconTag" title="WinRT support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="winrtphone.png" class="WinRTPhoneIconTag" name="WinRTPhoneIconTag" title="WinRT Phone support" border="0" /></a></summary>
    </member>
    <member name="F:Leadtools.Forms.DocumentWriters.DocumentFontEmbedMode.Force">
      <summary>(0x00000002)(2) <para>Embed fonts that are not commonly available with Licensed Fonts.</para><a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="WinRTicon.png" class="WinRTIconTag" name="WinRTIconTag" title="WinRT support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="winrtphone.png" class="WinRTPhoneIconTag" name="WinRTPhoneIconTag" title="WinRT Phone support" border="0" /></a></summary>
    </member>
    <member name="F:Leadtools.Forms.DocumentWriters.DocumentFontEmbedMode.All">
      <summary>(0x00000003)(3) <para>Embed all fonts, including the Licensed Fonts with the document. May result in large output file sizes.</para><a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="WinRTicon.png" class="WinRTIconTag" name="WinRTIconTag" title="WinRT support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="winrtphone.png" class="WinRTPhoneIconTag" name="WinRTPhoneIconTag" title="WinRT Phone support" border="0" /></a></summary>
    </member>
    <member name="T:Leadtools.Forms.DocumentWriters.OneBitImageCompressionType">
      <summary>Specifies the compression types for one bit per pixels images. <a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="WinRTicon.png" class="WinRTIconTag" name="WinRTIconTag" title="WinRT support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="winrtphone.png" class="WinRTPhoneIconTag" name="WinRTPhoneIconTag" title="WinRT Phone support" border="0" /></a></summary>
      <remarks>
        <para>You can use the <see cref="T:Leadtools.Forms.DocumentWriters.OneBitImageCompressionType" /> to control the compression type for one bit per pixels images in the final document created by the LEADTOOLS Document Writer. The
            <see cref="T:Leadtools.Forms.DocumentWriters.DocumentFormat">DocumentFormat.Pdf</see> supports selecting compression types in the final document.</para>
        <para>Use the <see cref="P:Leadtools.Forms.DocumentWriters.PdfDocumentOptions.OneBitImageCompression">PdfDocumentOptions.OneBitImageCompression</see> property to control the compression type for one bit per pixels images when creating PDF documents.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.DocumentWriters.PdfDocumentOptions" />.</example>
      <docaddon>yes</docaddon>
      <keywords>Document Writers,PDF|Document Writers,PDF/A|Document Writers,Fonts</keywords>
      <seealso cref="T:FT.Topics.ProgrammingWithDocumentWriters">Programming with LEADTOOLS Document Writers</seealso>
      <seealso cref="T:Leadtools.Topics.FilesToBeIncludedWithYourApplication">Files to be Included with Your Application</seealso>
      <seealso cref="T:Leadtools.Topics.UnlockingSpecialLEADFeatures">Unlocking Special LEAD Features</seealso>
    </member>
    <member name="F:Leadtools.Forms.DocumentWriters.OneBitImageCompressionType.Flate">
      <summary>(0x00000000)(0) <para>Use flate compression for compressing one bit images.</para><a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="WinRTicon.png" class="WinRTIconTag" name="WinRTIconTag" title="WinRT support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="winrtphone.png" class="WinRTPhoneIconTag" name="WinRTPhoneIconTag" title="WinRT Phone support" border="0" /></a></summary>
    </member>
    <member name="F:Leadtools.Forms.DocumentWriters.OneBitImageCompressionType.FaxG31D">
      <summary>(0x00000001)(1) <para>Use FAX G3_1D compression for compressing one bit images.</para><a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="WinRTicon.png" class="WinRTIconTag" name="WinRTIconTag" title="WinRT support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="winrtphone.png" class="WinRTPhoneIconTag" name="WinRTPhoneIconTag" title="WinRT Phone support" border="0" /></a></summary>
    </member>
    <member name="F:Leadtools.Forms.DocumentWriters.OneBitImageCompressionType.FaxG32D">
      <summary>(0x00000002)(2) <para>Use FAX G3_2D compression for compressing one bit images.</para><a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="WinRTicon.png" class="WinRTIconTag" name="WinRTIconTag" title="WinRT support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="winrtphone.png" class="WinRTPhoneIconTag" name="WinRTPhoneIconTag" title="WinRT Phone support" border="0" /></a></summary>
    </member>
    <member name="F:Leadtools.Forms.DocumentWriters.OneBitImageCompressionType.FaxG4">
      <summary>(0x00000003)(3) <para>Use FAX G4 compression for compressing one bit images.</para><a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="WinRTicon.png" class="WinRTIconTag" name="WinRTIconTag" title="WinRT support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="winrtphone.png" class="WinRTPhoneIconTag" name="WinRTPhoneIconTag" title="WinRT Phone support" border="0" /></a></summary>
    </member>
    <member name="F:Leadtools.Forms.DocumentWriters.OneBitImageCompressionType.Lzw">
      <summary>(0x00000004)(4) <para>Use LZW compression for compressing one bit images.</para><a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="WinRTicon.png" class="WinRTIconTag" name="WinRTIconTag" title="WinRT support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="winrtphone.png" class="WinRTPhoneIconTag" name="WinRTPhoneIconTag" title="WinRT Phone support" border="0" /></a></summary>
    </member>
    <member name="F:Leadtools.Forms.DocumentWriters.OneBitImageCompressionType.Jbig2">
      <summary>(0x00000005)(5) <para>Use JBIG2 compression for compressing one bit images.</para><a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="WinRTicon.png" class="WinRTIconTag" name="WinRTIconTag" title="WinRT support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="winrtphone.png" class="WinRTPhoneIconTag" name="WinRTPhoneIconTag" title="WinRT Phone support" border="0" /></a></summary>
    </member>
    <member name="T:Leadtools.Forms.DocumentWriters.ColoredImageCompressionType">
      <summary>Specifies the compression types for colored images. <a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="WinRTicon.png" class="WinRTIconTag" name="WinRTIconTag" title="WinRT support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="winrtphone.png" class="WinRTPhoneIconTag" name="WinRTPhoneIconTag" title="WinRT Phone support" border="0" /></a></summary>
      <remarks>
        <para>You can use the <see cref="T:Leadtools.Forms.DocumentWriters.ColoredImageCompressionType" /> to control the compression type for colored images (i.e. images more than one bits per pixel) in the final document created by the LEADTOOLS Document Writer. The
            <see cref="T:Leadtools.Forms.DocumentWriters.DocumentFormat">DocumentFormat.Pdf</see> supports selecting compression types in the final document.</para>
        <para>Use the <see cref="P:Leadtools.Forms.DocumentWriters.PdfDocumentOptions.ColoredImageCompression">PdfDocumentOptions.ColoredImageCompression</see> property to control the compression type for colored images when creating PDF documents.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.DocumentWriters.PdfDocumentOptions" />.</example>
      <docaddon>yes</docaddon>
      <keywords>Document Writers,PDF|Document Writers,PDF/A|Document Writers,Fonts</keywords>
      <seealso cref="T:FT.Topics.ProgrammingWithDocumentWriters">Programming with LEADTOOLS Document Writers</seealso>
      <seealso cref="T:Leadtools.Topics.FilesToBeIncludedWithYourApplication">Files to be Included with Your Application</seealso>
      <seealso cref="T:Leadtools.Topics.UnlockingSpecialLEADFeatures">Unlocking Special LEAD Features</seealso>
    </member>
    <member name="F:Leadtools.Forms.DocumentWriters.ColoredImageCompressionType.FlateJpeg">
      <summary>(0x00000000)(0) <para>Use JPEG compression for images which are more than 8BPP, or for grayscale 8BPP, else use flate compression.</para><a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="WinRTicon.png" class="WinRTIconTag" name="WinRTIconTag" title="WinRT support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="winrtphone.png" class="WinRTPhoneIconTag" name="WinRTPhoneIconTag" title="WinRT Phone support" border="0" /></a></summary>
    </member>
    <member name="F:Leadtools.Forms.DocumentWriters.ColoredImageCompressionType.LzwJpeg">
      <summary>(0x00000001)(1) <para>Use JPEG compression for images which are more than 8BPP, or for grayscale 8BPP, else use LZW compression.</para><a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="WinRTicon.png" class="WinRTIconTag" name="WinRTIconTag" title="WinRT support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="winrtphone.png" class="WinRTPhoneIconTag" name="WinRTPhoneIconTag" title="WinRT Phone support" border="0" /></a></summary>
    </member>
    <member name="F:Leadtools.Forms.DocumentWriters.ColoredImageCompressionType.Flate">
      <summary>(0x00000002)(2) <para>Use flate compression for compressing colored images.</para><a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="WinRTicon.png" class="WinRTIconTag" name="WinRTIconTag" title="WinRT support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="winrtphone.png" class="WinRTPhoneIconTag" name="WinRTPhoneIconTag" title="WinRT Phone support" border="0" /></a></summary>
    </member>
    <member name="F:Leadtools.Forms.DocumentWriters.ColoredImageCompressionType.Lzw">
      <summary>(0x00000003)(3) <para>Use LZW compression for compressing colored images.</para><a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="WinRTicon.png" class="WinRTIconTag" name="WinRTIconTag" title="WinRT support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="winrtphone.png" class="WinRTPhoneIconTag" name="WinRTPhoneIconTag" title="WinRT Phone support" border="0" /></a></summary>
    </member>
    <member name="F:Leadtools.Forms.DocumentWriters.ColoredImageCompressionType.Jpeg">
      <summary>(0x00000004)(0x00000001)(0x00000000)(4) <para>Use JPEG compression for compressing colored images.</para><a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="WinRTicon.png" class="WinRTIconTag" name="WinRTIconTag" title="WinRT support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="winrtphone.png" class="WinRTPhoneIconTag" name="WinRTPhoneIconTag" title="WinRT Phone support" border="0" /></a></summary>
    </member>
    <member name="F:Leadtools.Forms.DocumentWriters.ColoredImageCompressionType.FlateJpx">
      <summary>(0x00000005)(5) Use JPEG 2000 compression for images which are more than 8BPP, or for grayscale 8BPP, else use flate compression. Requires Leadtools.Codecs.J2k, Leadtools.Codecs.Tif and Leadtools.Codecs.Bmp <a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="WinRTicon.png" class="WinRTIconTag" name="WinRTIconTag" title="WinRT support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="winrtphone.png" class="WinRTPhoneIconTag" name="WinRTPhoneIconTag" title="WinRT Phone support" border="0" /></a></summary>
    </member>
    <member name="F:Leadtools.Forms.DocumentWriters.ColoredImageCompressionType.LzwJpx">
      <summary>(0x00000006)(6) Use JPEG 2000 compression for images which are more than 8BPP, or for grayscale 8BPP, else use LZW compression. Requires Leadtools.Codecs.J2k, Leadtools.Codecs.Tif and Leadtools.Codecs.Bmp <a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="WinRTicon.png" class="WinRTIconTag" name="WinRTIconTag" title="WinRT support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="winrtphone.png" class="WinRTPhoneIconTag" name="WinRTPhoneIconTag" title="WinRT Phone support" border="0" /></a></summary>
    </member>
    <member name="F:Leadtools.Forms.DocumentWriters.ColoredImageCompressionType.Jpx">
      <summary>(0x00000007)(0x00000006)(0x00000005)(7) Use JPEG 2000 compression for compressing colored images. Requires Leadtools.Codecs.J2k, Leadtools.Codecs.Tif and Leadtools.Codecs.Bmp <a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="WinRTicon.png" class="WinRTIconTag" name="WinRTIconTag" title="WinRT support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="winrtphone.png" class="WinRTPhoneIconTag" name="WinRTPhoneIconTag" title="WinRT Phone support" border="0" /></a></summary>
    </member>
    <member name="T:Leadtools.Forms.DocumentWriters.PdfDocumentType">
      <summary>Specifies the PDF document type. <a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="WinRTicon.png" class="WinRTIconTag" name="WinRTIconTag" title="WinRT support" border="0" /></a></summary>
      <remarks>
        <para>LEADTOOLS Document Writers can create different types of Adobe PDF documents. You can specify the PDF document type through the use of the
            <see cref="P:Leadtools.Forms.DocumentWriters.PdfDocumentOptions.DocumentType">PdfDocumentOptions.DocumentType</see> property.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.DocumentWriters.PdfDocumentOptions" />.</example>
      <docaddon>yes</docaddon>
      <keywords>Document Writers,PDF|Document Writers,PDF/A|Document Writers,Fonts</keywords>
      <seealso cref="T:FT.Topics.ProgrammingWithDocumentWriters">Programming with LEADTOOLS Document Writers</seealso>
      <seealso cref="T:Leadtools.Topics.FilesToBeIncludedWithYourApplication">Files to be Included with Your Application</seealso>
      <seealso cref="T:Leadtools.Topics.UnlockingSpecialLEADFeatures">Unlocking Special LEAD Features</seealso>
    </member>
    <member name="F:Leadtools.Forms.DocumentWriters.PdfDocumentType.Pdf">
      <summary>(0x00000000)(0) <para>The target document should be PDF version 1.4.</para><para>PDF is generally not suited for long term preservation. The PDF format may contain resources (such as fonts) that may not exist on the viewing
            machine. As a result, font substitution may occur resulting in a document that may not look exactly like the original version.</para><a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="WinRTicon.png" class="WinRTIconTag" name="WinRTIconTag" title="WinRT support" border="0" /></a></summary>
    </member>
    <member name="F:Leadtools.Forms.DocumentWriters.PdfDocumentType.PdfA">
      <summary>(0x00000001)(1) <para>The target document should be PDF/A-1b.</para><para>PDF/A-1b is a subset of PDF obtained by leaving out PDF features not suited to long-term archiving. The resulting document is guaranteed to look exactly like
            the original version when viewed on the target machine. Saving with PDF/A document type may result in larger output file sizes.</para><a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="WinRTicon.png" class="WinRTIconTag" name="WinRTIconTag" title="WinRT support" border="0" /></a></summary>
    </member>
    <member name="F:Leadtools.Forms.DocumentWriters.PdfDocumentType.Pdf12">
      <summary>(0x00000002)(2) <para>The target document should be PDF version 1.2.</para><para>PDF is generally not suited for long term preservation. The PDF format may contain resources (such as fonts) that may not exist on the viewing
            machine. As a result, font substitution may occur resulting in a document that may not look exactly like the original version.</para><a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="WinRTicon.png" class="WinRTIconTag" name="WinRTIconTag" title="WinRT support" border="0" /></a></summary>
    </member>
    <member name="F:Leadtools.Forms.DocumentWriters.PdfDocumentType.Pdf13">
      <summary>(0x00000003)(3) <para>The target document should be PDF version 1.3.</para><para>PDF is generally not suited for long term preservation. The PDF format may contain resources (such as fonts) that may not exist on the viewing
            machine. Hence font substitution may occur resulting in a document that may not look exactly like the original version.</para><a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="WinRTicon.png" class="WinRTIconTag" name="WinRTIconTag" title="WinRT support" border="0" /></a></summary>
    </member>
    <member name="F:Leadtools.Forms.DocumentWriters.PdfDocumentType.Pdf15">
      <summary>(0x00000004)(4) <para>The target document should be PDF version 1.5.</para><para>PDF is generally not suited for long term preservation. The PDF format may contain resources (such as fonts) that may not exist on the viewing
            machine. As a result font substitution may occur resulting in a document that may not look exactly like the original version.</para><a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="WinRTicon.png" class="WinRTIconTag" name="WinRTIconTag" title="WinRT support" border="0" /></a></summary>
    </member>
    <member name="F:Leadtools.Forms.DocumentWriters.PdfDocumentType.Pdf16">
      <summary>(0x00000005)(5) <para>The target document should be PDF version 1.6.</para><para>PDF is generally not suited for long term preservation. The PDF format may contain resources (such as fonts) that may not exist on the viewing
            machine. As a result font substitution may occur resulting in a document that may not look exactly like the original version.</para><a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="WinRTicon.png" class="WinRTIconTag" name="WinRTIconTag" title="WinRT support" border="0" /></a></summary>
    </member>
    <member name="T:Leadtools.Forms.DocumentWriters.PdfDocumentEncryptionMode">
      <summary>Specifies the PDF document encryption mode. <a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="WinRTicon.png" class="WinRTIconTag" name="WinRTIconTag" title="WinRT support" border="0" /></a></summary>
      <remarks>
        <para>The <see cref="T:Leadtools.Forms.DocumentWriters.PdfDocumentEncryptionMode" /> enumeration is used as the type for the
            <see cref="P:Leadtools.Forms.DocumentWriters.PdfDocumentOptions.EncryptionMode">PdfDocumentOptions.EncryptionMode</see> property.</para>
        <para>PDF encryption mode along with the owner password and the different owner access right properties allow creating customized
            security level in the resulting PDF document. For more information, refer to
            <see cref="P:Leadtools.Forms.DocumentWriters.PdfDocumentOptions.Protected">PdfDocumentOptions.Protected</see>.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.DocumentWriters.PdfDocumentOptions" />.</example>
      <docaddon>yes</docaddon>
      <keywords>Document Writers,PDF|Document Writers,PDF/A|Document Writers,Fonts</keywords>
      <seealso cref="T:FT.Topics.ProgrammingWithDocumentWriters">Programming with LEADTOOLS Document Writers</seealso>
      <seealso cref="T:Leadtools.Topics.FilesToBeIncludedWithYourApplication">Files to be Included with Your Application</seealso>
      <seealso cref="T:Leadtools.Topics.UnlockingSpecialLEADFeatures">Unlocking Special LEAD Features</seealso>
    </member>
    <member name="F:Leadtools.Forms.DocumentWriters.PdfDocumentEncryptionMode.RC40Bit">
      <summary>(0x00000000)(0) Use 40-bit RC4 encryption mode. <a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="WinRTicon.png" class="WinRTIconTag" name="WinRTIconTag" title="WinRT support" border="0" /></a></summary>
    </member>
    <member name="F:Leadtools.Forms.DocumentWriters.PdfDocumentEncryptionMode.RC128Bit">
      <summary>(0x00000001)(1) Use 128-bit RC4 encryption mode. <a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="WinRTicon.png" class="WinRTIconTag" name="WinRTIconTag" title="WinRT support" border="0" /></a></summary>
    </member>
    <member name="T:Leadtools.Forms.DocumentWriters.HtmlDocumentType">
      <summary>Specifies the HTML document type. <a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
      <remarks>
        <para>LEADTOOLS Document Writers can create different types of HTML documents. You can specify the HTML document type through the use of the
            <see cref="P:Leadtools.Forms.DocumentWriters.HtmlDocumentOptions.DocumentType">HtmlDocumentOptions.DocumentType</see> property.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.DocumentWriters.HtmlDocumentOptions" />.</example>
      <docaddon>yes</docaddon>
      <keywords>Document Writers,HTML</keywords>
      <seealso cref="T:FT.Topics.ProgrammingWithDocumentWriters">Programming with LEADTOOLS Document Writers</seealso>
      <seealso cref="T:Leadtools.Topics.FilesToBeIncludedWithYourApplication">Files to be Included with Your Application</seealso>
      <seealso cref="T:Leadtools.Topics.UnlockingSpecialLEADFeatures">Unlocking Special LEAD Features</seealso>
    </member>
    <member name="F:Leadtools.Forms.DocumentWriters.HtmlDocumentType.IE">
      <summary>(0x00000000)(0) <para>The target document is compatible with Microsoft Internet Explorer.</para><a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
    </member>
    <member name="F:Leadtools.Forms.DocumentWriters.HtmlDocumentType.Netscape">
      <summary>(0x00000001)(0x00000002)(1) <para>The target document is compatible with Netscape Navigator.</para><a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
    </member>
    <member name="F:Leadtools.Forms.DocumentWriters.HtmlDocumentType.IENetscape">
      <summary>(0x00000002)(2) <para>The target document is compatible with Microsoft Internet Explorer and Netscape Navigator.</para><a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
    </member>
    <member name="T:Leadtools.Forms.DocumentWriters.TextDocumentType">
      <summary>Specifies the Text document type. <a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="WinRTicon.png" class="WinRTIconTag" name="WinRTIconTag" title="WinRT support" border="0" /></a></summary>
      <remarks>
        <para>LEADTOOLS Document Writers can create different flavors of Text documents. You can specify the Text document type through the use of the
            <see cref="P:Leadtools.Forms.DocumentWriters.TextDocumentOptions.DocumentType">TextDocumentOptions.DocumentType</see> property.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.DocumentWriters.TextDocumentOptions" />.</example>
      <docaddon>yes</docaddon>
      <keywords>Document Writers,Text</keywords>
      <seealso cref="T:FT.Topics.ProgrammingWithDocumentWriters">Programming with LEADTOOLS Document Writers</seealso>
      <seealso cref="T:Leadtools.Topics.FilesToBeIncludedWithYourApplication">Files to be Included with Your Application</seealso>
      <seealso cref="T:Leadtools.Topics.UnlockingSpecialLEADFeatures">Unlocking Special LEAD Features</seealso>
    </member>
    <member name="F:Leadtools.Forms.DocumentWriters.TextDocumentType.Ansi">
      <summary>(0x00000000)(0) <para>The output text document type is ANSI (contains 8-bit ANSI characters only).</para><a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="WinRTicon.png" class="WinRTIconTag" name="WinRTIconTag" title="WinRT support" border="0" /></a></summary>
    </member>
    <member name="F:Leadtools.Forms.DocumentWriters.TextDocumentType.Unicode">
      <summary>(0x00000001)(1) <para>The output text document type is UNICODE (contains 16-bit UNICODE characters).</para><a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="WinRTicon.png" class="WinRTIconTag" name="WinRTIconTag" title="WinRT support" border="0" /></a></summary>
    </member>
    <member name="F:Leadtools.Forms.DocumentWriters.TextDocumentType.UnicodeBigEndian">
      <summary>(0x00000002)(2) <para>The output text document type is UNICODE with Big Endian, the most significant byte (MSB) value is stored at the memory location with the lowest address.</para><a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="WinRTicon.png" class="WinRTIconTag" name="WinRTIconTag" title="WinRT support" border="0" /></a></summary>
    </member>
    <member name="F:Leadtools.Forms.DocumentWriters.TextDocumentType.UTF8">
      <summary>(0x00000003)(3) <para>The output text document type is UTF8.</para><a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
    </member>
    <member name="T:Leadtools.Forms.DocumentWriters.DocumentImageOverTextSize">
      <summary>Specifies the resize options for the overlay image (image over text). <a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="WinRTicon.png" class="WinRTIconTag" name="WinRTIconTag" title="WinRT support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="winrtphone.png" class="WinRTPhoneIconTag" name="WinRTPhoneIconTag" title="WinRT Phone support" border="0" /></a></summary>
      <remarks>
        <para>Use this option to control the resize options for the optional overlay image. Refer to <see cref="P:Leadtools.Forms.DocumentWriters.PdfDocumentOptions.ImageOverTextSize">PdfDocumentOptions.ImageOverTextSize</see> and <see cref="P:Leadtools.Forms.DocumentWriters.PdfDocumentOptions.ImageOverText">PdfDocumentOptions.ImageOverText</see> for more information.</para>
      </remarks>
      <noexample />
    </member>
    <member name="F:Leadtools.Forms.DocumentWriters.DocumentImageOverTextSize.Original">
      <summary>(0x00000000)<para>Use original size (no resizing is performed). Output will have highest quality and largest size.</para><a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="WinRTicon.png" class="WinRTIconTag" name="WinRTIconTag" title="WinRT support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="winrtphone.png" class="WinRTPhoneIconTag" name="WinRTPhoneIconTag" title="WinRT Phone support" border="0" /></a></summary>
    </member>
    <member name="F:Leadtools.Forms.DocumentWriters.DocumentImageOverTextSize.Half">
      <summary>(0x00000001)<para>Resize the image by two and stretch over to cover the page. Output will have the best ratio between quality and size.</para><a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="WinRTicon.png" class="WinRTIconTag" name="WinRTIconTag" title="WinRT support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="winrtphone.png" class="WinRTPhoneIconTag" name="WinRTPhoneIconTag" title="WinRT Phone support" border="0" /></a></summary>
    </member>
    <member name="F:Leadtools.Forms.DocumentWriters.DocumentImageOverTextSize.Quarter">
      <summary>(0x00000002)<para>Resize the image by 4 and stretch over to cover the page. Output will have the lowest quality and minimum size.</para><a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="WinRTicon.png" class="WinRTIconTag" name="WinRTIconTag" title="WinRT support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="winrtphone.png" class="WinRTPhoneIconTag" name="WinRTPhoneIconTag" title="WinRT Phone support" border="0" /></a></summary>
    </member>
    <member name="T:Leadtools.Forms.DocumentWriters.DocumentImageOverTextMode">
      <summary>Specifies the how the document writer converts the overlay image (image over text). <a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="WinRTicon.png" class="WinRTIconTag" name="WinRTIconTag" title="WinRT support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="winrtphone.png" class="WinRTPhoneIconTag" name="WinRTPhoneIconTag" title="WinRT Phone support" border="0" /></a></summary>
      <remarks>
        <para>Use this option to control how the document writer converts the optional overlay image. Refer to <see cref="P:Leadtools.Forms.DocumentWriters.PdfDocumentOptions.ImageOverTextSize">PdfDocumentOptions.ImageOverTextSize</see> and <see cref="P:Leadtools.Forms.DocumentWriters.PdfDocumentOptions.ImageOverText">PdfDocumentOptions.ImageOverText</see> for more information.</para>
        <para>Currently this option is only used to determine when to convert grayscale overlay images to black and white in the final document. This is done to minimize the size
            of the output document.</para>
      </remarks>
      <noexample />
    </member>
    <member name="F:Leadtools.Forms.DocumentWriters.DocumentImageOverTextMode.None">
      <summary>(0x00000000)<para>Apply no rules. The image will be used as is and no detection is perform.</para><a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="WinRTicon.png" class="WinRTIconTag" name="WinRTIconTag" title="WinRT support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="winrtphone.png" class="WinRTPhoneIconTag" name="WinRTPhoneIconTag" title="WinRT Phone support" border="0" /></a></summary>
    </member>
    <member name="F:Leadtools.Forms.DocumentWriters.DocumentImageOverTextMode.Strict">
      <summary>(0x00000001)<para>The document writer will determine if the image is grayscale, if so, it will convert the image to black and white (1 bit per pixel) only if the image
            contains no grayscale values besides pure black and white.</para><a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="WinRTicon.png" class="WinRTIconTag" name="WinRTIconTag" title="WinRT support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="winrtphone.png" class="WinRTPhoneIconTag" name="WinRTPhoneIconTag" title="WinRT Phone support" border="0" /></a></summary>
    </member>
    <member name="F:Leadtools.Forms.DocumentWriters.DocumentImageOverTextMode.Relaxed">
      <summary>(0x00000002)<para>The document writer will determine if the image is grayscale. If the image has noise or shadows, they will be ignored and the image is converted to black and white
            (1 bit per pixel).</para><a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="WinRTicon.png" class="WinRTIconTag" name="WinRTIconTag" title="WinRT support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="winrtphone.png" class="WinRTPhoneIconTag" name="WinRTPhoneIconTag" title="WinRT Phone support" border="0" /></a></summary>
    </member>
    <member name="T:Leadtools.Forms.DocumentWriters.DocumentPageType">
      <summary>Specifies the document type. <a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
      <remarks>
        <para>Use this option to retrieve the document type.</para>
      </remarks>
      <noexample />
    </member>
    <member name="F:Leadtools.Forms.DocumentWriters.DocumentPageType.Emf">
      <summary>(0x00000000)<para>EMF page (<see cref="T:Leadtools.Forms.DocumentWriters.DocumentEmfPage" />).</para><a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="WinRTicon.png" class="WinRTIconTag" name="WinRTIconTag" title="WinRT support" border="0" /></a></summary>
    </member>
    <member name="F:Leadtools.Forms.DocumentWriters.DocumentPageType.Svg">
      <summary>(0x00000001)<para>SVG page (<see cref="T:Leadtools.Forms.DocumentWriters.DocumentSvgPage" />).</para><a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
    </member>
    <member name="F:Leadtools.Forms.DocumentWriters.DocumentPageType.Raster">
      <summary>(0x00000002)<para>Raster image page (<see cref="T:Leadtools.Forms.DocumentWriters.DocumentRasterPage" />).</para><a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
    </member>
    <member name="F:Leadtools.Forms.DocumentWriters.DocumentPageType.Empty">
      <summary>(0x00000003)<para>an Empty page (<see cref="T:Leadtools.Forms.DocumentWriters.DocumentEmptyPage" />).</para><a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
    </member>
    <member name="T:Leadtools.Forms.DocumentWriters.PdfDocumentPageModeType">
      <summary>Specifies the PDF initial view document page mode type. <a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
      <remarks>
        <para>Use this option to set/retrieve the PageModeType in <see cref="T:Leadtools.Forms.DocumentWriters.PdfDocumentOptions">PdfDocumentOptions</see>.</para>
      </remarks>
      <noexample />
    </member>
    <member name="F:Leadtools.Forms.DocumentWriters.PdfDocumentPageModeType.PageOnly">
      <summary>(0x00000000)<para>Neither document outline nor thumbnail images visible.</para><a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
    </member>
    <member name="F:Leadtools.Forms.DocumentWriters.PdfDocumentPageModeType.BookmarksAndPage">
      <summary>(0x00000001)<para>Document bookmarks visible.</para><a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
    </member>
    <member name="F:Leadtools.Forms.DocumentWriters.PdfDocumentPageModeType.ThumbnailAndPage">
      <summary>(0x00000002)<para>Thumbnail images visible.</para><a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
    </member>
    <member name="F:Leadtools.Forms.DocumentWriters.PdfDocumentPageModeType.FullScreen">
      <summary>(0x00000003)<para>Full-screen mode, with no menu bar, window controls, or any other window visible.</para><a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
    </member>
    <member name="F:Leadtools.Forms.DocumentWriters.PdfDocumentPageModeType.LayerAndPage">
      <summary>(0x00000004)<para>Layer panel visible.</para><a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
    </member>
    <member name="F:Leadtools.Forms.DocumentWriters.PdfDocumentPageModeType.AttachmentsAndPage">
      <summary>(0x00000005)<para>Attachments panel visible.</para><a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
    </member>
    <member name="T:Leadtools.Forms.DocumentWriters.DocumentTextMode">
      <summary>Specifies the document text mode. <a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
      <remarks>
        <para>Use this option to set/retrieve the text mode in <see cref="T:Leadtools.Forms.DocumentWriters.DocDocumentOptions">DocDocumentOptions</see>.</para>
      </remarks>
      <noexample />
    </member>
    <member name="F:Leadtools.Forms.DocumentWriters.DocumentTextMode.Auto">
      <summary>(0x00000000)<para>The document will be automatically have framed/non-framed text in the resulting Doc/Docx/Rtf documents (this is not implemented currently, so Auto will be equivalent to NonFramed).</para><a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="WinRTicon.png" class="WinRTIconTag" name="WinRTIconTag" title="WinRT support" border="0" /></a></summary>
    </member>
    <member name="F:Leadtools.Forms.DocumentWriters.DocumentTextMode.NonFramed">
      <summary>(0x00000001)<para>Flow text in the resulting Doc/Docx/Rtf documents.</para><a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
    </member>
    <member name="F:Leadtools.Forms.DocumentWriters.DocumentTextMode.Framed">
      <summary>(0x00000001)(0x00000002)<para>Set frame the text blocks (use text box objects) in the resulting Doc/Docx/Rtf documents.</para><a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
    </member>
    <member name="T:Leadtools.Forms.DocumentWriters.AltoXmlMeasurementUnit">
      <summary>Specifies the measurement unit. <a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
      <remarks>
        <para>Use this option to set/retrieve the measurement unit in <see cref="T:Leadtools.Forms.DocumentWriters.AltoXmlDocumentOptions">AltoXmlDocumentOptions</see>. 
            All measurement values inside the alto file except fontsize are related to one of these units. The default is 1/10 of mm (MM10)</para>
      </remarks>
      <noexample />
    </member>
    <member name="F:Leadtools.Forms.DocumentWriters.AltoXmlMeasurementUnit.MM10">
      <summary>(0x00000000)<para>Measurement for ALTO file in 1/10mm.</para><a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
    </member>
    <member name="F:Leadtools.Forms.DocumentWriters.AltoXmlMeasurementUnit.Inch1200">
      <summary>(0x00000001)<para>Measurement for ALTO file in 1/1200inches.</para><a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
    </member>
    <member name="F:Leadtools.Forms.DocumentWriters.AltoXmlMeasurementUnit.Dpi">
      <summary>(0x00000002)<para>Measurement for ALTO file in dots per inch.</para><a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
    </member>
    <member name="F:Leadtools.Forms.DocumentWriters.AltoXmlMeasurementUnit.Pixel">
      <summary>(0x00000003)<para>Measurement for ALTO file in pixels.</para><a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
    </member>
    <member name="T:Leadtools.Forms.DocumentWriters.PdfDocumentPageFitType">
      <summary>Specifies the page fit option. <a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
      <remarks>
        <para>Use this option to set/retrieve the page fit type in <see cref="T:Leadtools.Forms.DocumentWriters.PdfDocumentOptions">PdfDocumentOptions</see>.</para>
      </remarks>
      <noexample />
    </member>
    <member name="F:Leadtools.Forms.DocumentWriters.PdfDocumentPageFitType.Default">
      <summary>(0x00000000)<para>Default page fit type.</para><a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="WinRTicon.png" class="WinRTIconTag" name="WinRTIconTag" title="WinRT support" border="0" /></a></summary>
    </member>
    <member name="F:Leadtools.Forms.DocumentWriters.PdfDocumentPageFitType.FitWidth">
      <summary>(0x00000001)<para>Fit page width.</para><a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
    </member>
    <member name="F:Leadtools.Forms.DocumentWriters.PdfDocumentPageFitType.FitHeight">
      <summary>(0x00000002)<para>Fit page height.</para><a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
    </member>
    <member name="F:Leadtools.Forms.DocumentWriters.PdfDocumentPageFitType.FitWidthBounds">
      <summary>(0x00000003)<para>Fit page width bounds.</para><a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
    </member>
    <member name="F:Leadtools.Forms.DocumentWriters.PdfDocumentPageFitType.FitHeightBounds">
      <summary>(0x00000004)<para>Fit page height bounds.</para><a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
    </member>
    <member name="F:Leadtools.Forms.DocumentWriters.PdfDocumentPageFitType.FitBounds">
      <summary>(0x00000005)<para>Fit page bounds.</para><a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
    </member>
    <member name="T:Leadtools.Forms.DocumentWriters.PdfDocumentPageLayoutType">
      <summary>Specifies the page layout option. <a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
      <remarks>
        <para>Use this option to set/retrieve the page layout type in <see cref="T:Leadtools.Forms.DocumentWriters.PdfDocumentOptions">PdfDocumentOptions</see>.</para>
      </remarks>
      <noexample />
    </member>
    <member name="F:Leadtools.Forms.DocumentWriters.PdfDocumentPageLayoutType.SinglePageDisplay">
      <summary>(0x00000000)<para>Display one page at a time.</para><a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
    </member>
    <member name="F:Leadtools.Forms.DocumentWriters.PdfDocumentPageLayoutType.OneColumnDisplay">
      <summary>(0x00000001)<para>Display the pages in one column.</para><a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
    </member>
    <member name="F:Leadtools.Forms.DocumentWriters.PdfDocumentPageLayoutType.TwoColumnLeftDisplay">
      <summary>(0x00000002)<para>Display the pages in two columns, with odd-numbered pages on the left.</para><a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
    </member>
    <member name="F:Leadtools.Forms.DocumentWriters.PdfDocumentPageLayoutType.TwoColumnRightDisplay">
      <summary>(0x00000003)<para>Display the pages in two columns, with odd-numbered pages on the right.</para><a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
    </member>
    <member name="F:Leadtools.Forms.DocumentWriters.PdfDocumentPageLayoutType.TwoPageLeft">
      <summary>(0x00000004)<para>Display the pages two at a time, with odd-numbered pages on the left.</para><a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
    </member>
    <member name="F:Leadtools.Forms.DocumentWriters.PdfDocumentPageLayoutType.TwoPageRight">
      <summary>(0x00000005)<para>Display the pages two at a time, with odd-numbered pages on the right.</para><a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
    </member>
    <member name="T:Leadtools.Forms.DocumentWriters.DocumentProgressEventArgs">
      <summary>Provides data for the <see cref="E:Leadtools.Forms.DocumentWriters.DocumentWriter.Progress">DocumentWriter.Progress</see> event. <a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="WinRTicon.png" class="WinRTIconTag" name="WinRTIconTag" title="WinRT support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="winrtphone.png" class="WinRTPhoneIconTag" name="WinRTPhoneIconTag" title="WinRT Phone support" border="0" /></a></summary>
      <remarks>
        <para>The <see cref="E:Leadtools.Forms.DocumentWriters.DocumentWriter.Progress">DocumentWriter.Progress</see> event allows you to monitor the progress of a document writer operation as well as cancel
            the operation if required. This event occur when calling the following methods of the <see cref="T:Leadtools.Forms.DocumentWriters.DocumentWriter" /> class:
            <list type="bullet"><item><description><see cref="M:Leadtools.Forms.DocumentWriters.DocumentWriter.BeginDocument(System.String,Leadtools.Forms.DocumentWriters.DocumentFormat)">DocumentWriter.BeginDocument</see></description></item><item><description><see cref="M:Leadtools.Forms.DocumentWriters.DocumentWriter.AddPage(Leadtools.Forms.DocumentWriters.DocumentPage)">DocumentWriter.AddPage</see> or <see cref="M:Leadtools.Forms.DocumentWriters.DocumentWriter.InsertPage(Leadtools.Forms.DocumentWriters.DocumentPage,System.Int32)">DocumentWriter.InsertPage</see></description></item><item><description><see cref="M:Leadtools.Forms.DocumentWriters.DocumentWriter.EndDocument">DocumentWriter.EndDocument</see></description></item><item><description><see cref="M:Leadtools.Forms.DocumentWriters.DocumentWriter.Convert(System.String,System.String,Leadtools.Forms.DocumentWriters.DocumentFormat)">DocumentWriter.Convert</see></description></item></list></para>
        <para>The <see cref="T:Leadtools.Forms.DocumentWriters.DocumentProgressEventArgs" /> class contains the following:
            <list type="bullet"><item><description><see cref="P:Leadtools.Forms.DocumentWriters.DocumentProgressEventArgs.Percentage">DocumentProgressEventArgs.Percentage</see> property. The value of this property will go from
            0 to 100 during an operation. This property is read-only.</description></item><item><description><see cref="P:Leadtools.Forms.DocumentWriters.DocumentProgressEventArgs.Cancel">DocumentProgressEventArgs.Cancel</see> property. Setting the value of this property to <strong>true</strong> will
            cancel the current operation.</description></item></list></para>
      </remarks>
      <example>For an example, refer to <see cref="E:Leadtools.Forms.DocumentWriters.DocumentWriter.Progress">DocumentWriter.Progress</see>.</example>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.DocumentWriters.DocumentWriter" />
      <seealso cref="T:FT.Topics.ProgrammingWithDocumentWriters">Programming with LEADTOOLS Document Writers</seealso>
      <seealso cref="T:Leadtools.Topics.FilesToBeIncludedWithYourApplication">Files to be Included with Your Application</seealso>
      <seealso cref="T:Leadtools.Topics.UnlockingSpecialLEADFeatures">Unlocking Special LEAD Features</seealso>
    </member>
    <member name="M:Leadtools.Forms.DocumentWriters.DocumentProgressEventArgs.#ctor(System.Int32)">
      <summary>Initializes a new <see cref="T:Leadtools.Forms.DocumentWriters.DocumentProgressEventArgs" /> object with given parameters. <a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="WinRTicon.png" class="WinRTIconTag" name="WinRTIconTag" title="WinRT support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="winrtphone.png" class="WinRTPhoneIconTag" name="WinRTPhoneIconTag" title="WinRT Phone support" border="0" /></a></summary>
      <param name="percentage">Progress percentage value (from 0 to 100).</param>
      <remarks>
        <para>You do not need to initialize an instance of the <see cref="T:Leadtools.Forms.DocumentWriters.DocumentProgressEventArgs" /> class normally.</para>
      </remarks>
      <example>For an example, refer to <see cref="E:Leadtools.Forms.DocumentWriters.DocumentWriter.Progress">DocumentWriter.Progress</see>.</example>
      <docaddon>yes</docaddon>
      <seealso cref="E:Leadtools.Forms.DocumentWriters.DocumentWriter.Progress_EV">DocumentWriter.Progress</seealso>
      <seealso cref="T:FT.Topics.ProgrammingWithDocumentWriters">Programming with LEADTOOLS Document Writers</seealso>
      <seealso cref="T:Leadtools.Topics.FilesToBeIncludedWithYourApplication">Files to be Included with Your Application</seealso>
      <seealso cref="T:Leadtools.Topics.UnlockingSpecialLEADFeatures">Unlocking Special LEAD Features</seealso>
    </member>
    <member name="P:Leadtools.Forms.DocumentWriters.DocumentProgressEventArgs.Percentage">
      <summary>Gets the value, in percent, of the completion for the current operation. <a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="WinRTicon.png" class="WinRTIconTag" name="WinRTIconTag" title="WinRT support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="winrtphone.png" class="WinRTPhoneIconTag" name="WinRTPhoneIconTag" title="WinRT Phone support" border="0" /></a></summary>
      <value>A number between 0 and 100 that indicates in percent how close to finishing the current operation is.</value>
      <remarks>
        <para>Use this property to provide visual feedback to the user in a progress bar.</para>
      </remarks>
      <example>For an example, refer to <see cref="E:Leadtools.Forms.DocumentWriters.DocumentWriter.Progress">DocumentWriter.Progress</see>.</example>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.DocumentWriters.DocumentWriter" />
      <seealso cref="E:Leadtools.Forms.DocumentWriters.DocumentWriter.Progress_EV">DocumentWriter.Progress</seealso>
      <seealso cref="T:FT.Topics.ProgrammingWithDocumentWriters">Programming with LEADTOOLS Document Writers</seealso>
      <seealso cref="T:Leadtools.Topics.FilesToBeIncludedWithYourApplication">Files to be Included with Your Application</seealso>
      <seealso cref="T:Leadtools.Topics.UnlockingSpecialLEADFeatures">Unlocking Special LEAD Features</seealso>
    </member>
    <member name="P:Leadtools.Forms.DocumentWriters.DocumentProgressEventArgs.Cancel">
      <summary>Gets or sets a value to allow the user to cancel the current operation. <a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="WinRTicon.png" class="WinRTIconTag" name="WinRTIconTag" title="WinRT support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="winrtphone.png" class="WinRTPhoneIconTag" name="WinRTPhoneIconTag" title="WinRT Phone support" border="0" /></a></summary>
      <value>
        <strong>true</strong> to cancel the current operation; <strong>false</strong> to continue the current operation.</value>
      <remarks>
        <para>Some of the <see cref="T:Leadtools.Forms.DocumentWriters.DocumentWriter" /> operations that use the progress monitor can be lengthy. You can allow the user to cancel the operation
            by using the <see cref="E:Leadtools.Forms.DocumentWriters.DocumentWriter.Progress">DocumentWriter.Progress</see> event to show a progress bar and a cancel button in your application. If the user
            presses the cancel button, you can set the value of the <see cref="P:Leadtools.Forms.DocumentWriters.DocumentProgressEventArgs.Cancel" /> property to <strong>true</strong> to abort the current operation.</para>
      </remarks>
      <example>For an example, refer to <see cref="E:Leadtools.Forms.DocumentWriters.DocumentWriter.Progress">DocumentWriter.Progress</see>.</example>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.DocumentWriters.DocumentWriter" />
      <seealso cref="E:Leadtools.Forms.DocumentWriters.DocumentWriter.Progress_EV">DocumentWriter.Progress</seealso>
      <seealso cref="T:FT.Topics.ProgrammingWithDocumentWriters">Programming with LEADTOOLS Document Writers</seealso>
      <seealso cref="T:Leadtools.Topics.FilesToBeIncludedWithYourApplication">Files to be Included with Your Application</seealso>
      <seealso cref="T:Leadtools.Topics.UnlockingSpecialLEADFeatures">Unlocking Special LEAD Features</seealso>
    </member>
    <member name="T:Leadtools.Forms.DocumentWriters.HtmlDocumentOptions">
      <summary>Provides extra options to use when saving a document using the HyperText Markup Language (HTML) format. <a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
      <remarks>
        <para>The options set in the <see cref="T:Leadtools.Forms.DocumentWriters.HtmlDocumentOptions" /> class will be used when the user saves a document using the <see cref="T:Leadtools.Forms.DocumentWriters.DocumentFormat">DocumentFormat.Html</see> format.</para>
        <para>To change the options used with the DOC format, perform the following steps:
            <ol><li>Use the <see cref="M:Leadtools.Forms.DocumentWriters.DocumentWriter.GetOptions(Leadtools.Forms.DocumentWriters.DocumentFormat)">DocumentWriter.GetOptions</see> method of the <see cref="T:Leadtools.Forms.DocumentWriters.DocumentWriter" /> object being used. 
                     Passing <see cref="T:Leadtools.Forms.DocumentWriters.DocumentFormat">DocumentFormat.Html</see> to the <i>format</i> parameter. Note that the resulting object from the
                     base <see cref="T:Leadtools.Forms.DocumentWriters.DocumentOptions" /> class needs to be cast to <see cref="T:Leadtools.Forms.DocumentWriters.HtmlDocumentOptions" />.</li><li>Use the various <see cref="T:Leadtools.Forms.DocumentWriters.HtmlDocumentOptions" /> properties to change the options.</li><li>Use <see cref="M:Leadtools.Forms.DocumentWriters.DocumentWriter.SetOptions(Leadtools.Forms.DocumentWriters.DocumentFormat,Leadtools.Forms.DocumentWriters.DocumentOptions)">DocumentWriter.SetOptions</see> to set the new options in the engine.</li><li>Now you can call the <see cref="M:Leadtools.Forms.DocumentWriters.DocumentWriter.BeginDocument(System.String,Leadtools.Forms.DocumentWriters.DocumentFormat)">DocumentWriter.BeginDocument</see> method (with <see cref="T:Leadtools.Forms.DocumentWriters.DocumentFormat">DocumentFormat.Html</see> for the
                    <i>format</i> parameter) to create a new document and add the pages.</li></ol></para>
        <para>The <see cref="T:Leadtools.Forms.DocumentWriters.HtmlDocumentOptions" /> class contains the following properties:
            <table><tr><th>Property</th><th>Description</th></tr><tr><td><see cref="P:Leadtools.Forms.DocumentWriters.HtmlDocumentOptions.DocumentType" /></td><td>The type of the HTML document (Internet Explorer or Netscape compatible).</td></tr><tr><td><see cref="P:Leadtools.Forms.DocumentWriters.HtmlDocumentOptions.FontEmbedMode" /></td><td>Control how the fonts are embedded in the final document created by the LEADTOOLS Document Writer.</td></tr><tr><td><see cref="P:Leadtools.Forms.DocumentWriters.HtmlDocumentOptions.UseBackgroundColor" /> and <see cref="P:Leadtools.Forms.DocumentWriters.HtmlDocumentOptions.BackgroundColor" /></td><td>Controls the background color in the final HTML document.</td></tr></table></para>
        <para>Note that this format does not support calling <see cref="M:Leadtools.Forms.DocumentWriters.DocumentWriter.InsertPage(Leadtools.Forms.DocumentWriters.DocumentPage,System.Int32)">DocumentWriter.InsertPage</see>.</para>
      </remarks>
      <example>
        <p>This example will create a new HyperText Markup Language document (HTML) file using the various supported options.
            </p>
        <code lang="VB">      Imports Leadtools.Forms.DocumentWriters
      Imports Leadtools
      Imports Leadtools.Codecs

      &lt;TestMethod&gt; _
      Public Sub HtmlDocumentOptionsExample()
         Dim inputFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "Leadtools.pdf")
         Dim outputFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "Example.html")
         ' Setup a new RasterCodecs object
         Dim codecs As New RasterCodecs()
         codecs.Options.RasterizeDocument.Load.Resolution = 300

         ' Get the number of pages in the input document
         Dim pageCount As Integer = codecs.GetTotalPages(inputFileName)

         ' Create a new instance of the LEADTOOLS Document Writer
         Dim docWriter As New DocumentWriter()

         ' Change the HTML options
         Dim htmlOptions As HtmlDocumentOptions = DirectCast(docWriter.GetOptions(DocumentFormat.Html), HtmlDocumentOptions)
         htmlOptions.DocumentType = HtmlDocumentType.IENetscape
         htmlOptions.FontEmbedMode = DocumentFontEmbedMode.None
         htmlOptions.UseBackgroundColor = True
         htmlOptions.BackgroundColor = RasterColor.FromKnownColor(RasterKnownColor.LightBlue)
         docWriter.SetOptions(DocumentFormat.Html, htmlOptions)

         ' Create a new HTML document
         Console.WriteLine("Creating new HTML document: {0}", outputFileName)
         docWriter.BeginDocument(outputFileName, DocumentFormat.Html)

         ' Loop through all the pages
         For pageNumber As Integer = 1 To pageCount
            ' Get the page as SVG
            Console.WriteLine("Loading page {0}", pageNumber)
            Dim page As New DocumentSvgPage()
            page.SvgDocument = codecs.LoadSvg(inputFileName, pageNumber, Nothing)

            ' Add the page
            Console.WriteLine("Adding page {0}", pageNumber)
            docWriter.AddPage(page)

            page.SvgDocument.Dispose()
         Next

         ' Finally finish writing the HTML file on disk
         docWriter.EndDocument()
         codecs.Dispose()
      End Sub</code>
        <code lang="CS">      using Leadtools.Forms.DocumentWriters;
      using Leadtools;
      using Leadtools.Codecs;

      public void HtmlDocumentOptionsExample()
      {
         var inputFileName = Path.Combine(LEAD_VARS.ImagesDir, "Leadtools.pdf");
         var outputFileName = Path.Combine(LEAD_VARS.ImagesDir, "Example.html");
         // Setup a new RasterCodecs object
         var codecs = new RasterCodecs();
         codecs.Options.RasterizeDocument.Load.Resolution = 300;

         // Get the number of pages in the input document
         var pageCount = codecs.GetTotalPages(inputFileName);

         // Create a new instance of the LEADTOOLS Document Writer
         var docWriter = new DocumentWriter();

         // Change the HTML options
         var htmlOptions = docWriter.GetOptions(DocumentFormat.Html) as HtmlDocumentOptions;
         htmlOptions.DocumentType = HtmlDocumentType.IENetscape;
         htmlOptions.FontEmbedMode = DocumentFontEmbedMode.None;
         htmlOptions.UseBackgroundColor = true;
         htmlOptions.BackgroundColor = RasterColor.FromKnownColor(RasterKnownColor.LightBlue);
         docWriter.SetOptions(DocumentFormat.Html, htmlOptions);

         // Create a new HTML document
         Console.WriteLine("Creating new HTML document: {0}", outputFileName);
         docWriter.BeginDocument(outputFileName, DocumentFormat.Html);

         // Loop through all the pages
         for (var pageNumber = 1; pageNumber &lt;= pageCount; pageNumber++)
         {
            // Get the page as SVG
            Console.WriteLine("Loading page {0}", pageNumber);
            var page = new DocumentSvgPage();
            page.SvgDocument = codecs.LoadSvg(inputFileName, pageNumber, null);

            // Add the page
            Console.WriteLine("Adding page {0}", pageNumber);
            docWriter.AddPage(page);

            page.SvgDocument.Dispose();
         }

         // Finally finish writing the HTML file on disk
         docWriter.EndDocument();
         codecs.Dispose();
      }</code>
      </example>
      <keywords>HTML|HTM|Document Writers,HTML|Document Writers,HTM</keywords>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.DocumentWriters.DocumentWriter" />
      <seealso cref="T:FT.Topics.ProgrammingWithDocumentWriters">Programming with LEADTOOLS Document Writers</seealso>
      <seealso cref="T:Leadtools.Topics.FilesToBeIncludedWithYourApplication">Files to be Included with Your Application</seealso>
      <seealso cref="T:Leadtools.Topics.UnlockingSpecialLEADFeatures">Unlocking Special LEAD Features</seealso>
    </member>
    <member name="M:Leadtools.Forms.DocumentWriters.HtmlDocumentOptions.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Leadtools.Forms.DocumentWriters.HtmlDocumentOptions" /> class. <a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
      <remarks>
        <para>The following table lists the default values of the <see cref="T:Leadtools.Forms.DocumentWriters.HtmlDocumentOptions" /> properties:
            <table><tr><th>Property</th><th>Value</th></tr><tr><td><see cref="P:Leadtools.Forms.DocumentWriters.HtmlDocumentOptions.DocumentType" /></td><td><see cref="T:Leadtools.Forms.DocumentWriters.HtmlDocumentType">HtmlDocumentType.IE</see></td></tr><tr><td><see cref="P:Leadtools.Forms.DocumentWriters.HtmlDocumentOptions.FontEmbedMode" /></td><td><see cref="T:Leadtools.Forms.DocumentWriters.DocumentFontEmbedMode">DocumentFontEmbedMode.None</see></td></tr><tr><td><see cref="P:Leadtools.Forms.DocumentWriters.HtmlDocumentOptions.UseBackgroundColor" /></td><td><strong>false</strong></td></tr><tr><td><see cref="P:Leadtools.Forms.DocumentWriters.HtmlDocumentOptions.BackgroundColor" /></td><td>White color</td></tr></table></para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.DocumentWriters.HtmlDocumentOptions" />.</example>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.DocumentWriters.DocumentWriter" />
      <seealso cref="T:FT.Topics.ProgrammingWithDocumentWriters">Programming with LEADTOOLS Document Writers</seealso>
      <seealso cref="T:Leadtools.Topics.FilesToBeIncludedWithYourApplication">Files to be Included with Your Application</seealso>
      <seealso cref="T:Leadtools.Topics.UnlockingSpecialLEADFeatures">Unlocking Special LEAD Features</seealso>
    </member>
    <member name="M:Leadtools.Forms.DocumentWriters.HtmlDocumentOptions.Clone">
      <summary>Creates an exact copy of this <see cref="T:Leadtools.Forms.DocumentWriters.DocumentOptions" />. <a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
      <returns>The <see cref="T:Leadtools.Forms.DocumentWriters.DocumentOptions" /> this method creates.</returns>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Forms.DocumentWriters.DocumentWriter" />.</example>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.DocumentWriters.DocumentWriter">Document Writers</seealso>
      <seealso cref="T:FT.Topics.ProgrammingWithDocumentWriters">Programming with LEADTOOLS Document Writers</seealso>
      <seealso cref="T:Leadtools.Topics.FilesToBeIncludedWithYourApplication">Files to be Included with Your Application</seealso>
      <seealso cref="T:Leadtools.Topics.UnlockingSpecialLEADFeatures">Unlocking Special LEAD Features</seealso>
    </member>
    <member name="P:Leadtools.Forms.DocumentWriters.HtmlDocumentOptions.Format">
      <summary>Gets the document format type associated with this options class. <a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
      <value>This property will always return <see cref="T:Leadtools.Forms.DocumentWriters.DocumentFormat">DocumentFormat.Html</see>.</value>
      <remarks>
        <para>This property is required internally by LEADTOOLS.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.DocumentWriters.HtmlDocumentOptions" />.</example>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.DocumentWriters.DocumentWriter" />
      <seealso cref="T:FT.Topics.ProgrammingWithDocumentWriters">Programming with LEADTOOLS Document Writers</seealso>
      <seealso cref="T:Leadtools.Topics.FilesToBeIncludedWithYourApplication">Files to be Included with Your Application</seealso>
      <seealso cref="T:Leadtools.Topics.UnlockingSpecialLEADFeatures">Unlocking Special LEAD Features</seealso>
    </member>
    <member name="P:Leadtools.Forms.DocumentWriters.HtmlDocumentOptions.UseBackgroundColor">
      <summary>Gets or sets a value indicating whether the HTML document will use the a background color or not. <a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
      <value>
        <strong>true</strong> to use the background color in the HTML document; <strong>false</strong>, otherwise.</value>
      <remarks>
        <para>The HTML format supports adding a background color to the final document. To use a background color, set the value of the
            <see cref="P:Leadtools.Forms.DocumentWriters.HtmlDocumentOptions.UseBackgroundColor" /> property to <strong>true</strong> and set the color value required in the <see cref="P:Leadtools.Forms.DocumentWriters.HtmlDocumentOptions.BackgroundColor" /> property.</para>
        <para>If the value of the <see cref="P:Leadtools.Forms.DocumentWriters.HtmlDocumentOptions.UseBackgroundColor" /> property is <strong>false</strong>, then the final document will not contain a background color and the
            value of the <see cref="P:Leadtools.Forms.DocumentWriters.HtmlDocumentOptions.BackgroundColor" /> property will not be used when creating the HTML document.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.DocumentWriters.HtmlDocumentOptions" />.</example>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.DocumentWriters.DocumentWriter" />
      <seealso cref="T:FT.Topics.ProgrammingWithDocumentWriters">Programming with LEADTOOLS Document Writers</seealso>
      <seealso cref="T:Leadtools.Topics.FilesToBeIncludedWithYourApplication">Files to be Included with Your Application</seealso>
      <seealso cref="T:Leadtools.Topics.UnlockingSpecialLEADFeatures">Unlocking Special LEAD Features</seealso>
    </member>
    <member name="P:Leadtools.Forms.DocumentWriters.HtmlDocumentOptions.BackgroundColor">
      <summary>Gets or sets the value of the background color. <a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
      <value>A <see cref="T:Leadtools.RasterColor" /> structure that contains the background color to use in the final HTML document. Default value is "White".</value>
      <remarks>
        <para>The HTML format supports adding a background color to the final document. To use a background color, set the value of the
            <see cref="P:Leadtools.Forms.DocumentWriters.HtmlDocumentOptions.UseBackgroundColor" /> property to <strong>true</strong> and set the color value required in the <see cref="P:Leadtools.Forms.DocumentWriters.HtmlDocumentOptions.BackgroundColor" /> property.</para>
        <para>If the value of the <see cref="P:Leadtools.Forms.DocumentWriters.HtmlDocumentOptions.UseBackgroundColor" /> property is <strong>false</strong>, then the final document will not contain a background color and the
            value of the <see cref="P:Leadtools.Forms.DocumentWriters.HtmlDocumentOptions.BackgroundColor" /> property will not be used when creating the HTML document.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.DocumentWriters.HtmlDocumentOptions" />.</example>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.DocumentWriters.DocumentWriter" />
      <seealso cref="T:FT.Topics.ProgrammingWithDocumentWriters">Programming with LEADTOOLS Document Writers</seealso>
      <seealso cref="T:Leadtools.Topics.FilesToBeIncludedWithYourApplication">Files to be Included with Your Application</seealso>
      <seealso cref="T:Leadtools.Topics.UnlockingSpecialLEADFeatures">Unlocking Special LEAD Features</seealso>
    </member>
    <member name="P:Leadtools.Forms.DocumentWriters.HtmlDocumentOptions.FontEmbedMode">
      <summary>Gets or sets the font embedding mode used when creating an HTML document. <a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
      <value>One of the <see cref="T:Leadtools.Forms.DocumentWriters.DocumentFontEmbedMode" /> enumeration members that indicate which font embedding mode to use when creating an HTML document.
            Default value is <see cref="T:Leadtools.Forms.DocumentWriters.DocumentFontEmbedMode">DocumentFontEmbedMode.Auto</see>.</value>
      <remarks>
        <para>For more information, refer to <see cref="T:Leadtools.Forms.DocumentWriters.DocumentFontEmbedMode" /> enumeration.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.DocumentWriters.HtmlDocumentOptions" />.</example>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.DocumentWriters.DocumentWriter" />
      <seealso cref="T:FT.Topics.ProgrammingWithDocumentWriters">Programming with LEADTOOLS Document Writers</seealso>
      <seealso cref="T:Leadtools.Topics.FilesToBeIncludedWithYourApplication">Files to be Included with Your Application</seealso>
      <seealso cref="T:Leadtools.Topics.UnlockingSpecialLEADFeatures">Unlocking Special LEAD Features</seealso>
    </member>
    <member name="P:Leadtools.Forms.DocumentWriters.HtmlDocumentOptions.DocumentType">
      <summary>Gets or sets the type of the HTML file created using the LEADTOOLS Document Writers. <a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
      <value>One of the <see cref="T:Leadtools.Forms.DocumentWriters.HtmlDocumentType" /> enumeration members that indicate which type of HTML file the resulting HTML file will be.</value>
      <remarks>
        <para>Refer to the <see cref="T:Leadtools.Forms.DocumentWriters.HtmlDocumentType" /> enumeration for more information on the supported HyperText Markup Language (HTML) format types.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.DocumentWriters.HtmlDocumentOptions" />.</example>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.DocumentWriters.DocumentWriter" />
      <seealso cref="T:FT.Topics.ProgrammingWithDocumentWriters">Programming with LEADTOOLS Document Writers</seealso>
      <seealso cref="T:Leadtools.Topics.FilesToBeIncludedWithYourApplication">Files to be Included with Your Application</seealso>
      <seealso cref="T:Leadtools.Topics.UnlockingSpecialLEADFeatures">Unlocking Special LEAD Features</seealso>
    </member>
    <member name="T:Leadtools.Forms.DocumentWriters.LtdDocumentOptions">
      <summary>Provides extra options to use when saving a document using the LEADTOOLS Temporary Document (LTD) format. <a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="WinRTicon.png" class="WinRTIconTag" name="WinRTIconTag" title="WinRT support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="winrtphone.png" class="WinRTPhoneIconTag" name="WinRTPhoneIconTag" title="WinRT Phone support" border="0" /></a></summary>
      <remarks>
        <para>The options set in the <see cref="T:Leadtools.Forms.DocumentWriters.LtdDocumentOptions" /> class will be used when the user saves a document using the <see cref="T:Leadtools.Forms.DocumentWriters.DocumentFormat">DocumentFormat.Ltd</see> format.</para>
        <para>The LEADTOOLS Temporary Document (LTD) format is a proprietary that support appending pages to an existing file, therefore, you can use the LTD format if you have large amount
            of pages to convert over multiple sessions. When calling the <see cref="M:Leadtools.Forms.DocumentWriters.DocumentWriter.BeginDocument(System.String,Leadtools.Forms.DocumentWriters.DocumentFormat)">DocumentWriter.BeginDocument</see> method with the
            <see cref="T:Leadtools.Forms.DocumentWriters.DocumentFormat">DocumentFormat.Ltd</see> format, the toolkit will check if the output file specified exists on disk. If it does, the new pages will be appended to the end of
            the file. When you are finished adding all the pages, you can use the <see cref="M:Leadtools.Forms.DocumentWriters.DocumentWriter.Convert(System.String,System.String,Leadtools.Forms.DocumentWriters.DocumentFormat)">DocumentWriter.Convert</see> method to convert this temporary file to the desired
            output format such as PDF, HTML or DOC.</para>
        <para>To change the options used with the LTD format, perform the following steps:
            <list type="number"><item><description>Use the <see cref="M:Leadtools.Forms.DocumentWriters.DocumentWriter.GetOptions(Leadtools.Forms.DocumentWriters.DocumentFormat)">DocumentWriter.GetOptions</see> method of the <see cref="T:Leadtools.Forms.DocumentWriters.DocumentWriter" /> object being used. 
            Passing <see cref="T:Leadtools.Forms.DocumentWriters.DocumentFormat">DocumentFormat.Ltd</see> to the <i>format</i> parameter. Note that the resulting object from the
            base <see cref="T:Leadtools.Forms.DocumentWriters.DocumentOptions" /> class needs to be cast to <see cref="T:Leadtools.Forms.DocumentWriters.LtdDocumentOptions" />.</description></item><item><description>Use the various <see cref="T:Leadtools.Forms.DocumentWriters.LtdDocumentOptions" /> properties to change the options.</description></item><item><description>Use <see cref="M:Leadtools.Forms.DocumentWriters.DocumentWriter.SetOptions(Leadtools.Forms.DocumentWriters.DocumentFormat,Leadtools.Forms.DocumentWriters.DocumentOptions)">DocumentWriter.SetOptions</see> to set the new options in the engine.</description></item><item><description>Now call the <see cref="M:Leadtools.Forms.DocumentWriters.DocumentWriter.BeginDocument(System.String,Leadtools.Forms.DocumentWriters.DocumentFormat)">DocumentWriter.BeginDocument</see> method (with <see cref="T:Leadtools.Forms.DocumentWriters.DocumentFormat">DocumentFormat.Ltd</see> for the
            <i>format</i> parameter) to create a new document and add the pages.</description></item></list></para>
        <para>Note that this format supports both <see cref="M:Leadtools.Forms.DocumentWriters.DocumentWriter.AddPage(Leadtools.Forms.DocumentWriters.DocumentPage)">DocumentWriter.AddPage</see> and <see cref="M:Leadtools.Forms.DocumentWriters.DocumentWriter.InsertPage(Leadtools.Forms.DocumentWriters.DocumentPage,System.Int32)">DocumentWriter.InsertPage</see>.</para>
        <para>Currently, the <see cref="T:Leadtools.Forms.DocumentWriters.LtdDocumentOptions" /> class contains no extra options.</para>
      </remarks>
      <example>
        <p>This example will create a new LEADTOOLS Temporary Document (LTD) over multiple sessions then convert the result to a PDF file.
            </p>
        <code lang="VB">      Imports Leadtools.Forms.DocumentWriters
      Imports Leadtools
      Imports Leadtools.Codecs

      &lt;TestMethod&gt; _
      Public Sub LtdDocumentOptionsExample()
         Dim inputFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "Leadtools.docx")
         Dim outputFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "Example.pdf")
         Dim ltdFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "Example.ltd")
         ' Check if the LTD file exists, if so, delete it so we start a new session
         If File.Exists(ltdFileName) Then File.Delete(ltdFileName)

         ' Get the number of pages
         Dim pageCount As Integer
         Using codecs As New RasterCodecs()
            codecs.Options.RasterizeDocument.Load.Resolution = 300
            pageCount = codecs.GetTotalPages(inputFileName)
         End Using

         ' Loop through the pages and add them to the LTD
         For pageNumber As Integer = 1 To pageCount
            AppendToLtd(inputFileName, pageNumber, ltdFileName)
         Next

         ' Create a new instance of the LEADTOOLS Document Writer
         Dim docWriter As New DocumentWriter()

         ' Set the PDF options to be PDF/A with Image/Text
         Dim pdfOptions As PdfDocumentOptions = DirectCast(docWriter.GetOptions(DocumentFormat.Pdf), PdfDocumentOptions)
         pdfOptions.DocumentType = PdfDocumentType.PdfA
         pdfOptions.ImageOverText = True
         docWriter.SetOptions(DocumentFormat.Pdf, pdfOptions)

         ' Now convert the LTD file we generated to PDF
         Console.WriteLine("Converting LTD to PDF")
         docWriter.Convert(ltdFileName, outputFileName, DocumentFormat.Pdf)
      End Sub

      Private Sub AppendToLtd(inputFileName As String, pageNumber As Integer, ltdFileName As String)
         ' This assumes we are in a separate session than the main program, so create
         ' a new instance of the RasterCodecs and DocumentWriter objects we need
         Dim docWriter As New DocumentWriter()
         Using codecs As New RasterCodecs()
            codecs.Options.RasterizeDocument.Load.Resolution = 300

            ' Create a new (or append if the file exists) LTD document
            docWriter.BeginDocument(ltdFileName, DocumentFormat.Ltd)

            ' Load the page as SVG document and as Raster image
            Console.WriteLine("Loading page {0} ...", pageNumber)
            Using svgDocument As ISvgDocument = codecs.LoadSvg(inputFileName, pageNumber, Nothing)
               Using image As RasterImage = codecs.Load(inputFileName, pageNumber)
                  ' Add the page, notice we will be using image/text feature
                  Dim page As New DocumentSvgPage()
                  page.SvgDocument = svgDocument
                  page.Image = image

                  Console.WriteLine("Adding page {0} ...", pageNumber)
                  docWriter.AddPage(page)
               End Using
            End Using
         End Using

         ' Finally finish writing the PDF file on disk
         docWriter.EndDocument()
      End Sub</code>
        <code lang="CS">      using Leadtools.Forms.DocumentWriters;
      using Leadtools;
      using Leadtools.Codecs;

      public void LtdDocumentOptionsExample()
      {
         var inputFileName = Path.Combine(LEAD_VARS.ImagesDir, "Leadtools.docx");
         var outputFileName = Path.Combine(LEAD_VARS.ImagesDir,"Example.pdf");
         var ltdFileName = Path.Combine(LEAD_VARS.ImagesDir, "Example.ltd");
         // Check if the LTD file exists, if so, delete it so we start a new session
         if (File.Exists(ltdFileName))
            File.Delete(ltdFileName);

         // Get the number of pages
         int pageCount;
         using (var codecs = new RasterCodecs())
         {
            codecs.Options.RasterizeDocument.Load.Resolution = 300;
            pageCount = codecs.GetTotalPages(inputFileName);
         }

         // Loop through the pages and add them to the LTD
         for (var pageNumber = 1; pageNumber &lt; pageCount; pageNumber++)
         {
            AppendToLtd(inputFileName, pageNumber, ltdFileName);
         }

         // Create a new instance of the LEADTOOLS Document Writer
         var docWriter = new DocumentWriter();

         // Set the PDF options to be PDF/A with Image/Text
         var pdfOptions = docWriter.GetOptions(DocumentFormat.Pdf) as PdfDocumentOptions;
         pdfOptions.DocumentType = PdfDocumentType.PdfA;
         pdfOptions.ImageOverText = true;
         docWriter.SetOptions(DocumentFormat.Pdf, pdfOptions);

         // Now convert the LTD file we generated to PDF
         Console.WriteLine("Converting LTD to PDF");
         docWriter.Convert(ltdFileName, outputFileName, DocumentFormat.Pdf);
      }

      private void AppendToLtd(string inputFileName, int pageNumber, string ltdFileName)
      {
         // This assumes we are in a separate session than the main program, so create
         // a new instance of the RasterCodecs and DocumentWriter objects we need
         var docWriter = new DocumentWriter();
         using (var codecs = new RasterCodecs())
         {
            codecs.Options.RasterizeDocument.Load.Resolution = 300;

            // Create a new (or append if the file exists) LTD document
            docWriter.BeginDocument(ltdFileName, DocumentFormat.Ltd);

            // Load the page as SVG document and as Raster image
            Console.WriteLine("Loading page {0} ...", pageNumber);
            using (var svgDocument = codecs.LoadSvg(inputFileName, pageNumber, null))
            using (var image = codecs.Load(inputFileName, pageNumber))
            {
               // Add the page, notice we will be using image/text feature
               var page = new DocumentSvgPage();
               page.SvgDocument = svgDocument;
               page.Image = image;

               Console.WriteLine("Adding page {0} ...", pageNumber);
               docWriter.AddPage(page);
            }
         }

         // Finally finish writing the PDF file on disk
         docWriter.EndDocument();
      }</code>
      </example>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.DocumentWriters.DocumentWriter" />
      <seealso cref="T:FT.Topics.ProgrammingWithDocumentWriters">Programming with LEADTOOLS Document Writers</seealso>
      <seealso cref="T:Leadtools.Topics.FilesToBeIncludedWithYourApplication">Files to be Included with Your Application</seealso>
      <seealso cref="T:Leadtools.Topics.UnlockingSpecialLEADFeatures">Unlocking Special LEAD Features</seealso>
    </member>
    <member name="M:Leadtools.Forms.DocumentWriters.LtdDocumentOptions.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Leadtools.Forms.DocumentWriters.LtdDocumentOptions" /> class. <a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
      <remarks>
        <para>Currently, the <see cref="T:Leadtools.Forms.DocumentWriters.LtdDocumentOptions" /> class contains no extra options.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.DocumentWriters.LtdDocumentOptions" />.</example>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.DocumentWriters.DocumentWriter" />
      <seealso cref="T:FT.Topics.ProgrammingWithDocumentWriters">Programming with LEADTOOLS Document Writers</seealso>
      <seealso cref="T:Leadtools.Topics.FilesToBeIncludedWithYourApplication">Files to be Included with Your Application</seealso>
      <seealso cref="T:Leadtools.Topics.UnlockingSpecialLEADFeatures">Unlocking Special LEAD Features</seealso>
    </member>
    <member name="M:Leadtools.Forms.DocumentWriters.LtdDocumentOptions.Clone">
      <summary>Creates an exact copy of this <see cref="T:Leadtools.Forms.DocumentWriters.DocumentOptions" />. <a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="WinRTicon.png" class="WinRTIconTag" name="WinRTIconTag" title="WinRT support" border="0" /></a></summary>
      <returns>The <see cref="T:Leadtools.Forms.DocumentWriters.DocumentOptions" /> this method creates.</returns>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Forms.DocumentWriters.DocumentWriter" />.</example>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.DocumentWriters.DocumentWriter">Document Writers</seealso>
      <seealso cref="T:FT.Topics.ProgrammingWithDocumentWriters">Programming with LEADTOOLS Document Writers</seealso>
      <seealso cref="T:Leadtools.Topics.FilesToBeIncludedWithYourApplication">Files to be Included with Your Application</seealso>
      <seealso cref="T:Leadtools.Topics.UnlockingSpecialLEADFeatures">Unlocking Special LEAD Features</seealso>
    </member>
    <member name="M:Leadtools.Forms.DocumentWriters.LtdDocumentOptions.Clone_WinRT">
      <summary>
            This class implementation of <see cref="T:Leadtools.Forms.DocumentWriters.DocumentOptions" />.
            </summary>
      <returns>Refer to <see cref="M:Leadtools.Forms.DocumentWriters.DocumentOptions.Clone">DocumentOptions.Clone</see>.</returns>
      <noremarks />
      <noexample />
      <winrt />
    </member>
    <member name="P:Leadtools.Forms.DocumentWriters.LtdDocumentOptions.Format">
      <summary>Gets the document format type associated with this options class. <a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="WinRTicon.png" class="WinRTIconTag" name="WinRTIconTag" title="WinRT support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="winrtphone.png" class="WinRTPhoneIconTag" name="WinRTPhoneIconTag" title="WinRT Phone support" border="0" /></a></summary>
      <value>This property will always return <see cref="T:Leadtools.Forms.DocumentWriters.DocumentFormat">DocumentFormat.Ltd</see>.</value>
      <remarks>
        <para>This property is required internally by LEADTOOLS.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.DocumentWriters.LtdDocumentOptions" />.</example>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.DocumentWriters.DocumentWriter" />
      <seealso cref="T:FT.Topics.ProgrammingWithDocumentWriters">Programming with LEADTOOLS Document Writers</seealso>
      <seealso cref="T:Leadtools.Topics.FilesToBeIncludedWithYourApplication">Files to be Included with Your Application</seealso>
      <seealso cref="T:Leadtools.Topics.UnlockingSpecialLEADFeatures">Unlocking Special LEAD Features</seealso>
    </member>
    <member name="P:Leadtools.Forms.DocumentWriters.LtdDocumentOptions.Format_WinRT">
      <summary>
            This class implementation of <see cref="P:Leadtools.Forms.DocumentWriters.DocumentOptions.Format">DocumentOptions.Format</see>.
            </summary>
      <value>Refer to <see cref="P:Leadtools.Forms.DocumentWriters.DocumentOptions.Format">DocumentOptions.Format</see>.</value>
      <noremarks />
      <noexample />
      <winrt />
    </member>
    <member name="P:Leadtools.Forms.DocumentWriters.LtdDocumentOptions.PageRestriction_WinRT">
      <summary>
            This class implementation of <see cref="P:Leadtools.Forms.DocumentWriters.DocumentOptions.PageRestriction">DocumentOptions.PageRestriction</see>.
            </summary>
      <value>Refer to <see cref="P:Leadtools.Forms.DocumentWriters.DocumentOptions.PageRestriction">DocumentOptions.PageRestriction</see>.</value>
      <noremarks />
      <noexample />
      <winrt />
    </member>
    <member name="P:Leadtools.Forms.DocumentWriters.LtdDocumentOptions.EmptyPageWidth_WinRT">
      <summary>
            This class implementation of <see cref="P:Leadtools.Forms.DocumentWriters.DocumentOptions.EmptyPageWidth">DocumentOptions.EmptyPageWidth</see>.
            </summary>
      <value>Refer to <see cref="P:Leadtools.Forms.DocumentWriters.DocumentOptions.EmptyPageWidth">DocumentOptions.EmptyPageWidth</see>.</value>
      <noremarks />
      <noexample />
      <winrt />
    </member>
    <member name="P:Leadtools.Forms.DocumentWriters.LtdDocumentOptions.EmptyPageHeight_WinRT">
      <summary>
            This class implementation of <see cref="P:Leadtools.Forms.DocumentWriters.DocumentOptions.EmptyPageHeight">DocumentOptions.EmptyPageHeight</see>.
            </summary>
      <value>Refer to <see cref="P:Leadtools.Forms.DocumentWriters.DocumentOptions.EmptyPageHeight">DocumentOptions.EmptyPageHeight</see>.</value>
      <noremarks />
      <noexample />
      <winrt />
    </member>
    <member name="P:Leadtools.Forms.DocumentWriters.LtdDocumentOptions.EmptyPageResolution_WinRT">
      <summary>
            This class implementation of <see cref="P:Leadtools.Forms.DocumentWriters.DocumentOptions.EmptyPageResolution">DocumentOptions.EmptyPageResolution</see>.
            </summary>
      <value>Refer to <see cref="P:Leadtools.Forms.DocumentWriters.DocumentOptions.EmptyPageResolution">DocumentOptions.EmptyPageResolution</see>.</value>
      <noremarks />
      <noexample />
      <winrt />
    </member>
    <member name="P:Leadtools.Forms.DocumentWriters.LtdDocumentOptions.DocumentResolution_WinRT">
      <summary>This class implementation of <see cref="P:Leadtools.Forms.DocumentWriters.DocumentOptions.DocumentResolution">DocumentOptions.DocumentResolution</see>. <a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="WinRTicon.png" class="WinRTIconTag" name="WinRTIconTag" title="WinRT support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="winrtphone.png" class="WinRTPhoneIconTag" name="WinRTPhoneIconTag" title="WinRT Phone support" border="0" /></a></summary>
      <value>Refer to <see cref="P:Leadtools.Forms.DocumentWriters.DocumentOptions.DocumentResolution">DocumentOptions.DocumentResolution</see>.</value>
      <noremarks />
      <noexample />
      <winrt />
    </member>
    <member name="P:Leadtools.Forms.DocumentWriters.LtdDocumentOptions.MaintainAspectRatio_WinRT">
      <summary>
            This class implementation of <see cref="P:Leadtools.Forms.DocumentWriters.DocumentOptions.MaintainAspectRatio">DocumentOptions.MaintainAspectRatio</see>.
            </summary>
      <value>Refer to <see cref="P:Leadtools.Forms.DocumentWriters.DocumentOptions.MaintainAspectRatio">DocumentOptions.MaintainAspectRatio</see>.</value>
      <noremarks />
      <noexample />
      <winrt />
    </member>
    <member name="T:Leadtools.Forms.DocumentWriters.PdfAutoBookmark">
      <summary>Options to use when creating bookmarks in automatic way based on font information of the document when creating Adobe Portable Document Format (PDF) documents. <a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="WinRTicon.png" class="WinRTIconTag" name="WinRTIconTag" title="WinRT support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="winrtphone.png" class="WinRTPhoneIconTag" name="WinRTPhoneIconTag" title="WinRT Phone support" border="0" /></a></summary>
      <remarks>
        <para>Use the <see cref="T:Leadtools.Forms.DocumentWriters.PdfAutoBookmark" /> structure with <see cref="T:Leadtools.Forms.DocumentWriters.PdfDocumentOptions" /> when saving a
            document using the <see cref="T:Leadtools.Forms.DocumentWriters.DocumentFormat">DocumentFormat.Pdf</see> format.</para>
        <para>This class allows for the creation of bookmarks, which can be used to mark parts of a document for quick access. This can be
            done with documents that have been consistently formatted in outline or chapter form with sections and sub-sections, where each level uses unique
            font formatting to indicate each section.</para>
        <para>The Document Writer Auto Bookmark feature will create bookmarks automatically for well structured documents that have a unique fonts for its table
            of contents. The document must be constructed with this kind of convention in mind in order for the Auto book-marking feature to work properly.</para>
        <para>For example assume you have a document that have the following in its table of contents:</para>
        <ul>
          <li>Set of Chapter titles that come with font: Arial17pt Bold</li>
          <li>Set of Section titles which are parts of chapters and come with font: Tahoma 13pt</li>
          <li>Set of Sub Section titles which come with font: Times New Roman 12pt Italic</li>
        </ul>
        <para>To set the bookmarks for a document, first set the number of levels of bookmarks that you want. "Levels" represent the hierarchy of
            the bookmarks in the resultant bookmark outline. In our example there are three levels to be turned into bookmarks, so the number of Levels is 3 and
            must be set in the <see cref="P:Leadtools.Forms.DocumentWriters.PdfDocumentOptions.TotalBookmarkLevels">PdfDocumentOptions.TotalBookmarkLevels</see> property.</para>
        <para>To generate the auto bookmarks, you must first set <see cref="P:Leadtools.Forms.DocumentWriters.PdfDocumentOptions.AutoBookmarksEnabled">PdfDocumentOptions.AutoBookmarksEnabled</see>
            to <strong>true</strong>.</para>
        <para>For first level of bookmark, you should set the following: <see cref="P:Leadtools.Forms.DocumentWriters.PdfAutoBookmark.FontFaceName" /> to "Arial", <see cref="P:Leadtools.Forms.DocumentWriters.PdfAutoBookmark.UseStyles" /> to
            <strong>true</strong>, <see cref="P:Leadtools.Forms.DocumentWriters.PdfAutoBookmark.BoldStyle" /> to <strong>true</strong>, <see cref="P:Leadtools.Forms.DocumentWriters.PdfAutoBookmark.ItalicStyle" /> to <strong>false</strong>, and
            <see cref="P:Leadtools.Forms.DocumentWriters.PdfAutoBookmark.FontHeight" /> to 17.</para>
        <para>For second level of bookmark, you should the following: <see cref="P:Leadtools.Forms.DocumentWriters.PdfAutoBookmark.FontFaceName" /> to "Tahoma", <see cref="P:Leadtools.Forms.DocumentWriters.PdfAutoBookmark.UseStyles" /> to
            <strong>false</strong>, and <see cref="P:Leadtools.Forms.DocumentWriters.PdfAutoBookmark.FontHeight" /> equal to 13.</para>
        <para>For third level of bookmark, you should set the following: <see cref="P:Leadtools.Forms.DocumentWriters.PdfAutoBookmark.FontFaceName" /> to "Times New Roman",
            <see cref="P:Leadtools.Forms.DocumentWriters.PdfAutoBookmark.UseStyles" /> to <strong>true</strong>, <see cref="P:Leadtools.Forms.DocumentWriters.PdfAutoBookmark.BoldStyle" /> to <strong>false</strong>, <see cref="P:Leadtools.Forms.DocumentWriters.PdfAutoBookmark.ItalicStyle" /> to
            <strong>true</strong>, and <see cref="P:Leadtools.Forms.DocumentWriters.PdfAutoBookmark.FontHeight" /> equal to 12.</para>
        <para>Notes:
            <ul><li>The order of fonts is same as the order of levels (i.e. the first font will be in level 1, the 2nd in level 2 and so on).</li><li>Font selections should not conflict. Selecting "Arial" 17pt with same styles for both level1 and level2 will not work.
                 Each level setting should be unique.</li><li>The maximum number of bookmarks cannot be greater than 10 levels and is limited by the number of unique fonts available
                 in the loaded document. In the example used, it is limited to 3.</li></ul></para>
        <para>Note that this format does not support calling <see cref="M:Leadtools.Forms.DocumentWriters.DocumentWriter.InsertPage(Leadtools.Forms.DocumentWriters.DocumentPage,System.Int32)">DocumentWriter.InsertPage</see>.</para>
      </remarks>
      <example>
        <p>This example will create a new Adobe Portable Document Format document (PDF) file using the various supported options.
            </p>
        <code lang="VB">      Imports Leadtools.Forms.DocumentWriters
      Imports Leadtools.Forms.Ocr
      Imports Leadtools
      Imports Leadtools.Codecs

      &lt;TestMethod&gt; _
      Public Sub PdfDocumentOptionsExample()
         Dim inputFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "Leadtools.docx")
         Dim outputFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "Example.pdf")
         ' Setup a new RasterCodecs object
         Dim codecs As New RasterCodecs()
         codecs.Options.RasterizeDocument.Load.Resolution = 300

         ' Get the number of pages in the input document
         Dim pageCount As Integer = codecs.GetTotalPages(inputFileName)

         ' Create a new instance of the LEADTOOLS Document Writer
         Dim docWriter As New DocumentWriter()

         ' Change the PDF options
         Dim pdfOptions As PdfDocumentOptions = DirectCast(docWriter.GetOptions(DocumentFormat.Pdf), PdfDocumentOptions)
         pdfOptions.DocumentType = PdfDocumentType.Pdf
         pdfOptions.FontEmbedMode = DocumentFontEmbedMode.None
         pdfOptions.ImageOverText = False
         pdfOptions.Linearized = False
         pdfOptions.Title = "Add your title here"
         pdfOptions.Subject = "Add your subject here"
         pdfOptions.Keywords = "Add your keywords here"
         pdfOptions.Author = "Add author name here"
         pdfOptions.Protected = True
         pdfOptions.UserPassword = "User password"
         pdfOptions.OwnerPassword = "Owner password"
         pdfOptions.EncryptionMode = PdfDocumentEncryptionMode.RC128Bit
         pdfOptions.PrintEnabled = False
         pdfOptions.HighQualityPrintEnabled = True
         pdfOptions.CopyEnabled = False
         pdfOptions.EditEnabled = True
         pdfOptions.AnnotationsEnabled = True
         pdfOptions.AssemblyEnabled = False
         pdfOptions.OneBitImageCompression = OneBitImageCompressionType.Flate
         pdfOptions.ColoredImageCompression = ColoredImageCompressionType.FlateJpeg
         pdfOptions.QualityFactor = 2

         ' Use default resolution
         pdfOptions.DocumentResolution = 0
         pdfOptions.PageRestriction = DocumentPageRestriction.Relaxed

         ' Setup empty page size (Letter size)
         pdfOptions.EmptyPageWidth = 8.5
         pdfOptions.EmptyPageHeight = 11
         pdfOptions.EmptyPageResolution = 300

         docWriter.SetOptions(DocumentFormat.Pdf, pdfOptions)

         ' Create a new PDF document
         Console.WriteLine("Creating new PDF document: {0}", outputFileName)
         docWriter.BeginDocument(outputFileName, DocumentFormat.Pdf)

         ' Loop through all the pages
         For pageNumber As Integer = 1 To pageCount
            ' Get the page as SVG
            Console.WriteLine("Loading page {0}", pageNumber)
            Dim page As New DocumentSvgPage()
            page.SvgDocument = codecs.LoadSvg(inputFileName, pageNumber, Nothing)

            ' Add the page
            Console.WriteLine("Adding page {0}", pageNumber)
            docWriter.AddPage(page)

            page.SvgDocument.Dispose()
         Next

         ' Finally finish writing the PDF file on disk
         docWriter.EndDocument()
         codecs.Dispose()
      End Sub</code>
        <code lang="CS">      using Leadtools.Forms.DocumentWriters;
      using Leadtools.Forms.Ocr;
      using Leadtools;
      using Leadtools.Codecs;

      public void PdfDocumentOptionsExample()
      {
         var inputFileName = Path.Combine(LEAD_VARS.ImagesDir, "Leadtools.docx");
         var outputFileName = Path.Combine(LEAD_VARS.ImagesDir, "Example.pdf");
         // Setup a new RasterCodecs object
         var codecs = new RasterCodecs();
         codecs.Options.RasterizeDocument.Load.Resolution = 300;

         // Get the number of pages in the input document
         var pageCount = codecs.GetTotalPages(inputFileName);

         // Create a new instance of the LEADTOOLS Document Writer
         var docWriter = new DocumentWriter();

         // Change the PDF options
         var pdfOptions = docWriter.GetOptions(DocumentFormat.Pdf) as PdfDocumentOptions;
         pdfOptions.DocumentType = PdfDocumentType.Pdf;
         pdfOptions.FontEmbedMode = DocumentFontEmbedMode.None;
         pdfOptions.ImageOverText = false;
         pdfOptions.Linearized = false;
         pdfOptions.Title = "Add your title here";
         pdfOptions.Subject = "Add your subject here";
         pdfOptions.Keywords = "Add your keywords here";
         pdfOptions.Author = "Add author name here";
         pdfOptions.Protected = true;
         pdfOptions.UserPassword = "User password";
         pdfOptions.OwnerPassword = "Owner password";
         pdfOptions.EncryptionMode = PdfDocumentEncryptionMode.RC128Bit;
         pdfOptions.PrintEnabled = false;
         pdfOptions.HighQualityPrintEnabled = true;
         pdfOptions.CopyEnabled = false;
         pdfOptions.EditEnabled = true;
         pdfOptions.AnnotationsEnabled = true;
         pdfOptions.AssemblyEnabled = false;
         pdfOptions.OneBitImageCompression = OneBitImageCompressionType.Flate;
         pdfOptions.ColoredImageCompression = ColoredImageCompressionType.FlateJpeg;
         pdfOptions.QualityFactor = 2;

         // Use default resolution
         pdfOptions.DocumentResolution = 0;
         pdfOptions.PageRestriction = DocumentPageRestriction.Relaxed;

         // Setup empty page size (Letter size)
         pdfOptions.EmptyPageWidth = 8.5;
         pdfOptions.EmptyPageHeight = 11;
         pdfOptions.EmptyPageResolution = 300;

         docWriter.SetOptions(DocumentFormat.Pdf, pdfOptions);

         // Create a new PDF document
         Console.WriteLine("Creating new PDF document: {0}", outputFileName);
         docWriter.BeginDocument(outputFileName, DocumentFormat.Pdf);

         // Loop through all the pages
         for (var pageNumber = 1; pageNumber &lt;= pageCount; pageNumber++)
         {
            // Get the page as SVG
            Console.WriteLine("Loading page {0}", pageNumber);
            var page = new DocumentSvgPage();
            page.SvgDocument = codecs.LoadSvg(inputFileName, pageNumber, null);

            // Add the page
            Console.WriteLine("Adding page {0}", pageNumber);
            docWriter.AddPage(page);

            page.SvgDocument.Dispose();
         }

         // Finally finish writing the PDF file on disk
         docWriter.EndDocument();
         codecs.Dispose();
      }</code>
      </example>
      <keywords>PDF|PDF/A|Document Writers,PDF|Document Writers,PDF/A</keywords>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.DocumentWriters.DocumentWriter" />
      <seealso cref="T:FT.Topics.ProgrammingWithDocumentWriters">Programming with LEADTOOLS Document Writers</seealso>
      <seealso cref="T:Leadtools.Topics.FilesToBeIncludedWithYourApplication">Files to be Included with Your Application</seealso>
      <seealso cref="T:Leadtools.Topics.UnlockingSpecialLEADFeatures">Unlocking Special LEAD Features</seealso>
    </member>
    <member name="P:Leadtools.Forms.DocumentWriters.PdfAutoBookmark.UseStyles">
      <summary>Gets or sets a value that indicates whether to consider font styles when creating bookmarks in the PDF document. <a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="WinRTicon.png" class="WinRTIconTag" name="WinRTIconTag" title="WinRT support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="winrtphone.png" class="WinRTPhoneIconTag" name="WinRTPhoneIconTag" title="WinRT Phone support" border="0" /></a></summary>
      <value>
        <strong>true</strong> to allow checking for font styles such as bold or italic while creating the bookmark in the PDF document using the automatic bookmarking feature, otherwise; <strong>false</strong>
            The default value is <strong>false</strong>.</value>
      <remarks>
        <para>Autobookmarking (automatic bookmarking) creates bookmark items based on font information whenever <see cref="P:Leadtools.Forms.DocumentWriters.PdfAutoBookmark.UseStyles" /> is <strong>true</strong>. 
            This means that different font styles are considered to be different. For example, when UseStyles is true, Arial bold and Arial are handled as two different fonts.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.DocumentWriters.PdfDocumentOptions" />.</example>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.DocumentWriters.DocumentWriter" />
      <seealso cref="T:FT.Topics.ProgrammingWithDocumentWriters">Programming with LEADTOOLS Document Writers</seealso>
      <seealso cref="T:Leadtools.Topics.FilesToBeIncludedWithYourApplication">Files to be Included with Your Application</seealso>
      <seealso cref="T:Leadtools.Topics.UnlockingSpecialLEADFeatures">Unlocking Special LEAD Features</seealso>
    </member>
    <member name="P:Leadtools.Forms.DocumentWriters.PdfAutoBookmark.BoldStyle">
      <summary>Gets or sets a value that indicates that bookmarks should be created based on whether the font is bold. <a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="WinRTicon.png" class="WinRTIconTag" name="WinRTIconTag" title="WinRT support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="winrtphone.png" class="WinRTPhoneIconTag" name="WinRTPhoneIconTag" title="WinRT Phone support" border="0" /></a></summary>
      <value>
        <strong>true</strong> to create bookmarks based on whether the font is bold, otherwise; <strong>false</strong>.
            The default value is <strong>false</strong>.</value>
      <remarks>
        <para>When <see cref="P:Leadtools.Forms.DocumentWriters.PdfAutoBookmark.BoldStyle" /> is <strong>true</strong>, bookmarks will be created wherever there is a bold font in the document.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.DocumentWriters.PdfDocumentOptions" />.</example>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.DocumentWriters.DocumentWriter" />
      <seealso cref="T:FT.Topics.ProgrammingWithDocumentWriters">Programming with LEADTOOLS Document Writers</seealso>
      <seealso cref="T:Leadtools.Topics.FilesToBeIncludedWithYourApplication">Files to be Included with Your Application</seealso>
      <seealso cref="T:Leadtools.Topics.UnlockingSpecialLEADFeatures">Unlocking Special LEAD Features</seealso>
    </member>
    <member name="P:Leadtools.Forms.DocumentWriters.PdfAutoBookmark.ItalicStyle">
      <summary>Gets or sets a value that indicates whether to consider italic font style for the selected font while creating bookmark in the PDF document. <a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="WinRTicon.png" class="WinRTIconTag" name="WinRTIconTag" title="WinRT support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="winrtphone.png" class="WinRTPhoneIconTag" name="WinRTPhoneIconTag" title="WinRT Phone support" border="0" /></a></summary>
      <value>
        <strong>true</strong> to consider only italic font for the selected font type and size while creating bookmark in the PDF document; <strong>false</strong>, otherwise. 
            The default value is <strong>false</strong>.</value>
      <remarks>
        <para> When <see cref="P:Leadtools.Forms.DocumentWriters.PdfAutoBookmark.BoldStyle" /> is <strong>true</strong>, only italic fonts will be considered for creation the bookmark in the PDF document.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.DocumentWriters.PdfDocumentOptions" />.</example>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.DocumentWriters.DocumentWriter" />
      <seealso cref="T:FT.Topics.ProgrammingWithDocumentWriters">Programming with LEADTOOLS Document Writers</seealso>
      <seealso cref="T:Leadtools.Topics.FilesToBeIncludedWithYourApplication">Files to be Included with Your Application</seealso>
      <seealso cref="T:Leadtools.Topics.UnlockingSpecialLEADFeatures">Unlocking Special LEAD Features</seealso>
    </member>
    <member name="P:Leadtools.Forms.DocumentWriters.PdfAutoBookmark.FontHeight">
      <summary>Gets or sets the font height to be considered for the font which will be used when creating bookmarks in the PDF document. <a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="WinRTicon.png" class="WinRTIconTag" name="WinRTIconTag" title="WinRT support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="winrtphone.png" class="WinRTPhoneIconTag" name="WinRTPhoneIconTag" title="WinRT Phone support" border="0" /></a></summary>
      <value>A <see cref="P:Leadtools.Forms.DocumentWriters.PdfAutoBookmark.FontHeight" /> double value that indicates the font height. The default value is 0.</value>
      <remarks>
        <para>The <see cref="P:Leadtools.Forms.DocumentWriters.PdfAutoBookmark.FontFaceName" />.represents the font inside the source EMF document which will be used when creating bookmarks in the PDF document</para>
        <para>The <see cref="P:Leadtools.Forms.DocumentWriters.PdfAutoBookmark.FontHeight" /> is another options that can be used to customize the font being used when creating bookmarks in the PDF document.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.DocumentWriters.PdfDocumentOptions" />.</example>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.DocumentWriters.DocumentWriter" />
      <seealso cref="T:FT.Topics.ProgrammingWithDocumentWriters">Programming with LEADTOOLS Document Writers</seealso>
      <seealso cref="T:Leadtools.Topics.FilesToBeIncludedWithYourApplication">Files to be Included with Your Application</seealso>
      <seealso cref="T:Leadtools.Topics.UnlockingSpecialLEADFeatures">Unlocking Special LEAD Features</seealso>
    </member>
    <member name="P:Leadtools.Forms.DocumentWriters.PdfAutoBookmark.FontFaceName">
      <summary>Gets or sets a typeface name of the font to be considered for the font which will be used for creation bookmark in the PDF document. <a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="WinRTicon.png" class="WinRTIconTag" name="WinRTIconTag" title="WinRT support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="winrtphone.png" class="WinRTPhoneIconTag" name="WinRTPhoneIconTag" title="WinRT Phone support" border="0" /></a></summary>
      <value>A <see cref="T:System.String" /> which contains typeface name of the font which is used to determine the selected font for creation bookmark.
            To reset this value, use either an empty string or <strong>null</strong>. Default value is <strong>null</strong>.</value>
      <remarks>
        <para>The <see cref="P:Leadtools.Forms.DocumentWriters.PdfAutoBookmark.FontFaceName" /> represents the font inside the source EMF document which will be considered for creation bookmarks in the PDF document</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.DocumentWriters.PdfDocumentOptions" />.</example>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.DocumentWriters.DocumentWriter" />
      <seealso cref="T:FT.Topics.ProgrammingWithDocumentWriters">Programming with LEADTOOLS Document Writers</seealso>
      <seealso cref="T:Leadtools.Topics.FilesToBeIncludedWithYourApplication">Files to be Included with Your Application</seealso>
      <seealso cref="T:Leadtools.Topics.UnlockingSpecialLEADFeatures">Unlocking Special LEAD Features</seealso>
    </member>
    <member name="T:Leadtools.Forms.DocumentWriters.PdfCustomBookmark">
      <summary>Options to use when creating custom bookmarks based when creating Adobe Portable Document Format (PDF) documents. <a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="WinRTicon.png" class="WinRTIconTag" name="WinRTIconTag" title="WinRT support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="winrtphone.png" class="WinRTPhoneIconTag" name="WinRTPhoneIconTag" title="WinRT Phone support" border="0" /></a></summary>
      <remarks>
        <para>Use the <see cref="T:Leadtools.Forms.DocumentWriters.PdfCustomBookmark" /> structure with <see cref="T:Leadtools.Forms.DocumentWriters.PdfDocumentOptions" /> when saving a
            document using the <see cref="T:Leadtools.Forms.DocumentWriters.DocumentFormat">DocumentFormat.Pdf</see> format.</para>
        <para>Custom bookmarks will only be used if creating auto-bookmarks is disabled in the PDF options. So to use custom bookmarks,
            set the <see cref="P:Leadtools.Forms.DocumentWriters.PdfDocumentOptions.AutoBookmarksEnabled">PdfDocumentOptions.AutoBookmarksEnabled</see> property to <strong>false</strong>.</para>
      </remarks>
      <example>
        <p>
          <para>This example will use OCR to convert an input multi-page TIF file to searachble PDF creating a custom bookmark for each page in the output PDF file.</para>
        </p>
        <code lang="VB">      Imports Leadtools.Forms.DocumentWriters
      Imports Leadtools.Forms.Ocr
      Imports Leadtools
      Imports Leadtools.Codecs

      &lt;TestMethod&gt; _
      Public Sub OcrToPDFWithCustomBookmarksExample()
         Dim tifFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "Example.tif")
         Dim pdfFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "Example.pdf")
         Dim pageCount As Integer

         ' Get the input multi-page TIF file
         Using codecs As New RasterCodecs()
            codecs.Options.RasterizeDocument.Load.Resolution = 30
            CreateMultiPageTifFile(codecs, tifFileName)

            ' We are going to create a bookmark for each page, so get number of pages of input file
            pageCount = codecs.GetTotalPages(tifFileName)
         End Using

         ' Create the OCR engine
         Using ocrEngine As IOcrEngine = OcrEngineManager.CreateEngine(OcrEngineType.Advantage, False)
            ' Start re-useing the RasterCodecs we have for performance
            ocrEngine.Startup(Nothing, Nothing, Nothing, LEAD_VARS.OcrAdvantageRuntimeDir)

            ' Get the DocumentWriter instance used in this OCR engine 
            Dim docWriter As DocumentWriter = ocrEngine.DocumentWriterInstance

            ' Get the current PDF options, modify and then set it back 
            Dim pdfOptions As PdfDocumentOptions = DirectCast(docWriter.GetOptions(DocumentFormat.Pdf), PdfDocumentOptions)

            pdfOptions.DocumentType = PdfDocumentType.PdfA
            pdfOptions.ImageOverText = True

            ' Set bookmark options
            pdfOptions.AutoBookmarksEnabled = False
            For pageNumber As Integer = 1 To pageCount
               Dim bookmark As New PdfCustomBookmark()
               bookmark.Name = String.Format("Page {0}", pageNumber)
               bookmark.PageNumber = pageNumber
               bookmark.LevelNumber = 0
               bookmark.XCoordinate = 0
               bookmark.YCoordinate = 0
               pdfOptions.CustomBookmarks.Add(bookmark)
            Next

            docWriter.SetOptions(DocumentFormat.Pdf, pdfOptions)

            ' ocr and save document with bookmark options applied
            ocrEngine.AutoRecognizeManager.Run(tifFileName, pdfFileName, Nothing, DocumentFormat.Pdf, Nothing)
         End Using
      End Sub

      Private Sub CreateMultiPageTifFile(codecs As RasterCodecs, tifFileName As String)
         ' Create a multi-page tif file from shipping Ocr1, Ocr2, Ocr3 and Ocr4.tif
         Dim tifFileNameTemplate As String = Path.Combine(LEAD_VARS.ImagesDir, "Ocr{0}.tif")

         If File.Exists(tifFileName) Then File.Delete(tifFileName)

         Dim image As RasterImage = Nothing
         For pageNumber As Integer = 1 To 4
            Dim tempImage As RasterImage = codecs.Load(String.Format(tifFileNameTemplate, pageNumber))

            If IsNothing(image) Then
               image = tempImage
            Else
               image.AddPage(tempImage)
               tempImage.Dispose()
            End If
         Next

         codecs.Save(image, tifFileName, RasterImageFormat.CcittGroup4, 1)
         image.Dispose()
      End Sub

      Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
      Public Const OcrAdvantageRuntimeDir As String = "C:\LEADTOOLS 19\Bin\Common\OcrAdvantageRuntime"
      End Class
</code>
        <code lang="CS">      using Leadtools.Forms.DocumentWriters;
      using Leadtools.Forms.Ocr;
      using Leadtools;
      using Leadtools.Codecs;

      public void OcrToPDFWithCustomBookmarksExample()
      {
         var tifFileName = Path.Combine(LEAD_VARS.ImagesDir, "Example.tif");
         var pdfFileName = Path.Combine(LEAD_VARS.ImagesDir, "Example.pdf");
         int pageCount;

         // Get the input multi-page TIF file
         using (var codecs = new RasterCodecs())
         {
            codecs.Options.RasterizeDocument.Load.Resolution = 300;
            CreateMultiPageTifFile(codecs, tifFileName);

            // We are going to create a bookmark for each page, so get number of pages of input file
            pageCount = codecs.GetTotalPages(tifFileName);
         }

         // Create the OCR engine
         using (var ocrEngine = OcrEngineManager.CreateEngine(OcrEngineType.Advantage, false))
         {
            // Start re-useing the RasterCodecs we have for performance
            ocrEngine.Startup(null, null, null, LEAD_VARS.OcrAdvantageRuntimeDir);

            // Get the DocumentWriter instance used in this OCR engine 
            var docWriter = ocrEngine.DocumentWriterInstance;

            // Get the current PDF options, modify and then set it back 
            var pdfOptions = docWriter.GetOptions(DocumentFormat.Pdf) as PdfDocumentOptions;

            pdfOptions.DocumentType = PdfDocumentType.PdfA;
            pdfOptions.ImageOverText = true;

            // Set bookmark options
            pdfOptions.AutoBookmarksEnabled = false;
            for (var pageNumber = 1; pageNumber &lt;= pageCount; pageNumber++)
            {
               var bookmark = new PdfCustomBookmark();
               bookmark.Name = string.Format("Page {0}", pageNumber);
               bookmark.PageNumber = pageNumber;
               bookmark.LevelNumber = 0;
               bookmark.XCoordinate = 0;
               bookmark.YCoordinate = 0;
               pdfOptions.CustomBookmarks.Add(bookmark);
            }

            docWriter.SetOptions(DocumentFormat.Pdf, pdfOptions);

            // ocr and save document with bookmark options applied
            ocrEngine.AutoRecognizeManager.Run(tifFileName, pdfFileName, null, DocumentFormat.Pdf, null);
         }
      }

      private void CreateMultiPageTifFile(RasterCodecs codecs, string tifFileName)
      {
         // Create a multi-page tif file from shipping Ocr1, Ocr2, Ocr3 and Ocr4.tif
         var tifFileNameTemplate = Path.Combine(LEAD_VARS.ImagesDir, "Ocr{0}.tif");

         if (File.Exists(tifFileName))
            File.Delete(tifFileName);

         RasterImage image = null;
         for (var pageNumber = 1; pageNumber &lt;= 4; pageNumber++)
         {
            var tempImage = codecs.Load(string.Format(tifFileNameTemplate, pageNumber));

            if (image == null)
            {
               image = tempImage;
            }
            else
            {
               image.AddPage(tempImage);
               tempImage.Dispose();
            }
         }

         codecs.Save(image, tifFileName, RasterImageFormat.CcittGroup4, 1);
         image.Dispose();
      }

      static class LEAD_VARS
      {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
      public const string OcrAdvantageRuntimeDir = @"C:\LEADTOOLS 19\Bin\Common\OcrAdvantageRuntime";
      }
</code>
      </example>
      <keywords>PDF|PDF/A|Document Writers,PDF|Document Writers,PDF/A</keywords>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.DocumentWriters.DocumentWriter" />
      <seealso cref="T:FT.Topics.ProgrammingWithDocumentWriters">Programming with LEADTOOLS Document Writers</seealso>
      <seealso cref="T:Leadtools.Topics.FilesToBeIncludedWithYourApplication">Files to be Included with Your Application</seealso>
      <seealso cref="T:Leadtools.Topics.UnlockingSpecialLEADFeatures">Unlocking Special LEAD Features</seealso>
    </member>
    <member name="P:Leadtools.Forms.DocumentWriters.PdfCustomBookmark.LevelNumber">
      <summary>Gets or sets a value that determines the level number of bookmark item to be created in bookmark for the created PDF document. <a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="WinRTicon.png" class="WinRTIconTag" name="WinRTIconTag" title="WinRT support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="winrtphone.png" class="WinRTPhoneIconTag" name="WinRTPhoneIconTag" title="WinRT Phone support" border="0" /></a></summary>
      <value>The level number of the bookmark item inside PDF bookmark. Default value is 0.</value>
      <remarks>
        <para>
          <see cref="P:Leadtools.Forms.DocumentWriters.PdfCustomBookmark.LevelNumber" /> represents the level number of bookmark item inside Pdf bookmark, more than bookmark item can have the same
            value. This number should be equal or less than ten.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.DocumentWriters.PdfDocumentOptions" />.</example>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.DocumentWriters.DocumentWriter" />
      <seealso cref="T:FT.Topics.ProgrammingWithDocumentWriters">Programming with LEADTOOLS Document Writers</seealso>
      <seealso cref="T:Leadtools.Topics.FilesToBeIncludedWithYourApplication">Files to be Included with Your Application</seealso>
      <seealso cref="T:Leadtools.Topics.UnlockingSpecialLEADFeatures">Unlocking Special LEAD Features</seealso>
    </member>
    <member name="P:Leadtools.Forms.DocumentWriters.PdfCustomBookmark.PageNumber">
      <summary>Gets or sets a value that determine the page number this custom bookmark refer to in the created PDF document. <a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="WinRTicon.png" class="WinRTIconTag" name="WinRTIconTag" title="WinRT support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="winrtphone.png" class="WinRTPhoneIconTag" name="WinRTPhoneIconTag" title="WinRT Phone support" border="0" /></a></summary>
      <value>The page number where this custom bookmark item refer to. Must be value greater or equal to 1 and less or equal to the total number
            of pages in the final PDF document. Default value is 0.</value>
      <remarks>
        <para>
          <see cref="P:Leadtools.Forms.DocumentWriters.PdfCustomBookmark.PageNumber" /> represents the page number for where the bookmark item should refer in that page, on more than items can have the
            same page number value.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.DocumentWriters.PdfDocumentOptions" />.</example>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.DocumentWriters.DocumentWriter" />
      <seealso cref="T:FT.Topics.ProgrammingWithDocumentWriters">Programming with LEADTOOLS Document Writers</seealso>
      <seealso cref="T:Leadtools.Topics.FilesToBeIncludedWithYourApplication">Files to be Included with Your Application</seealso>
      <seealso cref="T:Leadtools.Topics.UnlockingSpecialLEADFeatures">Unlocking Special LEAD Features</seealso>
    </member>
    <member name="P:Leadtools.Forms.DocumentWriters.PdfCustomBookmark.XCoordinate">
      <summary>Gets or sets the horizontal coordinate in points of this bookmark item in the PDF page. <a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="WinRTicon.png" class="WinRTIconTag" name="WinRTIconTag" title="WinRT support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="winrtphone.png" class="WinRTPhoneIconTag" name="WinRTPhoneIconTag" title="WinRT Phone support" border="0" /></a></summary>
      <value>The horizontal coordinate of this bookmark item in points in the PDF page. Default value is 0.</value>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Forms.DocumentWriters.PdfDocumentOptions" />.</example>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.DocumentWriters.DocumentWriter" />
      <seealso cref="T:FT.Topics.ProgrammingWithDocumentWriters">Programming with LEADTOOLS Document Writers</seealso>
      <seealso cref="T:Leadtools.Topics.FilesToBeIncludedWithYourApplication">Files to be Included with Your Application</seealso>
      <seealso cref="T:Leadtools.Topics.UnlockingSpecialLEADFeatures">Unlocking Special LEAD Features</seealso>
    </member>
    <member name="P:Leadtools.Forms.DocumentWriters.PdfCustomBookmark.YCoordinate">
      <summary>Gets or sets the vertical coordinate in points of this bookmark item in the PDF page. <a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="WinRTicon.png" class="WinRTIconTag" name="WinRTIconTag" title="WinRT support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="winrtphone.png" class="WinRTPhoneIconTag" name="WinRTPhoneIconTag" title="WinRT Phone support" border="0" /></a></summary>
      <value>The vertical coordinate of this bookmark item in points in the PDF page. Default value is 0.</value>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Forms.DocumentWriters.PdfDocumentOptions" />.</example>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.DocumentWriters.DocumentWriter" />
      <seealso cref="T:FT.Topics.ProgrammingWithDocumentWriters">Programming with LEADTOOLS Document Writers</seealso>
      <seealso cref="T:Leadtools.Topics.FilesToBeIncludedWithYourApplication">Files to be Included with Your Application</seealso>
      <seealso cref="T:Leadtools.Topics.UnlockingSpecialLEADFeatures">Unlocking Special LEAD Features</seealso>
    </member>
    <member name="P:Leadtools.Forms.DocumentWriters.PdfCustomBookmark.Name">
      <summary>Gets or sets the name of this bookmark item. <a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="WinRTicon.png" class="WinRTIconTag" name="WinRTIconTag" title="WinRT support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="winrtphone.png" class="WinRTPhoneIconTag" name="WinRTPhoneIconTag" title="WinRT Phone support" border="0" /></a></summary>
      <value>A <see cref="T:System.String" /> which contains the name of this bookmark item. Default value is <strong>null</strong>.</value>
      <remarks>
        <para>The <see cref="P:Leadtools.Forms.DocumentWriters.PdfCustomBookmark.Name" /> represents the name of the bookmark item in the final PDF document.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.DocumentWriters.PdfDocumentOptions" />.</example>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.DocumentWriters.DocumentWriter" />
      <seealso cref="T:FT.Topics.ProgrammingWithDocumentWriters">Programming with LEADTOOLS Document Writers</seealso>
      <seealso cref="T:Leadtools.Topics.FilesToBeIncludedWithYourApplication">Files to be Included with Your Application</seealso>
      <seealso cref="T:Leadtools.Topics.UnlockingSpecialLEADFeatures">Unlocking Special LEAD Features</seealso>
    </member>
    <member name="T:Leadtools.Forms.DocumentWriters.PdfDocumentOptions">
      <summary>Provides extra options to use when saving a document using the Adobe Portable Document Format (PDF). <a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="WinRTicon.png" class="WinRTIconTag" name="WinRTIconTag" title="WinRT support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="winrtphone.png" class="WinRTPhoneIconTag" name="WinRTPhoneIconTag" title="WinRT Phone support" border="0" /></a></summary>
      <remarks>
        <para>The options set in the <see cref="T:Leadtools.Forms.DocumentWriters.PdfDocumentOptions" /> class will be used when the user saves a document using the <see cref="T:Leadtools.Forms.DocumentWriters.DocumentFormat">DocumentFormat.Pdf</see> format.</para>
        <para>Before using the LEADTOOLS Document Writer to create PDF documents, you must unlock the <see cref="T:Leadtools.RasterSupportType">RasterSupportType.DocumentWritersPdf</see> key unless the 
             document writers are being used from the LEADTOOLS OCR engine. For more information, refer to <see cref="T:Leadtools.Topics.UnlockingSpecialLEADFeatures">Unlocking Special LEAD Features</see>.</para>
        <para>To change the options used with the PDF format, perform the following steps:
             <list type="number"><item><description>Use the <see cref="M:Leadtools.Forms.DocumentWriters.DocumentWriter.GetOptions(Leadtools.Forms.DocumentWriters.DocumentFormat)">DocumentWriter.GetOptions</see> method of the <see cref="T:Leadtools.Forms.DocumentWriters.DocumentWriter" /> object being used. 
             Passing <see cref="T:Leadtools.Forms.DocumentWriters.DocumentFormat">DocumentFormat.Pdf</see> to the <i>format</i> parameter. Note that the resulting object from the base 
             <see cref="T:Leadtools.Forms.DocumentWriters.DocumentOptions" /> class needs to be cast to <see cref="T:Leadtools.Forms.DocumentWriters.PdfDocumentOptions" />.</description></item><item><description>Use the various <see cref="T:Leadtools.Forms.DocumentWriters.PdfDocumentOptions" /> properties to change the options.</description></item><item><description>Use <see cref="M:Leadtools.Forms.DocumentWriters.DocumentWriter.SetOptions(Leadtools.Forms.DocumentWriters.DocumentFormat,Leadtools.Forms.DocumentWriters.DocumentOptions)">DocumentWriter.SetOptions</see> to set the new options in the engine.</description></item><item><description>Now you can call the <see cref="M:Leadtools.Forms.DocumentWriters.DocumentWriter.BeginDocument(System.String,Leadtools.Forms.DocumentWriters.DocumentFormat)">DocumentWriter.BeginDocument</see> method (again, with <see cref="T:Leadtools.Forms.DocumentWriters.DocumentFormat">DocumentFormat.Pdf</see> 
             for the <i>format</i> parameter) to create a new document and add the pages.</description></item></list></para>
        <para>The <see cref="T:Leadtools.Forms.DocumentWriters.PdfDocumentOptions" /> class contains the following features:
             <table><tr><th>Feature</th><th>Description</th></tr><tr><td>Set the PDF document type to PDF or PDF/A.</td><td>Use the <see cref="P:Leadtools.Forms.DocumentWriters.PdfDocumentOptions.DocumentType">PdfDocumentOptions.DocumentType</see> property to set the document type to
             either PDF or PDF/A.</td></tr><tr><td>Control the font embedding mode</td><td>Use the <see cref="P:Leadtools.Forms.DocumentWriters.PdfDocumentOptions.FontEmbedMode">PdfDocumentOptions.FontEmbedMode</see> property to
                      control how the fonts are embedded in the resulting PDF document. Note that
                      <see cref="P:Leadtools.Forms.DocumentWriters.PdfDocumentOptions.FontEmbedMode">PdfDocumentOptions.FontEmbedMode</see> is not used when saving PDF/A files; all fonts are
                      always embedded in the file.</td></tr><tr><td>Add an image as an overlay on top of the PDF content.</td><td>Use the <see cref="P:Leadtools.Forms.DocumentWriters.PdfDocumentOptions.ImageOverText">PdfDocumentOptions.ImageOverText</see> property to add the
                      original raster image as an overlay on top of the PDF content. The resulting document will look exactly like the original document. If this
                      option is used, the overlay image must be set in the <see cref="P:Leadtools.Forms.DocumentWriters.DocumentSvgPage.Image" /> property of the <see cref="T:Leadtools.Forms.DocumentWriters.DocumentPage" /> object
                      passed to the <see cref="M:Leadtools.Forms.DocumentWriters.DocumentWriter.AddPage(Leadtools.Forms.DocumentWriters.DocumentPage)">DocumentWriter.AddPage</see> method. Use the <see cref="P:Leadtools.Forms.DocumentWriters.PdfDocumentOptions.ImageOverTextSize" /> and
                      <see cref="P:Leadtools.Forms.DocumentWriters.PdfDocumentOptions.ImageOverTextMode" /> properties to control the quality of this image.</td></tr><tr><td>Create linearized PDF documents optimized for fast web viewing.</td><td>A linearized PDF file is a file that has been organized in a special way to enable efficient incremental access in a
                      network environment. This allows the first page of the PDF file to be displayed in a user Web browser before the entire file is downloaded
                      from the Web server. To enable the creation of linearized PDF documents, use the
                      <see cref="P:Leadtools.Forms.DocumentWriters.PdfDocumentOptions.Linearized">PdfDocumentOptions.Linearized</see> property. PDF linearization is supported in both PDF and PDF/A
                      formats.</td></tr><tr><td>Set the PDF document metadata</td><td>The resulting PDF can contain optional metadata associated with the document. This metadata can be used by external
                      search and indexing engines to search and classify PDF documents. Use the
                      <see cref="P:Leadtools.Forms.DocumentWriters.PdfDocumentOptions.Title">PdfDocumentOptions.Title</see>, <see cref="P:Leadtools.Forms.DocumentWriters.PdfDocumentOptions.Subject">PdfDocumentOptions.Subject</see>,
                      <see cref="P:Leadtools.Forms.DocumentWriters.PdfDocumentOptions.Author">PdfDocumentOptions.Author</see> and
                      <see cref="P:Leadtools.Forms.DocumentWriters.PdfDocumentOptions.Keywords">PdfDocumentOptions.Keywords</see> to set the document metadata.</td></tr><tr><td>Set the PDF initial view properties</td><td><para>The user can control the intial view properties of the generated PDF file as follows:</para><table><tr><th>Property</th><th>Description</th></tr><tr><td><see cref="P:Leadtools.Forms.DocumentWriters.PdfDocumentOptions.PageModeType" /></td><td>Page mode such page only, page with bookmarks, page with thumbnails, etc.</td></tr><tr><td><see cref="P:Leadtools.Forms.DocumentWriters.PdfDocumentOptions.PageLayoutType" /></td><td>Page layout such single page, one column, two pages, etc.</td></tr><tr><td><see cref="P:Leadtools.Forms.DocumentWriters.PdfDocumentOptions.PageFitType" /></td><td>Page fit such as none, fit width, height, etc.</td></tr><tr><td><see cref="P:Leadtools.Forms.DocumentWriters.PdfDocumentOptions.InitialPageNumber" /></td><td>Initial page number to go to.</td></tr><tr><td><see cref="P:Leadtools.Forms.DocumentWriters.PdfDocumentOptions.XCoordinate" /> and <see cref="P:Leadtools.Forms.DocumentWriters.PdfDocumentOptions.YCoordinate" /></td><td>Position of the page to use go to initially.</td></tr><tr><td><see cref="P:Leadtools.Forms.DocumentWriters.PdfDocumentOptions.ZoomPercent" /></td><td>Zoom percentage to use when the document is opened.</td></tr><tr><td><see cref="P:Leadtools.Forms.DocumentWriters.PdfDocumentOptions.HideToolbar" />, <see cref="P:Leadtools.Forms.DocumentWriters.PdfDocumentOptions.HideMenubar" /> and <see cref="P:Leadtools.Forms.DocumentWriters.PdfDocumentOptions.HideWindowUI" /></td><td>Show or hide various user interface elements.</td></tr><tr><td><see cref="P:Leadtools.Forms.DocumentWriters.PdfDocumentOptions.FitWindow" /> and <see cref="P:Leadtools.Forms.DocumentWriters.PdfDocumentOptions.CenterWindow" /></td><td>How the document is viewed in the window.</td></tr><tr><td><see cref="P:Leadtools.Forms.DocumentWriters.PdfDocumentOptions.DisplayDocTitle" /></td><td>Display the document title in the viewer.</td></tr></table></td></tr><tr><td>Security, access rights and Encryption</td><td><para>PDF documents can be protected (secured) using two methods:</para><ul><li><para>Protected against viewing. PDF viewers will request a password from the user when the document is opened for viewing. This password is
                             called the <strong>user password</strong>. The created PDF document can be protected by setting the
                              <see cref="P:Leadtools.Forms.DocumentWriters.PdfDocumentOptions.Protected">PdfDocumentOptions.Protected</see> property to
                              <strong>true</strong> and the <see cref="P:Leadtools.Forms.DocumentWriters.PdfDocumentOptions.UserPassword">PdfDocumentOptions.UserPassword</see> property to the password
                              value.</para></li><li><para>Protected against editing. PDF editor will request a password from the user when the document is opened for editing. This password is
                             called the <strong>owner password</strong>. The created PDF document can be protected by setting the
                              <see cref="P:Leadtools.Forms.DocumentWriters.PdfDocumentOptions.Protected">PdfDocumentOptions.Protected</see> property to <strong>true</strong> and the
                              <see cref="P:Leadtools.Forms.DocumentWriters.PdfDocumentOptions.OwnerPassword">PdfDocumentOptions.OwnerPassword</see> property to the password value.</para></li></ul><para>When a PDF document is protected against editing (through the use of an owner password), an encryption level and owner access
                  rights can be granted or denied in the resulting document. The following table lists the PDF access rights supported by the
                  LEADTOOLS Document Writers:</para><table><tr><th>Encryption</th><th>Owner Access Right</th></tr><tr><td>Low (<see cref="P:Leadtools.Forms.DocumentWriters.PdfDocumentOptions.EncryptionMode">PdfDocumentOptions.EncryptionMode</see> set to
                      <see cref="T:Leadtools.Forms.DocumentWriters.PdfDocumentEncryptionMode">PdfDocumentEncryptionMode.RC40Bit</see>)</td><td>Printing (<see cref="P:Leadtools.Forms.DocumentWriters.PdfDocumentOptions.PrintEnabled">PdfDocumentOptions.PrintEnabled</see>), Copying text
                      (<see cref="P:Leadtools.Forms.DocumentWriters.PdfDocumentOptions.CopyEnabled">PdfDocumentOptions.CopyEnabled</see>), Editing
                      (<see cref="P:Leadtools.Forms.DocumentWriters.PdfDocumentOptions.EditEnabled">PdfDocumentOptions.EditEnabled</see>) and
                      Annotations and comments (<see cref="P:Leadtools.Forms.DocumentWriters.PdfDocumentOptions.AnnotationsEnabled">PdfDocumentOptions.AnnotationsEnabled</see>).</td></tr><tr><td>High (<see cref="P:Leadtools.Forms.DocumentWriters.PdfDocumentOptions.EncryptionMode">PdfDocumentOptions.EncryptionMode</see> set to
                      <see cref="T:Leadtools.Forms.DocumentWriters.PdfDocumentEncryptionMode">PdfDocumentEncryptionMode.RC128Bit</see>)</td><td>Adds the following to owner access rights supported by low level encryption: High quality printing
                      (<see cref="P:Leadtools.Forms.DocumentWriters.PdfDocumentOptions.HighQualityPrintEnabled">PdfDocumentOptions.HighQualityPrintEnabled</see>) and adding/removing pages
                      <see cref="P:Leadtools.Forms.DocumentWriters.PdfDocumentOptions.AssemblyEnabled">PdfDocumentOptions.AssemblyEnabled</see>.</td></tr></table></td></tr><tr><td>Add bookmarks in the final PDF document.</td><td>Use <see cref="T:Leadtools.Forms.DocumentWriters.PdfAutoBookmark" /> or <see cref="T:Leadtools.Forms.DocumentWriters.PdfCustomBookmark" />
             to create either auto or custom (user) bookmarks in the final PDF documents.</td></tr><tr><td>Create an annotated PDF document by adding an annotation objects.</td><td>Annotated PDF can be created by passing valid LEADTOOLS annotation container for each page that needs to be annotated inside the PDF document. Set
                      the <see cref="P:Leadtools.Forms.DocumentWriters.DocumentSvgPage.AnnotationContainer" /> property to a valid LEADTOOLS annotation container before calling the
                      <see cref="M:Leadtools.Forms.DocumentWriters.DocumentWriter.AddPage(Leadtools.Forms.DocumentWriters.DocumentPage)">DocumentWriter.AddPage</see>method.</td></tr></table></para>
        <para>
          <h3>Saving PDF files with minimum file size</h3>
        </para>
        <para>The following table shows the suggested PDF document options to use to achieve the smallest output PDF file size while maintaining an acceptable quality.</para>
        <table>
          <tr>
            <th>
              <para>Property</para>
            </th>
            <th>
              <para>Value</para>
            </th>
            <th>
              <para>Remarks</para>
            </th>
          </tr>
          <tr>
            <td>
              <para>
                <see cref="P:Leadtools.Forms.DocumentWriters.PdfDocumentOptions.OneBitImageCompression" />
              </para>
            </td>
            <td>
              <para>
                <see cref="T:Leadtools.Forms.DocumentWriters.OneBitImageCompressionType">OneBitImageCompressionType.Jbig2</see>
              </para>
            </td>
            <td>
              <para>JBIG2 format offers the best 1-bit image compression.</para>
            </td>
          </tr>
          <tr>
            <td>
              <para>
                <see cref="P:Leadtools.Forms.DocumentWriters.PdfDocumentOptions.ColoredImageCompression" />
              </para>
            </td>
            <td>
              <para>
                <see cref="T:Leadtools.Forms.DocumentWriters.ColoredImageCompressionType">ColoredImageCompressionType.FlateJpx</see>
              </para>
            </td>
            <td>
              <para>JPX offers the best colored image compression (8 or 24 bits per pixel). Revert to flate compression if the image has bits per pixel value other than 8 or 24.</para>
            </td>
          </tr>
          <tr>
            <td>
              <para>
                <see cref="P:Leadtools.Forms.DocumentWriters.PdfDocumentOptions.ImageOverTextSize" />
              </para>
            </td>
            <td>
              <para>
                <see cref="T:Leadtools.Forms.DocumentWriters.DocumentImageOverTextSize">DocumentImageOverTextSize.Half</see>
              </para>
            </td>
            <td>
              <para>Only used when using the image over text option (<see cref="P:Leadtools.Forms.DocumentWriters.PdfDocumentOptions.ImageOverText" /> is <strong>true</strong>). The overlay image is sized by half and stretched over
             the page. This will save up to 75% of the size while maintaining the image quality.</para>
            </td>
          </tr>
          <tr>
            <td>
              <para>
                <see cref="P:Leadtools.Forms.DocumentWriters.PdfDocumentOptions.ImageOverTextMode" />
              </para>
            </td>
            <td>
              <para>
                <see cref="T:Leadtools.Forms.DocumentWriters.DocumentImageOverTextMode">DocumentImageOverTextMode.Relaxed</see>
              </para>
            </td>
            <td>
              <para>Only used when using the image over text option (<see cref="P:Leadtools.Forms.DocumentWriters.PdfDocumentOptions.ImageOverText" /> is <strong>true</strong>). Any grayscale overlay image is converted to black and white
             while ignoring noise and shadows.</para>
            </td>
          </tr>
          <tr>
            <td>
              <para>
                <see cref="P:Leadtools.Forms.DocumentWriters.PdfDocumentOptions.QualityFactor" />
              </para>
            </td>
            <td>
              <para>50 or 100</para>
            </td>
            <td>
              <para>Use 50 when using the image over text option (<see cref="P:Leadtools.Forms.DocumentWriters.PdfDocumentOptions.ImageOverText" /> is <strong>true</strong>). Use 100 when image over text is not used
             (<see cref="P:Leadtools.Forms.DocumentWriters.PdfDocumentOptions.ImageOverText" /> is <strong>false</strong>).</para>
            </td>
          </tr>
          <tr>
            <td>
              <para>
                <see cref="P:Leadtools.Forms.DocumentWriters.PdfDocumentOptions.FontEmbedMode">PdfDocumentOptions.FontEmbedMode</see>
              </para>
            </td>
            <td>
              <para>
                <see cref="T:Leadtools.Forms.DocumentWriters.DocumentFontEmbedMode">DocumentFontEmbedMode.None</see>
              </para>
            </td>
            <td>
              <para>Do not embed the fonts in the PDF file. Warning: The result PDF is not guaranteed to have the same fonts used to create it. Use this option only if font
             substituting is acceptable in your particular scenario. Otherwise, leave this to the default value of <see cref="T:Leadtools.Forms.DocumentWriters.DocumentFontEmbedMode">DocumentFontEmbedMode.Auto</see>.</para>
            </td>
          </tr>
        </table>
        <para>The following code snippet shows how to set the PDF options to produce minimum file size with acceptable quality:</para>
        <para>
          <pre>
            <code inline="true">
             void SetPDFOptions(DocumentWriter documentWriter, bool useImageOverText)
             {
                // Get the current PDF options
                PdfDocumentOptions pdfOptions = documentWriter.GetOptions(DocumentFormat.Pdf) as PdfDocumentOptions;
            
                // Use JBIG2 for B/W images
                pdfOptions.OneBitImageCompression = OneBitImageCompressionType.Jbig2;
                // Use JPEG2000 or Flate for colored images
                pdfOptions.ColoredImageCompression = ColoredImageCompressionType.FlateJpx;
                // Embed fonts automatically
                pdfOptions.FontEmbedMode = DocumentFontEmbedMode.Auto;
            
                if (useImageOverText)
                {
                   // Use image over text
                   pdfOptions.ImageOverText = true;
                   // Re-size the overlay image by 2
                   pdfOptions.ImageOverTextSize = DocumentImageOverTextSize.Half;
                   // Convert grayscale to black and white if possible
                   pdfOptions.ImageOverTextMode = DocumentImageOverTextMode.Relaxed;
                   // Use quality factor of 50
                   pdfOptions.QualityFactor = 50;
                }
                else
                {
                   // Will not use image over text
                   pdfOptions.ImageOverText = false;
                   // Use quality factor of 100
                   pdfOptions.QualityFactor = 100;
                }
            
                // Set our options
                documentWriter.SetOptions(DocumentFormat.Pdf, pdfOptions);
             }
             </code>
          </pre>
        </para>
      </remarks>
      <example>
        <p>This example will create a new Adobe Portable Document Format document (PDF) file using the various supported options.
             </p>
        <code lang="VB">      Imports Leadtools.Forms.DocumentWriters
      Imports Leadtools.Forms.Ocr
      Imports Leadtools
      Imports Leadtools.Codecs

      &lt;TestMethod&gt; _
      Public Sub PdfDocumentOptionsExample()
         Dim inputFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "Leadtools.docx")
         Dim outputFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "Example.pdf")
         ' Setup a new RasterCodecs object
         Dim codecs As New RasterCodecs()
         codecs.Options.RasterizeDocument.Load.Resolution = 300

         ' Get the number of pages in the input document
         Dim pageCount As Integer = codecs.GetTotalPages(inputFileName)

         ' Create a new instance of the LEADTOOLS Document Writer
         Dim docWriter As New DocumentWriter()

         ' Change the PDF options
         Dim pdfOptions As PdfDocumentOptions = DirectCast(docWriter.GetOptions(DocumentFormat.Pdf), PdfDocumentOptions)
         pdfOptions.DocumentType = PdfDocumentType.Pdf
         pdfOptions.FontEmbedMode = DocumentFontEmbedMode.None
         pdfOptions.ImageOverText = False
         pdfOptions.Linearized = False
         pdfOptions.Title = "Add your title here"
         pdfOptions.Subject = "Add your subject here"
         pdfOptions.Keywords = "Add your keywords here"
         pdfOptions.Author = "Add author name here"
         pdfOptions.Protected = True
         pdfOptions.UserPassword = "User password"
         pdfOptions.OwnerPassword = "Owner password"
         pdfOptions.EncryptionMode = PdfDocumentEncryptionMode.RC128Bit
         pdfOptions.PrintEnabled = False
         pdfOptions.HighQualityPrintEnabled = True
         pdfOptions.CopyEnabled = False
         pdfOptions.EditEnabled = True
         pdfOptions.AnnotationsEnabled = True
         pdfOptions.AssemblyEnabled = False
         pdfOptions.OneBitImageCompression = OneBitImageCompressionType.Flate
         pdfOptions.ColoredImageCompression = ColoredImageCompressionType.FlateJpeg
         pdfOptions.QualityFactor = 2

         ' Use default resolution
         pdfOptions.DocumentResolution = 0
         pdfOptions.PageRestriction = DocumentPageRestriction.Relaxed

         ' Setup empty page size (Letter size)
         pdfOptions.EmptyPageWidth = 8.5
         pdfOptions.EmptyPageHeight = 11
         pdfOptions.EmptyPageResolution = 300

         docWriter.SetOptions(DocumentFormat.Pdf, pdfOptions)

         ' Create a new PDF document
         Console.WriteLine("Creating new PDF document: {0}", outputFileName)
         docWriter.BeginDocument(outputFileName, DocumentFormat.Pdf)

         ' Loop through all the pages
         For pageNumber As Integer = 1 To pageCount
            ' Get the page as SVG
            Console.WriteLine("Loading page {0}", pageNumber)
            Dim page As New DocumentSvgPage()
            page.SvgDocument = codecs.LoadSvg(inputFileName, pageNumber, Nothing)

            ' Add the page
            Console.WriteLine("Adding page {0}", pageNumber)
            docWriter.AddPage(page)

            page.SvgDocument.Dispose()
         Next

         ' Finally finish writing the PDF file on disk
         docWriter.EndDocument()
         codecs.Dispose()
      End Sub</code>
        <code lang="CS">      using Leadtools.Forms.DocumentWriters;
      using Leadtools.Forms.Ocr;
      using Leadtools;
      using Leadtools.Codecs;

      public void PdfDocumentOptionsExample()
      {
         var inputFileName = Path.Combine(LEAD_VARS.ImagesDir, "Leadtools.docx");
         var outputFileName = Path.Combine(LEAD_VARS.ImagesDir, "Example.pdf");
         // Setup a new RasterCodecs object
         var codecs = new RasterCodecs();
         codecs.Options.RasterizeDocument.Load.Resolution = 300;

         // Get the number of pages in the input document
         var pageCount = codecs.GetTotalPages(inputFileName);

         // Create a new instance of the LEADTOOLS Document Writer
         var docWriter = new DocumentWriter();

         // Change the PDF options
         var pdfOptions = docWriter.GetOptions(DocumentFormat.Pdf) as PdfDocumentOptions;
         pdfOptions.DocumentType = PdfDocumentType.Pdf;
         pdfOptions.FontEmbedMode = DocumentFontEmbedMode.None;
         pdfOptions.ImageOverText = false;
         pdfOptions.Linearized = false;
         pdfOptions.Title = "Add your title here";
         pdfOptions.Subject = "Add your subject here";
         pdfOptions.Keywords = "Add your keywords here";
         pdfOptions.Author = "Add author name here";
         pdfOptions.Protected = true;
         pdfOptions.UserPassword = "User password";
         pdfOptions.OwnerPassword = "Owner password";
         pdfOptions.EncryptionMode = PdfDocumentEncryptionMode.RC128Bit;
         pdfOptions.PrintEnabled = false;
         pdfOptions.HighQualityPrintEnabled = true;
         pdfOptions.CopyEnabled = false;
         pdfOptions.EditEnabled = true;
         pdfOptions.AnnotationsEnabled = true;
         pdfOptions.AssemblyEnabled = false;
         pdfOptions.OneBitImageCompression = OneBitImageCompressionType.Flate;
         pdfOptions.ColoredImageCompression = ColoredImageCompressionType.FlateJpeg;
         pdfOptions.QualityFactor = 2;

         // Use default resolution
         pdfOptions.DocumentResolution = 0;
         pdfOptions.PageRestriction = DocumentPageRestriction.Relaxed;

         // Setup empty page size (Letter size)
         pdfOptions.EmptyPageWidth = 8.5;
         pdfOptions.EmptyPageHeight = 11;
         pdfOptions.EmptyPageResolution = 300;

         docWriter.SetOptions(DocumentFormat.Pdf, pdfOptions);

         // Create a new PDF document
         Console.WriteLine("Creating new PDF document: {0}", outputFileName);
         docWriter.BeginDocument(outputFileName, DocumentFormat.Pdf);

         // Loop through all the pages
         for (var pageNumber = 1; pageNumber &lt;= pageCount; pageNumber++)
         {
            // Get the page as SVG
            Console.WriteLine("Loading page {0}", pageNumber);
            var page = new DocumentSvgPage();
            page.SvgDocument = codecs.LoadSvg(inputFileName, pageNumber, null);

            // Add the page
            Console.WriteLine("Adding page {0}", pageNumber);
            docWriter.AddPage(page);

            page.SvgDocument.Dispose();
         }

         // Finally finish writing the PDF file on disk
         docWriter.EndDocument();
         codecs.Dispose();
      }</code>
      </example>
      <keywords>PDF|PDF/A|Document Writers,PDF|Document Writers,PDF/A</keywords>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.DocumentWriters.DocumentWriter" />
      <seealso cref="T:FT.Topics.ProgrammingWithDocumentWriters">Programming with LEADTOOLS Document Writers</seealso>
      <seealso cref="T:Leadtools.Topics.FilesToBeIncludedWithYourApplication">Files to be Included with Your Application</seealso>
      <seealso cref="T:Leadtools.Topics.UnlockingSpecialLEADFeatures">Unlocking Special LEAD Features</seealso>
    </member>
    <member name="M:Leadtools.Forms.DocumentWriters.PdfDocumentOptions.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Leadtools.Forms.DocumentWriters.PdfDocumentOptions" /> class. <a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
      <remarks>
        <para>The following table lists the default values of the <see cref="T:Leadtools.Forms.DocumentWriters.PdfDocumentOptions" /> properties:
            <table><tr><th>Property</th><th>Value</th></tr><tr><td><see cref="P:Leadtools.Forms.DocumentWriters.PdfDocumentOptions.DocumentType" /></td><td><see cref="T:Leadtools.Forms.DocumentWriters.PdfDocumentType">PdfDocumentType.Pdf</see></td></tr><tr><td><see cref="P:Leadtools.Forms.DocumentWriters.PdfDocumentOptions.FontEmbedMode" /></td><td><see cref="T:Leadtools.Forms.DocumentWriters.DocumentFontEmbedMode">DocumentFontEmbedMode.Auto</see></td></tr><tr><td><see cref="P:Leadtools.Forms.DocumentWriters.PdfDocumentOptions.ImageOverText" /></td><td><strong>false</strong></td></tr><tr><td><see cref="P:Leadtools.Forms.DocumentWriters.PdfDocumentOptions.ImageOverTextSize" /></td><td><see cref="T:Leadtools.Forms.DocumentWriters.DocumentImageOverTextSize">DocumentImageOverTextSize.Original</see></td></tr><tr><td><see cref="P:Leadtools.Forms.DocumentWriters.PdfDocumentOptions.ImageOverTextMode" /></td><td><see cref="T:Leadtools.Forms.DocumentWriters.DocumentImageOverTextMode">DocumentImageOverTextMode.Strict</see></td></tr><tr><td><see cref="P:Leadtools.Forms.DocumentWriters.PdfDocumentOptions.Linearized" /></td><td><strong>false</strong></td></tr><tr><td><see cref="P:Leadtools.Forms.DocumentWriters.PdfDocumentOptions.Title" /></td><td><strong>null</strong></td></tr><tr><td><see cref="P:Leadtools.Forms.DocumentWriters.PdfDocumentOptions.Subject" /></td><td><strong>null</strong></td></tr><tr><td><see cref="P:Leadtools.Forms.DocumentWriters.PdfDocumentOptions.Keywords" /></td><td><strong>null</strong></td></tr><tr><td><see cref="P:Leadtools.Forms.DocumentWriters.PdfDocumentOptions.Author" /></td><td><strong>null</strong></td></tr><tr><td><see cref="P:Leadtools.Forms.DocumentWriters.PdfDocumentOptions.Protected" /></td><td><strong>false</strong></td></tr><tr><td><see cref="P:Leadtools.Forms.DocumentWriters.PdfDocumentOptions.UserPassword" /></td><td><strong>null</strong></td></tr><tr><td><see cref="P:Leadtools.Forms.DocumentWriters.PdfDocumentOptions.OwnerPassword" /></td><td><strong>null</strong></td></tr><tr><td><see cref="P:Leadtools.Forms.DocumentWriters.PdfDocumentOptions.EncryptionMode" /></td><td><see cref="T:Leadtools.Forms.DocumentWriters.PdfDocumentEncryptionMode">PdfDocumentEncryptionMode.RC128Bit</see></td></tr><tr><td><see cref="P:Leadtools.Forms.DocumentWriters.PdfDocumentOptions.PrintEnabled" /></td><td><strong>true</strong></td></tr><tr><td><see cref="P:Leadtools.Forms.DocumentWriters.PdfDocumentOptions.HighQualityPrintEnabled" /></td><td><strong>true</strong></td></tr><tr><td><see cref="P:Leadtools.Forms.DocumentWriters.PdfDocumentOptions.CopyEnabled" /></td><td><strong>true</strong></td></tr><tr><td><see cref="P:Leadtools.Forms.DocumentWriters.PdfDocumentOptions.EditEnabled" /></td><td><strong>true</strong></td></tr><tr><td><see cref="P:Leadtools.Forms.DocumentWriters.PdfDocumentOptions.AnnotationsEnabled" /></td><td><strong>true</strong></td></tr><tr><td><see cref="P:Leadtools.Forms.DocumentWriters.PdfDocumentOptions.AssemblyEnabled" /></td><td><strong>false</strong></td></tr><tr><td><see cref="P:Leadtools.Forms.DocumentWriters.PdfDocumentOptions.OneBitImageCompression" /></td><td><see cref="T:Leadtools.Forms.DocumentWriters.OneBitImageCompressionType">OneBitImageCompressionType.Jbig2</see></td></tr><tr><td><see cref="P:Leadtools.Forms.DocumentWriters.PdfDocumentOptions.ColoredImageCompression" /></td><td><see cref="T:Leadtools.Forms.DocumentWriters.ColoredImageCompressionType">ColoredImageCompressionType.FlateJpeg</see></td></tr><tr><td><see cref="P:Leadtools.Forms.DocumentWriters.PdfDocumentOptions.QualityFactor" /></td><td>80</td></tr><tr><td><see cref="P:Leadtools.Forms.DocumentWriters.PdfDocumentOptions.AutoBookmarksEnabled" /></td><td><strong>false</strong></td></tr><tr><td><see cref="P:Leadtools.Forms.DocumentWriters.PdfDocumentOptions.TotalBookmarkLevels" /></td><td>-1</td></tr><tr><td><see cref="P:Leadtools.Forms.DocumentWriters.PdfDocumentOptions.AutoBookmarks" /></td><td>Empty list</td></tr><tr><td><see cref="P:Leadtools.Forms.DocumentWriters.PdfDocumentOptions.CustomBookmarks" /></td><td>Empty list</td></tr><tr><td><see cref="P:Leadtools.Forms.DocumentWriters.PdfDocumentOptions.PageLayoutType" /></td><td><see cref="T:Leadtools.Forms.DocumentWriters.PdfDocumentPageLayoutType">PdfDocumentPageLayoutType.SinglePageDisplay</see></td></tr></table></para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.DocumentWriters.PdfDocumentOptions" />.</example>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.DocumentWriters.DocumentWriter" />
      <seealso cref="T:FT.Topics.ProgrammingWithDocumentWriters">Programming with LEADTOOLS Document Writers</seealso>
      <seealso cref="T:Leadtools.Topics.FilesToBeIncludedWithYourApplication">Files to be Included with Your Application</seealso>
      <seealso cref="T:Leadtools.Topics.UnlockingSpecialLEADFeatures">Unlocking Special LEAD Features</seealso>
    </member>
    <member name="M:Leadtools.Forms.DocumentWriters.PdfDocumentOptions.Clone">
      <summary>Creates an exact copy of this <see cref="T:Leadtools.Forms.DocumentWriters.DocumentOptions" /><a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="WinRTicon.png" class="WinRTIconTag" name="WinRTIconTag" title="WinRT support" border="0" /></a></summary>
      <returns>The <see cref="T:Leadtools.Forms.DocumentWriters.DocumentOptions" /> this method creates.</returns>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Forms.DocumentWriters.DocumentWriter" />.</example>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.DocumentWriters.DocumentWriter">Document Writers</seealso>
      <seealso cref="T:FT.Topics.ProgrammingWithDocumentWriters">Programming with LEADTOOLS Document Writers</seealso>
      <seealso cref="T:Leadtools.Topics.FilesToBeIncludedWithYourApplication">Files to be Included with Your Application</seealso>
      <seealso cref="T:Leadtools.Topics.UnlockingSpecialLEADFeatures">Unlocking Special LEAD Features</seealso>
    </member>
    <member name="M:Leadtools.Forms.DocumentWriters.PdfDocumentOptions.Clone_WinRT">
      <summary>
            This class implementation of <see cref="T:Leadtools.Forms.DocumentWriters.DocumentOptions" />.
            </summary>
      <returns>Refer to <see cref="M:Leadtools.Forms.DocumentWriters.DocumentOptions.Clone">DocumentOptions.Clone</see>.</returns>
      <noremarks />
      <noexample />
      <winrt />
    </member>
    <member name="P:Leadtools.Forms.DocumentWriters.PdfDocumentOptions.Format">
      <summary>Gets the document format type associated with this options class. <a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="WinRTicon.png" class="WinRTIconTag" name="WinRTIconTag" title="WinRT support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="winrtphone.png" class="WinRTPhoneIconTag" name="WinRTPhoneIconTag" title="WinRT Phone support" border="0" /></a></summary>
      <value>This property will always return <see cref="T:Leadtools.Forms.DocumentWriters.DocumentFormat">DocumentFormat.Pdf</see>.</value>
      <remarks>
        <para>This property is required internally by LEADTOOLS.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.DocumentWriters.PdfDocumentOptions" />.</example>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.DocumentWriters.DocumentWriter" />
      <seealso cref="T:FT.Topics.ProgrammingWithDocumentWriters">Programming with LEADTOOLS Document Writers</seealso>
      <seealso cref="T:Leadtools.Topics.FilesToBeIncludedWithYourApplication">Files to be Included with Your Application</seealso>
      <seealso cref="T:Leadtools.Topics.UnlockingSpecialLEADFeatures">Unlocking Special LEAD Features</seealso>
    </member>
    <member name="P:Leadtools.Forms.DocumentWriters.PdfDocumentOptions.ImageOverText">
      <summary>Gets or sets a value that indicates whether to use a raster image overlay on top of the resulting PDF document. <a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="WinRTicon.png" class="WinRTIconTag" name="WinRTIconTag" title="WinRT support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="winrtphone.png" class="WinRTPhoneIconTag" name="WinRTPhoneIconTag" title="WinRT Phone support" border="0" /></a></summary>
      <value>
        <strong>true</strong> to use a raster image overlay on top of the resulting PDF document, otherwise; <strong>false</strong>. Default
            value is <strong>false</strong>.</value>
      <remarks>
        <para>This is used when creating a searchable PDF document that is required to be the same as the original. When true, 
            an image of the original file will be saved over the entire PDF document
            as an overlay. When using the resulting document in a PDF viewer, you can still search the text underneath the 
            overlay image and still maintain the look of the original document.</para>
        <para>The <see cref="M:Leadtools.Forms.DocumentWriters.DocumentWriter.AddPage(Leadtools.Forms.DocumentWriters.DocumentPage)">DocumentWriter.AddPage</see> method and the <see cref="T:Leadtools.Forms.DocumentWriters.DocumentPage" /> 
            structure provide more information on how to create a PDF file that uses
            overlay images.</para>
        <para>Use the <see cref="P:Leadtools.Forms.DocumentWriters.PdfDocumentOptions.ImageOverTextSize" /> property to control the quality of the overlay image.</para>
        <para>Use the <see cref="P:Leadtools.Forms.DocumentWriters.PdfDocumentOptions.ImageOverTextMode" /> property to control if and how grayscale images are treated in the final document.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.DocumentWriters.PdfDocumentOptions" />.</example>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.DocumentWriters.DocumentWriter" />
      <seealso cref="T:FT.Topics.ProgrammingWithDocumentWriters">Programming with LEADTOOLS Document Writers</seealso>
      <seealso cref="T:Leadtools.Topics.FilesToBeIncludedWithYourApplication">Files to be Included with Your Application</seealso>
      <seealso cref="T:Leadtools.Topics.UnlockingSpecialLEADFeatures">Unlocking Special LEAD Features</seealso>
    </member>
    <member name="P:Leadtools.Forms.DocumentWriters.PdfDocumentOptions.ImageOverTextSize">
      <summary>Gets or sets a value that indicates the resize options for the overlay image (image over text). <a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="WinRTicon.png" class="WinRTIconTag" name="WinRTIconTag" title="WinRT support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="winrtphone.png" class="WinRTPhoneIconTag" name="WinRTPhoneIconTag" title="WinRT Phone support" border="0" /></a></summary>
      <value>A value that indicates the resize options for the overlay image (image over text). Default value is <see cref="T:Leadtools.Forms.DocumentWriters.DocumentImageOverTextSize">DocumentImageOverTextSize.Original</see></value>
      <remarks>
        <para>This property is only used when the value of <see cref="P:Leadtools.Forms.DocumentWriters.PdfDocumentOptions.ImageOverText" /> is set to <strong>true</strong>.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.DocumentWriters.PdfDocumentOptions" />.</example>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.DocumentWriters.DocumentWriter" />
      <seealso cref="T:FT.Topics.ProgrammingWithDocumentWriters">Programming with LEADTOOLS Document Writers</seealso>
      <seealso cref="T:Leadtools.Topics.FilesToBeIncludedWithYourApplication">Files to be Included with Your Application</seealso>
      <seealso cref="T:Leadtools.Topics.UnlockingSpecialLEADFeatures">Unlocking Special LEAD Features</seealso>
    </member>
    <member name="P:Leadtools.Forms.DocumentWriters.PdfDocumentOptions.ImageOverTextMode">
      <summary>Gets or sets a value that indicates how the document writer converts the overlay image (image over text). <a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="WinRTicon.png" class="WinRTIconTag" name="WinRTIconTag" title="WinRT support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="winrtphone.png" class="WinRTPhoneIconTag" name="WinRTPhoneIconTag" title="WinRT Phone support" border="0" /></a></summary>
      <value>A value that indicates how the document writer converts the overlay image (image over text). Default value is <see cref="T:Leadtools.Forms.DocumentWriters.DocumentImageOverTextMode">DocumentImageOverTextMode.Strict</see></value>
      <remarks>
        <para>This property is only used when the value of <see cref="P:Leadtools.Forms.DocumentWriters.PdfDocumentOptions.ImageOverText" /> is set to <strong>true</strong>.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.DocumentWriters.PdfDocumentOptions" />.</example>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.DocumentWriters.DocumentWriter" />
      <seealso cref="T:FT.Topics.ProgrammingWithDocumentWriters">Programming with LEADTOOLS Document Writers</seealso>
      <seealso cref="T:Leadtools.Topics.FilesToBeIncludedWithYourApplication">Files to be Included with Your Application</seealso>
      <seealso cref="T:Leadtools.Topics.UnlockingSpecialLEADFeatures">Unlocking Special LEAD Features</seealso>
    </member>
    <member name="P:Leadtools.Forms.DocumentWriters.PdfDocumentOptions.FontEmbedMode">
      <summary>Gets or sets the font embedding mode used when creating an PDF document. <a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="WinRTicon.png" class="WinRTIconTag" name="WinRTIconTag" title="WinRT support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="winrtphone.png" class="WinRTPhoneIconTag" name="WinRTPhoneIconTag" title="WinRT Phone support" border="0" /></a></summary>
      <value>One of the <see cref="T:Leadtools.Forms.DocumentWriters.DocumentFontEmbedMode" /> enumeration members that indicate which font embedding mode to use when creating a PDF document.
            Default value is <see cref="T:Leadtools.Forms.DocumentWriters.DocumentFontEmbedMode">DocumentFontEmbedMode.Auto</see>.</value>
      <remarks>
        <para>For more information, refer to the <see cref="T:Leadtools.Forms.DocumentWriters.DocumentFontEmbedMode" /> enumeration.</para>
        <para>Note that <see cref="P:Leadtools.Forms.DocumentWriters.PdfDocumentOptions.FontEmbedMode" /> is not supported when <see cref="P:Leadtools.Forms.DocumentWriters.PdfDocumentOptions.DocumentType" /> is
            <see cref="T:Leadtools.Forms.DocumentWriters.PdfDocumentType">PdfDocumentType.PdfA</see>. When saving PDF/A files; all fonts are always embedded in the file.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.DocumentWriters.PdfDocumentOptions" />.</example>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.DocumentWriters.DocumentWriter" />
      <seealso cref="T:FT.Topics.ProgrammingWithDocumentWriters">Programming with LEADTOOLS Document Writers</seealso>
      <seealso cref="T:Leadtools.Topics.FilesToBeIncludedWithYourApplication">Files to be Included with Your Application</seealso>
      <seealso cref="T:Leadtools.Topics.UnlockingSpecialLEADFeatures">Unlocking Special LEAD Features</seealso>
    </member>
    <member name="P:Leadtools.Forms.DocumentWriters.PdfDocumentOptions.DocumentType">
      <summary>Gets or sets which type of PDF file will be created using the LEADTOOLS Document Writers. <a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="WinRTicon.png" class="WinRTIconTag" name="WinRTIconTag" title="WinRT support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="winrtphone.png" class="WinRTPhoneIconTag" name="WinRTPhoneIconTag" title="WinRT Phone support" border="0" /></a></summary>
      <value>One of the <see cref="T:Leadtools.Forms.DocumentWriters.PdfDocumentType" /> enumeration members that indicate which type of PDF file will be created. Default value is <see cref="T:Leadtools.Forms.DocumentWriters.PdfDocumentType">PdfDocumentType.Pdf</see></value>
      <remarks>
        <para>LEADTOOLS Document Writers supports creating the PDF/A subset of the Adobe Portable Document Format (PDF) documents. For more information, refer to the
            <see cref="T:Leadtools.Forms.DocumentWriters.PdfDocumentType" /> enumeration.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.DocumentWriters.PdfDocumentOptions" />.</example>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.DocumentWriters.DocumentWriter" />
      <seealso cref="T:FT.Topics.ProgrammingWithDocumentWriters">Programming with LEADTOOLS Document Writers</seealso>
      <seealso cref="T:Leadtools.Topics.FilesToBeIncludedWithYourApplication">Files to be Included with Your Application</seealso>
      <seealso cref="T:Leadtools.Topics.UnlockingSpecialLEADFeatures">Unlocking Special LEAD Features</seealso>
    </member>
    <member name="P:Leadtools.Forms.DocumentWriters.PdfDocumentOptions.Linearized">
      <summary>Gets or sets a value that indicates whether to create a PDF document that is optimized for fast web viewing. <a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="WinRTicon.png" class="WinRTIconTag" name="WinRTIconTag" title="WinRT support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="winrtphone.png" class="WinRTPhoneIconTag" name="WinRTPhoneIconTag" title="WinRT Phone support" border="0" /></a></summary>
      <value>
        <strong>true</strong> to create a PDF document optimized for fast web viewing, otherwise; <strong>false</strong>. Default value is <strong>false</strong>.</value>
      <remarks>
        <para>A Linearized PDF file is a file that has been organized in such a way as to enable efficient, incremental access in a network environment.
            Linearized PDF files allow the first page of the PDF file to be displayed in a user Web browser before the entire file is downloaded from the Web server.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.DocumentWriters.PdfDocumentOptions" />.</example>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.DocumentWriters.DocumentWriter" />
      <seealso cref="T:FT.Topics.ProgrammingWithDocumentWriters">Programming with LEADTOOLS Document Writers</seealso>
      <seealso cref="T:Leadtools.Topics.FilesToBeIncludedWithYourApplication">Files to be Included with Your Application</seealso>
      <seealso cref="T:Leadtools.Topics.UnlockingSpecialLEADFeatures">Unlocking Special LEAD Features</seealso>
    </member>
    <member name="P:Leadtools.Forms.DocumentWriters.PdfDocumentOptions.Title">
      <summary>Gets or sets a title value to be used in the resulting PDF document. <a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="WinRTicon.png" class="WinRTIconTag" name="WinRTIconTag" title="WinRT support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="winrtphone.png" class="WinRTPhoneIconTag" name="WinRTPhoneIconTag" title="WinRT Phone support" border="0" /></a></summary>
      <value>A <see cref="T:System.String" /> which contains the PDF document title to be used. To reset the title value, use either an empty string or <strong>null</strong>. Default value is <strong>null</strong>.</value>
      <remarks>
        <para>The title for any PDF document can be retrieved by PDF viewers. Note that many search and indexing engines use
            the title in the resulting list or as metadata.</para>
        <para>LEADTOOLS Document writers supports the following PDF properties:
             <ul><li><see cref="P:Leadtools.Forms.DocumentWriters.PdfDocumentOptions.Title" /></li><li><see cref="P:Leadtools.Forms.DocumentWriters.PdfDocumentOptions.Subject" /></li><li><see cref="P:Leadtools.Forms.DocumentWriters.PdfDocumentOptions.Author" /></li><li><see cref="P:Leadtools.Forms.DocumentWriters.PdfDocumentOptions.Keywords" /></li></ul></para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.DocumentWriters.PdfDocumentOptions" />.</example>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.DocumentWriters.DocumentWriter" />
      <seealso cref="T:FT.Topics.ProgrammingWithDocumentWriters">Programming with LEADTOOLS Document Writers</seealso>
      <seealso cref="T:Leadtools.Topics.FilesToBeIncludedWithYourApplication">Files to be Included with Your Application</seealso>
      <seealso cref="T:Leadtools.Topics.UnlockingSpecialLEADFeatures">Unlocking Special LEAD Features</seealso>
    </member>
    <member name="P:Leadtools.Forms.DocumentWriters.PdfDocumentOptions.Subject">
      <summary>Gets or sets the subject value to be used in the resulting PDF document. <a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="WinRTicon.png" class="WinRTIconTag" name="WinRTIconTag" title="WinRT support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="winrtphone.png" class="WinRTPhoneIconTag" name="WinRTPhoneIconTag" title="WinRT Phone support" border="0" /></a></summary>
      <value>A <see cref="T:System.String" /> which contains the PDF document subject to be used.
            To reset the subject value, use either an empty string or <strong>null</strong>. Default value is <strong>null</strong>.</value>
      <remarks>
        <para>The subject for any PDF document can be retrieved by PDF viewers. Note that many search and indexing engines use
            the subject in the resulting list or as metadata.</para>
        <para>LEADTOOLS Document writers supports the following PDF properties:
             <ul><li><see cref="P:Leadtools.Forms.DocumentWriters.PdfDocumentOptions.Title" /></li><li><see cref="P:Leadtools.Forms.DocumentWriters.PdfDocumentOptions.Subject" /></li><li><see cref="P:Leadtools.Forms.DocumentWriters.PdfDocumentOptions.Author" /></li><li><see cref="P:Leadtools.Forms.DocumentWriters.PdfDocumentOptions.Keywords" /></li></ul></para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.DocumentWriters.PdfDocumentOptions" />.</example>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.DocumentWriters.DocumentWriter" />
      <seealso cref="T:FT.Topics.ProgrammingWithDocumentWriters">Programming with LEADTOOLS Document Writers</seealso>
      <seealso cref="T:Leadtools.Topics.FilesToBeIncludedWithYourApplication">Files to be Included with Your Application</seealso>
      <seealso cref="T:Leadtools.Topics.UnlockingSpecialLEADFeatures">Unlocking Special LEAD Features</seealso>
    </member>
    <member name="P:Leadtools.Forms.DocumentWriters.PdfDocumentOptions.Keywords">
      <summary>Gets or sets the keywords to be used in the resulting PDF document. <a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="WinRTicon.png" class="WinRTIconTag" name="WinRTIconTag" title="WinRT support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="winrtphone.png" class="WinRTPhoneIconTag" name="WinRTPhoneIconTag" title="WinRT Phone support" border="0" /></a></summary>
      <value>A <see cref="T:System.String" /> which contains the keywords associated with the PDF document.
            To reset the keywords value, use either an empty string or <strong>null</strong>. Default value is <strong>null</strong>.</value>
      <remarks>
        <para>The keywords for any PDF document can be retrieved by PDF viewers. Note that keywords can be particularly useful for
            search and indexing engines when PDF classifying documents and will always be used as part of the document metadata.</para>
        <para>PDF uses commas or dots to separate the different keywords in the document. For example, to use One, Two, Three
            as the keywords, pass a string in one of the following format: "One,Two,Three" or "One.Two.Three".</para>
        <para>LEADTOOLS Document writers supports the following PDF properties:
            <ul><li><see cref="P:Leadtools.Forms.DocumentWriters.PdfDocumentOptions.Title" /></li><li><see cref="P:Leadtools.Forms.DocumentWriters.PdfDocumentOptions.Subject" /></li><li><see cref="P:Leadtools.Forms.DocumentWriters.PdfDocumentOptions.Author" /></li><li><see cref="P:Leadtools.Forms.DocumentWriters.PdfDocumentOptions.Keywords" /></li></ul></para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.DocumentWriters.PdfDocumentOptions" />.</example>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.DocumentWriters.DocumentWriter" />
      <seealso cref="T:FT.Topics.ProgrammingWithDocumentWriters">Programming with LEADTOOLS Document Writers</seealso>
      <seealso cref="T:Leadtools.Topics.FilesToBeIncludedWithYourApplication">Files to be Included with Your Application</seealso>
      <seealso cref="T:Leadtools.Topics.UnlockingSpecialLEADFeatures">Unlocking Special LEAD Features</seealso>
    </member>
    <member name="P:Leadtools.Forms.DocumentWriters.PdfDocumentOptions.Author">
      <summary>Gets or sets the author value to be used in the resulting PDF document. <a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="WinRTicon.png" class="WinRTIconTag" name="WinRTIconTag" title="WinRT support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="winrtphone.png" class="WinRTPhoneIconTag" name="WinRTPhoneIconTag" title="WinRT Phone support" border="0" /></a></summary>
      <value>A <see cref="T:System.String" /> which contains the PDF document author (the name of the person who created the document) to be used.
            To reset the author value, use either an empty string or <strong>null</strong>. Default value is <strong>null</strong>.</value>
      <remarks>
        <para>The author for any PDF document can be retrieved by PDF viewers. Note that many search and indexing engines use
            the author in the resulting list or as metadata.</para>
        <para>LEADTOOLS Document writers supports the following PDF properties:
            <ul><li><see cref="P:Leadtools.Forms.DocumentWriters.PdfDocumentOptions.Title" /></li><li><see cref="P:Leadtools.Forms.DocumentWriters.PdfDocumentOptions.Subject" /></li><li><see cref="P:Leadtools.Forms.DocumentWriters.PdfDocumentOptions.Author" /></li><li><see cref="P:Leadtools.Forms.DocumentWriters.PdfDocumentOptions.Keywords" /></li></ul></para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.DocumentWriters.PdfDocumentOptions" />.</example>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.DocumentWriters.DocumentWriter" />
      <seealso cref="T:FT.Topics.ProgrammingWithDocumentWriters">Programming with LEADTOOLS Document Writers</seealso>
      <seealso cref="T:Leadtools.Topics.FilesToBeIncludedWithYourApplication">Files to be Included with Your Application</seealso>
      <seealso cref="T:Leadtools.Topics.UnlockingSpecialLEADFeatures">Unlocking Special LEAD Features</seealso>
    </member>
    <member name="P:Leadtools.Forms.DocumentWriters.PdfDocumentOptions.Protected">
      <summary>Gets or sets a value that indicates whether to create a protected PDF document. <a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="WinRTicon.png" class="WinRTIconTag" name="WinRTIconTag" title="WinRT support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="winrtphone.png" class="WinRTPhoneIconTag" name="WinRTPhoneIconTag" title="WinRT Phone support" border="0" /></a></summary>
      <value>
        <strong>true</strong> to create a protected PDF document, otherwise; <strong>false</strong>. Default value is <strong>false</strong>.</value>
      <remarks>
        <para>This is used when creating encrypted PDF documents. PDF documents can be encrypted at two levels: low (40-bit RC4) and high
            (128-bit RC4). To change the encryption level, use the <see cref="P:Leadtools.Forms.DocumentWriters.PdfDocumentOptions.EncryptionMode" /> property.</para>
        <para>PDF documents can be protected (secured) in two different ways, as follows:</para>
        <list type="bullet">
          <item>
            <description>
              <para>Protected against viewing. PDF viewer applications will request a password from the user when the document is opened for viewing. This password is
            called the <strong>user password</strong>. To protect a PDF document against viewing, set the <see cref="P:Leadtools.Forms.DocumentWriters.PdfDocumentOptions.Protected" /> property to
            <strong>true</strong> and the <see cref="P:Leadtools.Forms.DocumentWriters.PdfDocumentOptions.UserPassword" /> property to the password value.</para>
            </description>
          </item>
          <item>
            <description>
              <para>Protected against editing. PDF editor applications will request a password from the user when the document is opened for editing. This password is
            called the <strong>owner password</strong>. To protect a PDF document against editing, set the <see cref="P:Leadtools.Forms.DocumentWriters.PdfDocumentOptions.Protected" /> property to
            <strong>true</strong> and the <see cref="P:Leadtools.Forms.DocumentWriters.PdfDocumentOptions.OwnerPassword" /> property to the password value.</para>
            </description>
          </item>
        </list>
        <para>When a PDF document is protected against editing (through the use of an owner password), an encryption level and owner access
            rights can be granted or denied in the resulting document. The following table lists the PDF access rights supported by the
            LEADTOOLS Document Writers:</para>
        <list type="table">
          <listheader>
            <term>Encryption</term>
            <description>Owner Access Right</description>
          </listheader>
          <item>
            <term>Low (<see cref="P:Leadtools.Forms.DocumentWriters.PdfDocumentOptions.EncryptionMode">PdfDocumentOptions.EncryptionMode</see> set to
            <see cref="T:Leadtools.Forms.DocumentWriters.PdfDocumentEncryptionMode">PdfDocumentEncryptionMode.RC40Bit</see>)</term>
            <description>Printing (<see cref="P:Leadtools.Forms.DocumentWriters.PdfDocumentOptions.PrintEnabled">PdfDocumentOptions.PrintEnabled</see>), Copying text
            (<see cref="P:Leadtools.Forms.DocumentWriters.PdfDocumentOptions.CopyEnabled">PdfDocumentOptions.CopyEnabled</see>), Editing
            (<see cref="P:Leadtools.Forms.DocumentWriters.PdfDocumentOptions.EditEnabled">PdfDocumentOptions.EditEnabled</see>) and
            Annotations and comments (<see cref="P:Leadtools.Forms.DocumentWriters.PdfDocumentOptions.AnnotationsEnabled">PdfDocumentOptions.AnnotationsEnabled</see>).</description>
          </item>
          <item>
            <term>High (<see cref="P:Leadtools.Forms.DocumentWriters.PdfDocumentOptions.EncryptionMode">PdfDocumentOptions.EncryptionMode</see> set to
            <see cref="T:Leadtools.Forms.DocumentWriters.PdfDocumentEncryptionMode">PdfDocumentEncryptionMode.RC128Bit</see>)</term>
            <description>Adds the following to owner access rights supported by low level encryption: High quality printing
            (<see cref="P:Leadtools.Forms.DocumentWriters.PdfDocumentOptions.HighQualityPrintEnabled">PdfDocumentOptions.HighQualityPrintEnabled</see>) and adding/removing pages
            <see cref="P:Leadtools.Forms.DocumentWriters.PdfDocumentOptions.AssemblyEnabled">PdfDocumentOptions.AssemblyEnabled</see>.</description>
          </item>
        </list>
        <para>Note that Owner Access Rights (<see cref="P:Leadtools.Forms.DocumentWriters.PdfDocumentOptions.UserPassword" /> and <see cref="P:Leadtools.Forms.DocumentWriters.PdfDocumentOptions.OwnerPassword" />) have effect only if 
            you set the <see cref="P:Leadtools.Forms.DocumentWriters.PdfDocumentOptions.Protected" /> property to <strong>true</strong>.</para>
        <para>Note that <see cref="P:Leadtools.Forms.DocumentWriters.PdfDocumentOptions.Protected" /> is not supported when the <see cref="P:Leadtools.Forms.DocumentWriters.PdfDocumentOptions.DocumentType" /> is
            <see cref="T:Leadtools.Forms.DocumentWriters.PdfDocumentType">PdfDocumentType.PdfA</see>.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.DocumentWriters.PdfDocumentOptions" />.</example>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.DocumentWriters.DocumentWriter" />
      <seealso cref="T:FT.Topics.ProgrammingWithDocumentWriters">Programming with LEADTOOLS Document Writers</seealso>
      <seealso cref="T:Leadtools.Topics.FilesToBeIncludedWithYourApplication">Files to be Included with Your Application</seealso>
      <seealso cref="T:Leadtools.Topics.UnlockingSpecialLEADFeatures">Unlocking Special LEAD Features</seealso>
    </member>
    <member name="P:Leadtools.Forms.DocumentWriters.PdfDocumentOptions.UserPassword">
      <summary>Gets or sets the user password value to be used in the resulting PDF document. <a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="WinRTicon.png" class="WinRTIconTag" name="WinRTIconTag" title="WinRT support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="winrtphone.png" class="WinRTPhoneIconTag" name="WinRTPhoneIconTag" title="WinRT Phone support" border="0" /></a></summary>
      <value>A <see cref="T:System.String" /> that contains the user password value to be used. To reset the user password, use either an empty string or
            <strong>null</strong>. Default value is <strong>null</strong>.</value>
      <remarks>
        <para>The user password is used by PDF viewers to grant or deny viewing the PDF document. For more information, refer to
            the <see cref="P:Leadtools.Forms.DocumentWriters.PdfDocumentOptions.Protected" /> property.</para>
        <para>The <see cref="P:Leadtools.Forms.DocumentWriters.PdfDocumentOptions.UserPassword" /> property is only used when the <see cref="P:Leadtools.Forms.DocumentWriters.PdfDocumentOptions.Protected" /> property is set to <strong>true</strong>.</para>
        <para>Important: <see cref="P:Leadtools.Forms.DocumentWriters.PdfDocumentOptions.UserPassword" /> and <see cref="P:Leadtools.Forms.DocumentWriters.PdfDocumentOptions.OwnerPassword" /> will internally be converted to an ASCII string due to the
            specifications of the PDF format.</para>
        <para>Note that <see cref="P:Leadtools.Forms.DocumentWriters.PdfDocumentOptions.UserPassword" /> is not supported when <see cref="P:Leadtools.Forms.DocumentWriters.PdfDocumentOptions.DocumentType" /> is
            <see cref="T:Leadtools.Forms.DocumentWriters.PdfDocumentType">PdfDocumentType.PdfA</see>.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.DocumentWriters.PdfDocumentOptions" />.</example>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.DocumentWriters.DocumentWriter" />
      <seealso cref="T:FT.Topics.ProgrammingWithDocumentWriters">Programming with LEADTOOLS Document Writers</seealso>
      <seealso cref="T:Leadtools.Topics.FilesToBeIncludedWithYourApplication">Files to be Included with Your Application</seealso>
      <seealso cref="T:Leadtools.Topics.UnlockingSpecialLEADFeatures">Unlocking Special LEAD Features</seealso>
    </member>
    <member name="P:Leadtools.Forms.DocumentWriters.PdfDocumentOptions.OwnerPassword">
      <summary>Gets or sets the owner password value to be used in the resulting PDF document. <a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="WinRTicon.png" class="WinRTIconTag" name="WinRTIconTag" title="WinRT support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="winrtphone.png" class="WinRTPhoneIconTag" name="WinRTPhoneIconTag" title="WinRT Phone support" border="0" /></a></summary>
      <value>A <see cref="T:System.String" /> that contains the user password value to be used. To reset the owner password, use either an empty string or
            <strong>null</strong>. Default value is <strong>null</strong>.</value>
      <remarks>
        <para>The owner password is used by PDF viewers to grant or deny editing the PDF document. For more information, refer to
            the <see cref="P:Leadtools.Forms.DocumentWriters.PdfDocumentOptions.Protected" /> property.</para>
        <para>The <see cref="P:Leadtools.Forms.DocumentWriters.PdfDocumentOptions.OwnerPassword" /> property is only used when the <see cref="P:Leadtools.Forms.DocumentWriters.PdfDocumentOptions.Protected" /> property is set to <strong>true</strong>.</para>
        <para>Note that <see cref="P:Leadtools.Forms.DocumentWriters.PdfDocumentOptions.OwnerPassword" /> is not supported when <see cref="P:Leadtools.Forms.DocumentWriters.PdfDocumentOptions.DocumentType" /> is
            <see cref="T:Leadtools.Forms.DocumentWriters.PdfDocumentType">PdfDocumentType.PdfA</see>.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.DocumentWriters.PdfDocumentOptions" />.</example>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.DocumentWriters.DocumentWriter" />
      <seealso cref="T:FT.Topics.ProgrammingWithDocumentWriters">Programming with LEADTOOLS Document Writers</seealso>
      <seealso cref="T:Leadtools.Topics.FilesToBeIncludedWithYourApplication">Files to be Included with Your Application</seealso>
      <seealso cref="T:Leadtools.Topics.UnlockingSpecialLEADFeatures">Unlocking Special LEAD Features</seealso>
    </member>
    <member name="P:Leadtools.Forms.DocumentWriters.PdfDocumentOptions.EncryptionMode">
      <summary>Gets or sets a value that indicates which encryption mode to use when creating the PDF document. <a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="WinRTicon.png" class="WinRTIconTag" name="WinRTIconTag" title="WinRT support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="winrtphone.png" class="WinRTPhoneIconTag" name="WinRTPhoneIconTag" title="WinRT Phone support" border="0" /></a></summary>
      <value>A <see cref="T:Leadtools.Forms.DocumentWriters.PdfDocumentEncryptionMode" /> enumeration member that specifies which encryption mode to use when creating the PDF document.
            Default value is <see cref="T:Leadtools.Forms.DocumentWriters.PdfDocumentEncryptionMode">PdfDocumentEncryptionMode.RC128Bit</see>.</value>
      <remarks>
        <para>The PDF encryption mode, along with owner passwords and the different owner access right properties, allow the security level of the resulting PDF document 
            to be customized.
            For more information, refer to
            <see cref="P:Leadtools.Forms.DocumentWriters.PdfDocumentOptions.Protected" />.</para>
        <para>The <see cref="P:Leadtools.Forms.DocumentWriters.PdfDocumentOptions.EncryptionMode" /> property is only used when the <see cref="P:Leadtools.Forms.DocumentWriters.PdfDocumentOptions.Protected" /> property is set to <strong>true</strong>.</para>
        <para>Note that <see cref="P:Leadtools.Forms.DocumentWriters.PdfDocumentOptions.EncryptionMode" /> is not supported when <see cref="P:Leadtools.Forms.DocumentWriters.PdfDocumentOptions.DocumentType" /> is
            <see cref="T:Leadtools.Forms.DocumentWriters.PdfDocumentType">PdfDocumentType.PdfA</see>.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.DocumentWriters.PdfDocumentOptions" />.</example>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.DocumentWriters.DocumentWriter" />
      <seealso cref="T:FT.Topics.ProgrammingWithDocumentWriters">Programming with LEADTOOLS Document Writers</seealso>
      <seealso cref="T:Leadtools.Topics.FilesToBeIncludedWithYourApplication">Files to be Included with Your Application</seealso>
      <seealso cref="T:Leadtools.Topics.UnlockingSpecialLEADFeatures">Unlocking Special LEAD Features</seealso>
    </member>
    <member name="P:Leadtools.Forms.DocumentWriters.PdfDocumentOptions.PrintEnabled">
      <summary>Gets or sets a value that indicated whether the resulting PDF document has access rights to allow printing. <a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="WinRTicon.png" class="WinRTIconTag" name="WinRTIconTag" title="WinRT support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="winrtphone.png" class="WinRTPhoneIconTag" name="WinRTPhoneIconTag" title="WinRT Phone support" border="0" /></a></summary>
      <value>
        <strong>true</strong> to allow external viewers and editors to print the resulting PDF document, otherwise; <strong>false</strong>. Default value is <strong>true</strong>.</value>
      <remarks>
        <para>This is one of the owner access rights that can be granted or denied in the created PDF document. For more information,
            refer to the <see cref="P:Leadtools.Forms.DocumentWriters.PdfDocumentOptions.Protected" /> property.</para>
        <para>
          <see cref="P:Leadtools.Forms.DocumentWriters.PdfDocumentOptions.PrintEnabled" /> is only used if the value of <see cref="P:Leadtools.Forms.DocumentWriters.PdfDocumentOptions.Protected" /> is set to <strong>true</strong>.</para>
        <para>Note that <see cref="P:Leadtools.Forms.DocumentWriters.PdfDocumentOptions.PrintEnabled" /> is not supported when <see cref="P:Leadtools.Forms.DocumentWriters.PdfDocumentOptions.DocumentType" /> is
            <see cref="T:Leadtools.Forms.DocumentWriters.PdfDocumentType">PdfDocumentType.PdfA</see>.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.DocumentWriters.PdfDocumentOptions" />.</example>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.DocumentWriters.DocumentWriter" />
      <seealso cref="T:FT.Topics.ProgrammingWithDocumentWriters">Programming with LEADTOOLS Document Writers</seealso>
      <seealso cref="T:Leadtools.Topics.FilesToBeIncludedWithYourApplication">Files to be Included with Your Application</seealso>
      <seealso cref="T:Leadtools.Topics.UnlockingSpecialLEADFeatures">Unlocking Special LEAD Features</seealso>
    </member>
    <member name="P:Leadtools.Forms.DocumentWriters.PdfDocumentOptions.HighQualityPrintEnabled">
      <summary>Gets or sets a value that indicates whether the resulting PDF document can be printed in high quality. <a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="WinRTicon.png" class="WinRTIconTag" name="WinRTIconTag" title="WinRT support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="winrtphone.png" class="WinRTPhoneIconTag" name="WinRTPhoneIconTag" title="WinRT Phone support" border="0" /></a></summary>
      <value>
        <strong>true</strong> to allow allow external viewers and editors to print the resulting PDF document in
            high quality, otherwise; <strong>false</strong>. Default value is <strong>true</strong>.</value>
      <remarks>
        <para>This is one of the owner access rights that can be granted or denied in the created PDF document. For more information,
            refer to the <see cref="P:Leadtools.Forms.DocumentWriters.PdfDocumentOptions.Protected" />.</para>
        <para>
          <see cref="P:Leadtools.Forms.DocumentWriters.PdfDocumentOptions.HighQualityPrintEnabled" /> is only used if the value of <see cref="P:Leadtools.Forms.DocumentWriters.PdfDocumentOptions.Protected" /> is <strong>true</strong> and
            <see cref="P:Leadtools.Forms.DocumentWriters.PdfDocumentOptions.EncryptionMode" /> is <see cref="T:Leadtools.Forms.DocumentWriters.PdfDocumentEncryptionMode">PdfDocumentEncryptionMode.RC128Bit</see>.and <see cref="P:Leadtools.Forms.DocumentWriters.PdfDocumentOptions.PrintEnabled" /> is <strong>true</strong></para>
        <para>Note that <see cref="P:Leadtools.Forms.DocumentWriters.PdfDocumentOptions.HighQualityPrintEnabled" /> is not supported when <see cref="P:Leadtools.Forms.DocumentWriters.PdfDocumentOptions.DocumentType" /> is
            <see cref="T:Leadtools.Forms.DocumentWriters.PdfDocumentType">PdfDocumentType.PdfA</see>.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.DocumentWriters.PdfDocumentOptions" />.</example>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.DocumentWriters.DocumentWriter" />
      <seealso cref="T:FT.Topics.ProgrammingWithDocumentWriters">Programming with LEADTOOLS Document Writers</seealso>
      <seealso cref="T:Leadtools.Topics.FilesToBeIncludedWithYourApplication">Files to be Included with Your Application</seealso>
      <seealso cref="T:Leadtools.Topics.UnlockingSpecialLEADFeatures">Unlocking Special LEAD Features</seealso>
    </member>
    <member name="P:Leadtools.Forms.DocumentWriters.PdfDocumentOptions.CopyEnabled">
      <summary>Gets or sets a value that indicates whether the resulting PDF document has access rights to copy text. <a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="WinRTicon.png" class="WinRTIconTag" name="WinRTIconTag" title="WinRT support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="winrtphone.png" class="WinRTPhoneIconTag" name="WinRTPhoneIconTag" title="WinRT Phone support" border="0" /></a></summary>
      <value>
        <strong>true</strong> to allow external viewers and editors to copy text from the resulting PDF document, otherwise; <strong>false</strong>. Default value is <strong>true</strong>.</value>
      <remarks>
        <para>This is one of the owner access rights that can be granted or denied in the created PDF document. For more information,
             refer to the <see cref="P:Leadtools.Forms.DocumentWriters.PdfDocumentOptions.Protected" />.</para>
        <para>
          <see cref="P:Leadtools.Forms.DocumentWriters.PdfDocumentOptions.CopyEnabled" /> is only used if the value of <see cref="P:Leadtools.Forms.DocumentWriters.PdfDocumentOptions.Protected" /> is set to <strong>true</strong>.</para>
        <para>Note that <see cref="P:Leadtools.Forms.DocumentWriters.PdfDocumentOptions.CopyEnabled" /> is not supported when <see cref="P:Leadtools.Forms.DocumentWriters.PdfDocumentOptions.DocumentType" /> is
             <see cref="T:Leadtools.Forms.DocumentWriters.PdfDocumentType">PdfDocumentType.PdfA</see>.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.DocumentWriters.PdfDocumentOptions" />.</example>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.DocumentWriters.DocumentWriter" />
      <seealso cref="T:FT.Topics.ProgrammingWithDocumentWriters">Programming with LEADTOOLS Document Writers</seealso>
      <seealso cref="T:Leadtools.Topics.FilesToBeIncludedWithYourApplication">Files to be Included with Your Application</seealso>
      <seealso cref="T:Leadtools.Topics.UnlockingSpecialLEADFeatures">Unlocking Special LEAD Features</seealso>
    </member>
    <member name="P:Leadtools.Forms.DocumentWriters.PdfDocumentOptions.EditEnabled">
      <summary>Gets or sets a value that indicates whether the resulting PDF document can be edited. <a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="WinRTicon.png" class="WinRTIconTag" name="WinRTIconTag" title="WinRT support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="winrtphone.png" class="WinRTPhoneIconTag" name="WinRTPhoneIconTag" title="WinRT Phone support" border="0" /></a></summary>
      <value>
        <strong>true</strong> to allow external viewers and editors to edit the resulting PDF document, otherwise; <strong>false</strong>. Default value is <strong>true</strong>.</value>
      <remarks>
        <para>This is one of the owner access rights that can be granted or denied in the created PDF document. For more information,
             refer to the <see cref="P:Leadtools.Forms.DocumentWriters.PdfDocumentOptions.Protected" /> property.</para>
        <para>
          <see cref="P:Leadtools.Forms.DocumentWriters.PdfDocumentOptions.EditEnabled" /> is only used if the value of <see cref="P:Leadtools.Forms.DocumentWriters.PdfDocumentOptions.Protected" /> is set to <strong>true</strong>.</para>
        <para>Note that <see cref="P:Leadtools.Forms.DocumentWriters.PdfDocumentOptions.EditEnabled" /> is not supported when <see cref="P:Leadtools.Forms.DocumentWriters.PdfDocumentOptions.DocumentType" /> is
             <see cref="T:Leadtools.Forms.DocumentWriters.PdfDocumentType">PdfDocumentType.PdfA</see>.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.DocumentWriters.PdfDocumentOptions" />.</example>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.DocumentWriters.DocumentWriter" />
      <seealso cref="T:FT.Topics.ProgrammingWithDocumentWriters">Programming with LEADTOOLS Document Writers</seealso>
      <seealso cref="T:Leadtools.Topics.FilesToBeIncludedWithYourApplication">Files to be Included with Your Application</seealso>
      <seealso cref="T:Leadtools.Topics.UnlockingSpecialLEADFeatures">Unlocking Special LEAD Features</seealso>
    </member>
    <member name="P:Leadtools.Forms.DocumentWriters.PdfDocumentOptions.AnnotationsEnabled">
      <summary>Gets or sets a value that indicates whether annotations and comments can be added to the resulting PDF document. <a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="WinRTicon.png" class="WinRTIconTag" name="WinRTIconTag" title="WinRT support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="winrtphone.png" class="WinRTPhoneIconTag" name="WinRTPhoneIconTag" title="WinRT Phone support" border="0" /></a></summary>
      <value>
        <strong>true</strong> to allow external viewers and editors to add annotations and comments to the resulting PDF document, otherwise; <strong>false</strong>. Default value is <strong>true</strong>.</value>
      <remarks>
        <para>This is one of the owner access rights that can be granted or denied in the created PDF document. For more information,
             refer to the <see cref="P:Leadtools.Forms.DocumentWriters.PdfDocumentOptions.Protected" />.</para>
        <para>
          <see cref="P:Leadtools.Forms.DocumentWriters.PdfDocumentOptions.EditEnabled" /> is only used if the value of <see cref="P:Leadtools.Forms.DocumentWriters.PdfDocumentOptions.Protected" /> is set to <strong>true</strong>.</para>
        <para>Note that <see cref="P:Leadtools.Forms.DocumentWriters.PdfDocumentOptions.AnnotationsEnabled" /> is not supported when <see cref="P:Leadtools.Forms.DocumentWriters.PdfDocumentOptions.DocumentType" /> is
             <see cref="T:Leadtools.Forms.DocumentWriters.PdfDocumentType">PdfDocumentType.PdfA</see>.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.DocumentWriters.PdfDocumentOptions" />.</example>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.DocumentWriters.DocumentWriter" />
      <seealso cref="T:FT.Topics.ProgrammingWithDocumentWriters">Programming with LEADTOOLS Document Writers</seealso>
      <seealso cref="T:Leadtools.Topics.FilesToBeIncludedWithYourApplication">Files to be Included with Your Application</seealso>
      <seealso cref="T:Leadtools.Topics.UnlockingSpecialLEADFeatures">Unlocking Special LEAD Features</seealso>
    </member>
    <member name="P:Leadtools.Forms.DocumentWriters.PdfDocumentOptions.AssemblyEnabled">
      <summary>Gets or sets a value that indicates whether pages can be added or removed from the resulting PDF document. <a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="WinRTicon.png" class="WinRTIconTag" name="WinRTIconTag" title="WinRT support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="winrtphone.png" class="WinRTPhoneIconTag" name="WinRTPhoneIconTag" title="WinRT Phone support" border="0" /></a></summary>
      <value>
        <strong>true</strong> to allow external viewers and editors to add or remove pages from the resulting PDF document, otherwise; <strong>false</strong>. Default value is <strong>true</strong>.</value>
      <remarks>
        <para>This is one of the owner access rights that can be granted or denied in the created PDF document. For more information,
            refer to the <see cref="P:Leadtools.Forms.DocumentWriters.PdfDocumentOptions.Protected" />.</para>
        <para>
          <see cref="P:Leadtools.Forms.DocumentWriters.PdfDocumentOptions.HighQualityPrintEnabled" /> is only used if the value of <see cref="P:Leadtools.Forms.DocumentWriters.PdfDocumentOptions.Protected" /> is <strong>true</strong> and
            <see cref="P:Leadtools.Forms.DocumentWriters.PdfDocumentOptions.EncryptionMode" /> is <see cref="T:Leadtools.Forms.DocumentWriters.PdfDocumentEncryptionMode">PdfDocumentEncryptionMode.RC128Bit</see>.</para>
        <para>Note that <see cref="P:Leadtools.Forms.DocumentWriters.PdfDocumentOptions.AssemblyEnabled" /> is not supported when <see cref="P:Leadtools.Forms.DocumentWriters.PdfDocumentOptions.DocumentType" /> is
            <see cref="T:Leadtools.Forms.DocumentWriters.PdfDocumentType">PdfDocumentType.PdfA</see>.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.DocumentWriters.PdfDocumentOptions" />.</example>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.DocumentWriters.DocumentWriter" />
      <seealso cref="T:FT.Topics.ProgrammingWithDocumentWriters">Programming with LEADTOOLS Document Writers</seealso>
      <seealso cref="T:Leadtools.Topics.FilesToBeIncludedWithYourApplication">Files to be Included with Your Application</seealso>
      <seealso cref="T:Leadtools.Topics.UnlockingSpecialLEADFeatures">Unlocking Special LEAD Features</seealso>
    </member>
    <member name="P:Leadtools.Forms.DocumentWriters.PdfDocumentOptions.OneBitImageCompression">
      <summary>Gets or sets the one bit compression type used to compress one bit per pixel images when creating a PDF document. <a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="WinRTicon.png" class="WinRTIconTag" name="WinRTIconTag" title="WinRT support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="winrtphone.png" class="WinRTPhoneIconTag" name="WinRTPhoneIconTag" title="WinRT Phone support" border="0" /></a></summary>
      <value>One of the <see cref="T:Leadtools.Forms.DocumentWriters.OneBitImageCompressionType" /> enumeration members that indicate which one bit compression type to use 
            for compressing one bit per pixel images when creating a PDF document.
            The default value is <see cref="T:Leadtools.Forms.DocumentWriters.OneBitImageCompressionType">OneBitImageCompressionType.Jbig2</see>.</value>
      <remarks>
        <para>For more information, refer to <see cref="T:Leadtools.Forms.DocumentWriters.OneBitImageCompressionType" /> enumeration.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.DocumentWriters.PdfDocumentOptions" />.</example>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.DocumentWriters.DocumentWriter" />
      <seealso cref="T:FT.Topics.ProgrammingWithDocumentWriters">Programming with LEADTOOLS Document Writers</seealso>
      <seealso cref="T:Leadtools.Topics.FilesToBeIncludedWithYourApplication">Files to be Included with Your Application</seealso>
      <seealso cref="T:Leadtools.Topics.UnlockingSpecialLEADFeatures">Unlocking Special LEAD Features</seealso>
    </member>
    <member name="P:Leadtools.Forms.DocumentWriters.PdfDocumentOptions.ColoredImageCompression">
      <summary>Gets or sets which type of compression to use on colored images when creating a PDF document. <a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="WinRTicon.png" class="WinRTIconTag" name="WinRTIconTag" title="WinRT support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="winrtphone.png" class="WinRTPhoneIconTag" name="WinRTPhoneIconTag" title="WinRT Phone support" border="0" /></a></summary>
      <value>One of the <see cref="T:Leadtools.Forms.DocumentWriters.ColoredImageCompressionType" /> enumeration members that indicate which type of compression to use on 
            colored images when creating a PDF document.
            The default value is <see cref="T:Leadtools.Forms.DocumentWriters.ColoredImageCompressionType">ColoredImageCompressionType.FlateJpeg</see>.</value>
      <remarks>
        <para>For more information, refer to <see cref="T:Leadtools.Forms.DocumentWriters.ColoredImageCompressionType" /> enumeration.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.DocumentWriters.PdfDocumentOptions" />.</example>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.DocumentWriters.DocumentWriter" />
      <seealso cref="T:FT.Topics.ProgrammingWithDocumentWriters">Programming with LEADTOOLS Document Writers</seealso>
      <seealso cref="T:Leadtools.Topics.FilesToBeIncludedWithYourApplication">Files to be Included with Your Application</seealso>
      <seealso cref="T:Leadtools.Topics.UnlockingSpecialLEADFeatures">Unlocking Special LEAD Features</seealso>
    </member>
    <member name="P:Leadtools.Forms.DocumentWriters.PdfDocumentOptions.QualityFactor">
      <summary>Gets or sets a value that determines the degree of loss in the compression process.<br />
            This applies to JPEG compression only. <a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="WinRTicon.png" class="WinRTIconTag" name="WinRTIconTag" title="WinRT support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="winrtphone.png" class="WinRTPhoneIconTag" name="WinRTPhoneIconTag" title="WinRT Phone support" border="0" /></a></summary>
      <value>A <see cref="P:Leadtools.Forms.DocumentWriters.PdfDocumentOptions.QualityFactor" /> determines the degree of loss in the compression process. The default value is 80.</value>
      <remarks>
        <para>QualityFactor is a number that determines the degree of loss in the compression process.</para>
        <para>This applies to JPEG compression only.</para>
        <list type="bullet">
          <item>
            <description>
              <para>0 - Lossless</para>
            </description>
          </item>
          <item>
            <description>
              <para>2 - 255 Lossy (2 - Best Quality, 255 - Best Compression)</para>
            </description>
          </item>
        </list>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.DocumentWriters.PdfDocumentOptions" />.</example>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.DocumentWriters.DocumentWriter" />
      <seealso cref="T:FT.Topics.ProgrammingWithDocumentWriters">Programming with LEADTOOLS Document Writers</seealso>
      <seealso cref="T:Leadtools.Topics.FilesToBeIncludedWithYourApplication">Files to be Included with Your Application</seealso>
      <seealso cref="T:Leadtools.Topics.UnlockingSpecialLEADFeatures">Unlocking Special LEAD Features</seealso>
    </member>
    <member name="P:Leadtools.Forms.DocumentWriters.PdfDocumentOptions.AutoBookmarksEnabled">
      <summary>Gets or sets a value that indicates whether to use automatic bookmarking in the final PDF document <a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="WinRTicon.png" class="WinRTIconTag" name="WinRTIconTag" title="WinRT support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="winrtphone.png" class="WinRTPhoneIconTag" name="WinRTPhoneIconTag" title="WinRT Phone support" border="0" /></a></summary>
      <value>
        <strong>true</strong> to allow bookmarks to be created using automatic bookmarking, otherwise; <strong>false</strong>. Default value is <strong>true</strong>.</value>
      <remarks>
        <para>For more information, refer to the <see cref="T:Leadtools.Forms.DocumentWriters.PdfAutoBookmark" />.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.DocumentWriters.PdfDocumentOptions" />.</example>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.DocumentWriters.DocumentWriter" />
      <seealso cref="T:FT.Topics.ProgrammingWithDocumentWriters">Programming with LEADTOOLS Document Writers</seealso>
      <seealso cref="T:Leadtools.Topics.FilesToBeIncludedWithYourApplication">Files to be Included with Your Application</seealso>
      <seealso cref="T:Leadtools.Topics.UnlockingSpecialLEADFeatures">Unlocking Special LEAD Features</seealso>
    </member>
    <member name="P:Leadtools.Forms.DocumentWriters.PdfDocumentOptions.TotalBookmarkLevels">
      <summary>Gets or sets a value that determines the total number of bookmark levels for created PDF documents. <a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="WinRTicon.png" class="WinRTIconTag" name="WinRTIconTag" title="WinRT support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="winrtphone.png" class="WinRTPhoneIconTag" name="WinRTPhoneIconTag" title="WinRT Phone support" border="0" /></a></summary>
      <value>A <see cref="P:Leadtools.Forms.DocumentWriters.PdfDocumentOptions.TotalBookmarkLevels" /> determines the total number of bookmark levels for created PDF documents.</value>
      <remarks>
        <para>
          <see cref="P:Leadtools.Forms.DocumentWriters.PdfDocumentOptions.TotalBookmarkLevels" /> represents the total numbers of bookmark levels for the PDF document being saved. The maximum number of levels is ten.
            </para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.DocumentWriters.PdfDocumentOptions" />.</example>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.DocumentWriters.DocumentWriter" />
      <seealso cref="T:FT.Topics.ProgrammingWithDocumentWriters">Programming with LEADTOOLS Document Writers</seealso>
      <seealso cref="T:Leadtools.Topics.FilesToBeIncludedWithYourApplication">Files to be Included with Your Application</seealso>
      <seealso cref="T:Leadtools.Topics.UnlockingSpecialLEADFeatures">Unlocking Special LEAD Features</seealso>
    </member>
    <member name="P:Leadtools.Forms.DocumentWriters.PdfDocumentOptions.AutoBookmarks">
      <summary>List of the current auto bookmarks options. <a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="WinRTicon.png" class="WinRTIconTag" name="WinRTIconTag" title="WinRT support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="winrtphone.png" class="WinRTPhoneIconTag" name="WinRTPhoneIconTag" title="WinRT Phone support" border="0" /></a></summary>
      <value>A list of <see cref="T:Leadtools.Forms.DocumentWriters.PdfAutoBookmark" /> that represent the auto-bookmarking settings used when creating PDF documents.</value>
      <remarks>
        <para>
            For more information, refer to <see cref="T:Leadtools.Forms.DocumentWriters.PdfAutoBookmark" />.
            </para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.DocumentWriters.PdfDocumentOptions" />.</example>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.DocumentWriters.DocumentWriter" />
      <seealso cref="T:FT.Topics.ProgrammingWithDocumentWriters">Programming with LEADTOOLS Document Writers</seealso>
      <seealso cref="T:Leadtools.Topics.FilesToBeIncludedWithYourApplication">Files to be Included with Your Application</seealso>
      <seealso cref="T:Leadtools.Topics.UnlockingSpecialLEADFeatures">Unlocking Special LEAD Features</seealso>
    </member>
    <member name="P:Leadtools.Forms.DocumentWriters.PdfDocumentOptions.CustomBookmarks">
      <summary>List of the custom (user) bookmarks to use when creating PDF documents. <a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="WinRTicon.png" class="WinRTIconTag" name="WinRTIconTag" title="WinRT support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="winrtphone.png" class="WinRTPhoneIconTag" name="WinRTPhoneIconTag" title="WinRT Phone support" border="0" /></a></summary>
      <value>A list of <see cref="T:Leadtools.Forms.DocumentWriters.PdfCustomBookmark" /> that represent the custom (user) bookmarks to add to the final PDF document.</value>
      <remarks>
        <para>
            For more information, refer to <see cref="T:Leadtools.Forms.DocumentWriters.PdfCustomBookmark" /></para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.DocumentWriters.PdfDocumentOptions" />.</example>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.DocumentWriters.DocumentWriter" />
      <seealso cref="T:FT.Topics.ProgrammingWithDocumentWriters">Programming with LEADTOOLS Document Writers</seealso>
      <seealso cref="T:Leadtools.Topics.FilesToBeIncludedWithYourApplication">Files to be Included with Your Application</seealso>
      <seealso cref="T:Leadtools.Topics.UnlockingSpecialLEADFeatures">Unlocking Special LEAD Features</seealso>
    </member>
    <member name="P:Leadtools.Forms.DocumentWriters.PdfDocumentOptions.PageModeType">
      <summary>Gets or sets the initial view page mode type when creating a PDF document. <a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
      <value>One of the <see cref="T:Leadtools.Forms.DocumentWriters.PdfDocumentPageModeType" /> enumeration members that indicate the initial view page mode type to use to use when creating
            a PDF document. The default value is <see cref="T:Leadtools.Forms.DocumentWriters.PdfDocumentPageModeType">PdfDocumentPageModeType.PageOnly</see>.</value>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Forms.DocumentWriters.PdfDocumentOptions" />.</example>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.DocumentWriters.DocumentWriter" />
      <seealso cref="T:FT.Topics.ProgrammingWithDocumentWriters">Programming with LEADTOOLS Document Writers</seealso>
      <seealso cref="T:Leadtools.Topics.FilesToBeIncludedWithYourApplication">Files to be Included with Your Application</seealso>
      <seealso cref="T:Leadtools.Topics.UnlockingSpecialLEADFeatures">Unlocking Special LEAD Features</seealso>
    </member>
    <member name="P:Leadtools.Forms.DocumentWriters.PdfDocumentOptions.PageLayoutType">
      <summary>Gets or sets which the initial view page layout type when creating a PDF document. <a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
      <value>One of the <see cref="T:Leadtools.Forms.DocumentWriters.PdfDocumentPageLayoutType" /> enumeration members that indicate the initial view layout of page mode to use when creating a PDF document.
            The default value is <see cref="T:Leadtools.Forms.DocumentWriters.PdfDocumentPageLayoutType">PdfDocumentPageLayoutType.SinglePageDisplay</see>.</value>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Forms.DocumentWriters.PdfDocumentOptions" />.</example>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.DocumentWriters.DocumentWriter" />
      <seealso cref="T:FT.Topics.ProgrammingWithDocumentWriters">Programming with LEADTOOLS Document Writers</seealso>
      <seealso cref="T:Leadtools.Topics.FilesToBeIncludedWithYourApplication">Files to be Included with Your Application</seealso>
      <seealso cref="T:Leadtools.Topics.UnlockingSpecialLEADFeatures">Unlocking Special LEAD Features</seealso>
    </member>
    <member name="P:Leadtools.Forms.DocumentWriters.PdfDocumentOptions.PageFitType">
      <summary>Gets or sets the initial view page fit type when creating a PDF document. <a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
      <value>One of the <see cref="T:Leadtools.Forms.DocumentWriters.PdfDocumentPageFitType" /> enumeration members that indicate the initial view page fit type mode to use when creating a PDF document.
            The default value is <see cref="T:Leadtools.Forms.DocumentWriters.PdfDocumentPageFitType">PdfDocumentPageFitType.Default</see>.</value>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Forms.DocumentWriters.PdfDocumentOptions" />.</example>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.DocumentWriters.DocumentWriter" />
      <seealso cref="T:FT.Topics.ProgrammingWithDocumentWriters">Programming with LEADTOOLS Document Writers</seealso>
      <seealso cref="T:Leadtools.Topics.FilesToBeIncludedWithYourApplication">Files to be Included with Your Application</seealso>
      <seealso cref="T:Leadtools.Topics.UnlockingSpecialLEADFeatures">Unlocking Special LEAD Features</seealso>
    </member>
    <member name="P:Leadtools.Forms.DocumentWriters.PdfDocumentOptions.InitialPageNumber">
      <summary>Gets or sets the initial view page number to use when creating a PDF document. <a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
      <value>The initial view page number to use when creating a PDF document. Default value is 0 (go to the first page).</value>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Forms.DocumentWriters.PdfDocumentOptions" />.</example>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.DocumentWriters.DocumentWriter" />
      <seealso cref="T:FT.Topics.ProgrammingWithDocumentWriters">Programming with LEADTOOLS Document Writers</seealso>
      <seealso cref="T:Leadtools.Topics.FilesToBeIncludedWithYourApplication">Files to be Included with Your Application</seealso>
      <seealso cref="T:Leadtools.Topics.UnlockingSpecialLEADFeatures">Unlocking Special LEAD Features</seealso>
    </member>
    <member name="P:Leadtools.Forms.DocumentWriters.PdfDocumentOptions.XCoordinate">
      <summary>Gets or sets the initial view X coordinate position of the page to use when creating a PDF document. <a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
      <value>The initial view X coordinate position of the page to use when creating a PDF document. Default value is 0 (left of the page).</value>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Forms.DocumentWriters.PdfDocumentOptions" />.</example>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.DocumentWriters.DocumentWriter" />
      <seealso cref="T:FT.Topics.ProgrammingWithDocumentWriters">Programming with LEADTOOLS Document Writers</seealso>
      <seealso cref="T:Leadtools.Topics.FilesToBeIncludedWithYourApplication">Files to be Included with Your Application</seealso>
      <seealso cref="T:Leadtools.Topics.UnlockingSpecialLEADFeatures">Unlocking Special LEAD Features</seealso>
    </member>
    <member name="P:Leadtools.Forms.DocumentWriters.PdfDocumentOptions.YCoordinate">
      <summary>Gets or sets the initial view Y coordinate position of the page to use when creating a PDF document. <a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
      <value>The initial view Y coordinate position of the page to use when creating a PDF document. Default value is 0 (top of the page).</value>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Forms.DocumentWriters.PdfDocumentOptions" />.</example>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.DocumentWriters.DocumentWriter" />
      <seealso cref="T:FT.Topics.ProgrammingWithDocumentWriters">Programming with LEADTOOLS Document Writers</seealso>
      <seealso cref="T:Leadtools.Topics.FilesToBeIncludedWithYourApplication">Files to be Included with Your Application</seealso>
      <seealso cref="T:Leadtools.Topics.UnlockingSpecialLEADFeatures">Unlocking Special LEAD Features</seealso>
    </member>
    <member name="P:Leadtools.Forms.DocumentWriters.PdfDocumentOptions.ZoomPercent">
      <summary>Gets or sets the initial view zoom percentage to use when creating a PDF document. <a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
      <value>The initial view zoom percentage to use when creating a PDF document. Default value is 0 (actual size).</value>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Forms.DocumentWriters.PdfDocumentOptions" />.</example>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.DocumentWriters.DocumentWriter" />
      <seealso cref="T:FT.Topics.ProgrammingWithDocumentWriters">Programming with LEADTOOLS Document Writers</seealso>
      <seealso cref="T:Leadtools.Topics.FilesToBeIncludedWithYourApplication">Files to be Included with Your Application</seealso>
      <seealso cref="T:Leadtools.Topics.UnlockingSpecialLEADFeatures">Unlocking Special LEAD Features</seealso>
    </member>
    <member name="P:Leadtools.Forms.DocumentWriters.PdfDocumentOptions.HideToolbar">
      <summary>Gets or sets a value that indicates whether the initial view should hide the toolbar <a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
      <value>
        <strong>true</strong> if the initial view should hide the toolbar, otherwise; <strong>false</strong>. Default value is <strong>false</strong>.</value>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Forms.DocumentWriters.PdfDocumentOptions" />.</example>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.DocumentWriters.DocumentWriter" />
      <seealso cref="T:FT.Topics.ProgrammingWithDocumentWriters">Programming with LEADTOOLS Document Writers</seealso>
      <seealso cref="T:Leadtools.Topics.FilesToBeIncludedWithYourApplication">Files to be Included with Your Application</seealso>
      <seealso cref="T:Leadtools.Topics.UnlockingSpecialLEADFeatures">Unlocking Special LEAD Features</seealso>
    </member>
    <member name="P:Leadtools.Forms.DocumentWriters.PdfDocumentOptions.HideMenubar">
      <summary>Gets or sets a value that indicates whether the initial view should hide the menu bar <a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
      <value>
        <strong>true</strong> if the initial view should hide the menu bar, otherwise; <strong>false</strong>. Default value is <strong>false</strong>.</value>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Forms.DocumentWriters.PdfDocumentOptions" />.</example>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.DocumentWriters.DocumentWriter" />
      <seealso cref="T:FT.Topics.ProgrammingWithDocumentWriters">Programming with LEADTOOLS Document Writers</seealso>
      <seealso cref="T:Leadtools.Topics.FilesToBeIncludedWithYourApplication">Files to be Included with Your Application</seealso>
      <seealso cref="T:Leadtools.Topics.UnlockingSpecialLEADFeatures">Unlocking Special LEAD Features</seealso>
    </member>
    <member name="P:Leadtools.Forms.DocumentWriters.PdfDocumentOptions.HideWindowUI">
      <summary>Gets or sets a value that indicates whether the initial view should hide the window user interface elements <a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
      <value>
        <strong>true</strong> if the initial view should hide the window user interface elements, otherwise; <strong>false</strong>. Default value is <strong>false</strong>.</value>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Forms.DocumentWriters.PdfDocumentOptions" />.</example>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.DocumentWriters.DocumentWriter" />
      <seealso cref="T:FT.Topics.ProgrammingWithDocumentWriters">Programming with LEADTOOLS Document Writers</seealso>
      <seealso cref="T:Leadtools.Topics.FilesToBeIncludedWithYourApplication">Files to be Included with Your Application</seealso>
      <seealso cref="T:Leadtools.Topics.UnlockingSpecialLEADFeatures">Unlocking Special LEAD Features</seealso>
    </member>
    <member name="P:Leadtools.Forms.DocumentWriters.PdfDocumentOptions.FitWindow">
      <summary>Gets or sets a value that the initial view should fit the document in the window <a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
      <value>
        <strong>true</strong> if initial view should fit the document in the window, otherwise; <strong>false</strong>. Default value is <strong>false</strong>.</value>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Forms.DocumentWriters.PdfDocumentOptions" />.</example>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.DocumentWriters.DocumentWriter" />
      <seealso cref="T:FT.Topics.ProgrammingWithDocumentWriters">Programming with LEADTOOLS Document Writers</seealso>
      <seealso cref="T:Leadtools.Topics.FilesToBeIncludedWithYourApplication">Files to be Included with Your Application</seealso>
      <seealso cref="T:Leadtools.Topics.UnlockingSpecialLEADFeatures">Unlocking Special LEAD Features</seealso>
    </member>
    <member name="P:Leadtools.Forms.DocumentWriters.PdfDocumentOptions.CenterWindow">
      <summary>Gets or sets a value that initial view should center the document in the window <a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
      <value>
        <strong>true</strong> if initial view should center the document in the window, otherwise; <strong>false</strong>. Default value is <strong>false</strong>.</value>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Forms.DocumentWriters.PdfDocumentOptions" />.</example>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.DocumentWriters.DocumentWriter" />
      <seealso cref="T:FT.Topics.ProgrammingWithDocumentWriters">Programming with LEADTOOLS Document Writers</seealso>
      <seealso cref="T:Leadtools.Topics.FilesToBeIncludedWithYourApplication">Files to be Included with Your Application</seealso>
      <seealso cref="T:Leadtools.Topics.UnlockingSpecialLEADFeatures">Unlocking Special LEAD Features</seealso>
    </member>
    <member name="P:Leadtools.Forms.DocumentWriters.PdfDocumentOptions.DisplayDocTitle">
      <summary>Gets or sets a value that initial view should display the document title. <a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
      <value>
        <strong>true</strong> if the initial view should display the document title, otherwise; <strong>false</strong>. Default value is <strong>false</strong>.</value>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Forms.DocumentWriters.PdfDocumentOptions" />.</example>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.DocumentWriters.DocumentWriter" />
      <seealso cref="T:FT.Topics.ProgrammingWithDocumentWriters">Programming with LEADTOOLS Document Writers</seealso>
      <seealso cref="T:Leadtools.Topics.FilesToBeIncludedWithYourApplication">Files to be Included with Your Application</seealso>
      <seealso cref="T:Leadtools.Topics.UnlockingSpecialLEADFeatures">Unlocking Special LEAD Features</seealso>
    </member>
    <member name="P:Leadtools.Forms.DocumentWriters.PdfDocumentOptions.Format_WinRT">
      <summary>
            This class implementation of <see cref="P:Leadtools.Forms.DocumentWriters.DocumentOptions.Format">DocumentOptions.Format</see>.
            </summary>
      <value>Refer to <see cref="P:Leadtools.Forms.DocumentWriters.DocumentOptions.Format">DocumentOptions.Format</see>.</value>
      <noremarks />
      <noexample />
      <winrt />
    </member>
    <member name="P:Leadtools.Forms.DocumentWriters.PdfDocumentOptions.PageRestriction_WinRT">
      <summary>
            This class implementation of <see cref="P:Leadtools.Forms.DocumentWriters.DocumentOptions.PageRestriction">DocumentOptions.PageRestriction</see>.
            </summary>
      <value>Refer to <see cref="P:Leadtools.Forms.DocumentWriters.DocumentOptions.PageRestriction">DocumentOptions.PageRestriction</see>.</value>
      <noremarks />
      <noexample />
      <winrt />
    </member>
    <member name="P:Leadtools.Forms.DocumentWriters.PdfDocumentOptions.EmptyPageWidth_WinRT">
      <summary>
            This class implementation of <see cref="P:Leadtools.Forms.DocumentWriters.DocumentOptions.EmptyPageWidth">DocumentOptions.EmptyPageWidth</see>.
            </summary>
      <value>Refer to <see cref="P:Leadtools.Forms.DocumentWriters.DocumentOptions.EmptyPageWidth">DocumentOptions.EmptyPageWidth</see>.</value>
      <noremarks />
      <noexample />
      <winrt />
    </member>
    <member name="P:Leadtools.Forms.DocumentWriters.PdfDocumentOptions.EmptyPageHeight_WinRT">
      <summary>
            This class implementation of <see cref="P:Leadtools.Forms.DocumentWriters.DocumentOptions.EmptyPageHeight">DocumentOptions.EmptyPageHeight</see>.
            </summary>
      <value>Refer to <see cref="P:Leadtools.Forms.DocumentWriters.DocumentOptions.EmptyPageHeight">DocumentOptions.EmptyPageHeight</see>.</value>
      <noremarks />
      <noexample />
      <winrt />
    </member>
    <member name="P:Leadtools.Forms.DocumentWriters.PdfDocumentOptions.EmptyPageResolution_WinRT">
      <summary>
            This class implementation of <see cref="P:Leadtools.Forms.DocumentWriters.DocumentOptions.EmptyPageResolution">DocumentOptions.EmptyPageResolution</see>.
            </summary>
      <value>Refer to <see cref="P:Leadtools.Forms.DocumentWriters.DocumentOptions.EmptyPageResolution">DocumentOptions.EmptyPageResolution</see>.</value>
      <noremarks />
      <noexample />
      <winrt />
    </member>
    <member name="P:Leadtools.Forms.DocumentWriters.PdfDocumentOptions.DocumentResolution_WinRT">
      <summary>This class implementation of <see cref="P:Leadtools.Forms.DocumentWriters.DocumentOptions.DocumentResolution">DocumentOptions.DocumentResolution</see>. <a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="WinRTicon.png" class="WinRTIconTag" name="WinRTIconTag" title="WinRT support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="winrtphone.png" class="WinRTPhoneIconTag" name="WinRTPhoneIconTag" title="WinRT Phone support" border="0" /></a></summary>
      <value>Refer to <see cref="P:Leadtools.Forms.DocumentWriters.DocumentOptions.DocumentResolution">DocumentOptions.DocumentResolution</see>.</value>
      <noremarks />
      <noexample />
      <winrt />
    </member>
    <member name="P:Leadtools.Forms.DocumentWriters.PdfDocumentOptions.MaintainAspectRatio_WinRT">
      <summary>
            This class implementation of <see cref="P:Leadtools.Forms.DocumentWriters.DocumentOptions.MaintainAspectRatio">DocumentOptions.MaintainAspectRatio</see>.
            </summary>
      <value>Refer to <see cref="P:Leadtools.Forms.DocumentWriters.DocumentOptions.MaintainAspectRatio">DocumentOptions.MaintainAspectRatio</see>.</value>
      <noremarks />
      <noexample />
      <winrt />
    </member>
    <member name="T:Leadtools.Forms.DocumentWriters.RtfDocumentOptions">
      <summary>Provides extra options to use when saving a document using the Rich Text Format (RTF). <a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
      <remarks>
        <para>The options set in the <see cref="T:Leadtools.Forms.DocumentWriters.RtfDocumentOptions" /> class will be used when the user saves a document using the <see cref="T:Leadtools.Forms.DocumentWriters.DocumentFormat">DocumentFormat.Rtf</see> format.</para>
        <para>To change the options used with the RTF format, perform the following steps:
            <list type="number"><item><description>Use the <see cref="M:Leadtools.Forms.DocumentWriters.DocumentWriter.GetOptions(Leadtools.Forms.DocumentWriters.DocumentFormat)">DocumentWriter.GetOptions</see> method of the <see cref="T:Leadtools.Forms.DocumentWriters.DocumentWriter" /> object being used. 
            Passing <see cref="T:Leadtools.Forms.DocumentWriters.DocumentFormat">DocumentFormat.Rtf</see> to the <i>format</i> parameter. Note that the resulting object from the
            base <see cref="T:Leadtools.Forms.DocumentWriters.DocumentOptions" /> class needs to be cast to <see cref="T:Leadtools.Forms.DocumentWriters.RtfDocumentOptions" />.</description></item><item><description>Use the various <see cref="T:Leadtools.Forms.DocumentWriters.RtfDocumentOptions" /> properties to change the options.</description></item><item><description>Use <see cref="M:Leadtools.Forms.DocumentWriters.DocumentWriter.SetOptions(Leadtools.Forms.DocumentWriters.DocumentFormat,Leadtools.Forms.DocumentWriters.DocumentOptions)">DocumentWriter.SetOptions</see> to set the new options in the engine.</description></item><item><description>Now you can call the <see cref="M:Leadtools.Forms.DocumentWriters.DocumentWriter.BeginDocument(System.String,Leadtools.Forms.DocumentWriters.DocumentFormat)">DocumentWriter.BeginDocument</see> method (with <see cref="T:Leadtools.Forms.DocumentWriters.DocumentFormat">DocumentFormat.Rtf</see> for the
            <i>format</i> parameter) to create a new document and add the pages.</description></item></list></para>
        <para>The <see cref="T:Leadtools.Forms.DocumentWriters.RtfDocumentOptions" /> class contains the following properties:
            <list type="table"><listheader><term>Property</term><description>Description</description></listheader><item><term><see cref="P:Leadtools.Forms.DocumentWriters.RtfDocumentOptions.TextMode" /></term><description>Controls how and when to frames the text blocks in the resulting RTF file.</description></item></list></para>
        <para>Note that this format does not support calling <see cref="M:Leadtools.Forms.DocumentWriters.DocumentWriter.InsertPage(Leadtools.Forms.DocumentWriters.DocumentPage,System.Int32)">DocumentWriter.InsertPage</see>.</para>
      </remarks>
      <example>
        <p>This example will create a new HyperText Markup Language document (RTF) file using the various supported options.
            </p>
        <code lang="VB">      Imports Leadtools.Forms.DocumentWriters
      Imports Leadtools
      Imports Leadtools.Codecs

      &lt;TestMethod&gt; _
      Public Sub RtfDocumentOptionsExample()
         Dim inputFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "Leadtools.pdf")
         Dim outputFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "Example.rtf")
         ' Setup a new RasterCodecs object
         Dim codecs As New RasterCodecs()
         codecs.Options.RasterizeDocument.Load.Resolution = 300

         ' Get the number of pages in the input document
         Dim pageCount As Integer = codecs.GetTotalPages(inputFileName)

         ' Create a new instance of the LEADTOOLS Document Writer
         Dim docWriter As New DocumentWriter()

         ' Change the RTF options
         Dim rtfOptions As RtfDocumentOptions = DirectCast(docWriter.GetOptions(DocumentFormat.Rtf), RtfDocumentOptions)
         rtfOptions.TextMode = DocumentTextMode.Auto
         docWriter.SetOptions(DocumentFormat.Rtf, rtfOptions)

         ' Create a new Rtf document
         Console.WriteLine("Creating new Rtf document: {0}", outputFileName)
         docWriter.BeginDocument(outputFileName, DocumentFormat.Rtf)

         ' Loop through all the pages
         For pageNumber As Integer = 1 To pageCount
            ' Get the page as SVG
            Console.WriteLine("Loading page {0}", pageNumber)
            Dim page As New DocumentSvgPage()
            page.SvgDocument = codecs.LoadSvg(inputFileName, pageNumber, Nothing)

            ' Add the page
            Console.WriteLine("Adding page {0}", pageNumber)
            docWriter.AddPage(page)

            page.SvgDocument.Dispose()
         Next

         ' Finally finish writing the Rtf file on disk
         docWriter.EndDocument()
         codecs.Dispose()
      End Sub</code>
        <code lang="CS">      using Leadtools.Forms.DocumentWriters;
      using Leadtools;
      using Leadtools.Codecs;

      public void RtfDocumentOptionsExample()
      {
         var inputFileName = Path.Combine(LEAD_VARS.ImagesDir, "Leadtools.pdf");
         var outputFileName = Path.Combine(LEAD_VARS.ImagesDir, "Example.rtf");
         // Setup a new RasterCodecs object
         var codecs = new RasterCodecs();
         codecs.Options.RasterizeDocument.Load.Resolution = 300;

         // Get the number of pages in the input document
         var pageCount = codecs.GetTotalPages(inputFileName);

         // Create a new instance of the LEADTOOLS Document Writer
         var docWriter = new DocumentWriter();

         // Change the RTF options
         var rtfOptions = docWriter.GetOptions(DocumentFormat.Rtf) as RtfDocumentOptions;
         rtfOptions.TextMode = DocumentTextMode.Auto;
         docWriter.SetOptions(DocumentFormat.Rtf, rtfOptions);

         // Create a new Rtf document
         Console.WriteLine("Creating new Rtf document: {0}", outputFileName);
         docWriter.BeginDocument(outputFileName, DocumentFormat.Rtf);

         // Loop through all the pages
         for (var pageNumber = 1; pageNumber &lt;= pageCount; pageNumber++)
         {
            // Get the page as SVG
            Console.WriteLine("Loading page {0}", pageNumber);
            var page = new DocumentSvgPage();
            page.SvgDocument = codecs.LoadSvg(inputFileName, pageNumber, null);

            // Add the page
            Console.WriteLine("Adding page {0}", pageNumber);
            docWriter.AddPage(page);

            page.SvgDocument.Dispose();
         }

         // Finally finish writing the Rtf file on disk
         docWriter.EndDocument();
         codecs.Dispose();
      }</code>
      </example>
      <keywords>RTF|Document Writers,RTF</keywords>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.DocumentWriters.DocumentWriter" />
      <seealso cref="T:FT.Topics.ProgrammingWithDocumentWriters">Programming with LEADTOOLS Document Writers</seealso>
      <seealso cref="T:Leadtools.Topics.FilesToBeIncludedWithYourApplication">Files to be Included with Your Application</seealso>
      <seealso cref="T:Leadtools.Topics.UnlockingSpecialLEADFeatures">Unlocking Special LEAD Features</seealso>
    </member>
    <member name="M:Leadtools.Forms.DocumentWriters.RtfDocumentOptions.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Leadtools.Forms.DocumentWriters.RtfDocumentOptions" /> class. <a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
      <remarks>
        <para>The following table lists the default values of the <see cref="T:Leadtools.Forms.DocumentWriters.RtfDocumentOptions" /> properties:
            <list type="table"><listheader><term>Property</term><description>Value</description></listheader><item><term><see cref="P:Leadtools.Forms.DocumentWriters.RtfDocumentOptions.TextMode" /></term><description><see cref="T:Leadtools.Forms.DocumentWriters.DocumentTextMode">DocumentTextMode.Auto</see></description></item></list></para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.DocumentWriters.RtfDocumentOptions" />.</example>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.DocumentWriters.DocumentWriter" />
      <seealso cref="T:FT.Topics.ProgrammingWithDocumentWriters">Programming with LEADTOOLS Document Writers</seealso>
      <seealso cref="T:Leadtools.Topics.FilesToBeIncludedWithYourApplication">Files to be Included with Your Application</seealso>
      <seealso cref="T:Leadtools.Topics.UnlockingSpecialLEADFeatures">Unlocking Special LEAD Features</seealso>
    </member>
    <member name="M:Leadtools.Forms.DocumentWriters.RtfDocumentOptions.Clone">
      <summary>Creates an exact copy of this <see cref="T:Leadtools.Forms.DocumentWriters.DocumentOptions" />. <a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
      <returns>The <see cref="T:Leadtools.Forms.DocumentWriters.DocumentOptions" /> this method creates.</returns>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Forms.DocumentWriters.DocumentWriter" />.</example>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.DocumentWriters.DocumentWriter">Document Writers</seealso>
      <seealso cref="T:FT.Topics.ProgrammingWithDocumentWriters">Programming with LEADTOOLS Document Writers</seealso>
      <seealso cref="T:Leadtools.Topics.FilesToBeIncludedWithYourApplication">Files to be Included with Your Application</seealso>
      <seealso cref="T:Leadtools.Topics.UnlockingSpecialLEADFeatures">Unlocking Special LEAD Features</seealso>
    </member>
    <member name="P:Leadtools.Forms.DocumentWriters.RtfDocumentOptions.Format">
      <summary>Gets the document format type associated with this options class. <a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
      <value>This property will always return <see cref="T:Leadtools.Forms.DocumentWriters.DocumentFormat">DocumentFormat.Rtf</see>.</value>
      <remarks>
        <para>This property is required internally by LEADTOOLS.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.DocumentWriters.RtfDocumentOptions" />.</example>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.DocumentWriters.DocumentWriter" />
      <seealso cref="T:FT.Topics.ProgrammingWithDocumentWriters">Programming with LEADTOOLS Document Writers</seealso>
      <seealso cref="T:Leadtools.Topics.FilesToBeIncludedWithYourApplication">Files to be Included with Your Application</seealso>
      <seealso cref="T:Leadtools.Topics.UnlockingSpecialLEADFeatures">Unlocking Special LEAD Features</seealso>
    </member>
    <member name="P:Leadtools.Forms.DocumentWriters.RtfDocumentOptions.TextMode">
      <summary>Gets or sets a value that controls how and when to frames the text blocks in the resulting RTF file. <a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
      <value>Controls how and when to frames the text blocks in the resulting RTF file. Default value is <see cref="T:Leadtools.Forms.DocumentWriters.DocumentTextMode">DocumentTextMode.Auto</see>.</value>
      <remarks>
        <para>Frames are containers supported by the RTF format for text that can be positioned on a page and sized.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.DocumentWriters.RtfDocumentOptions" />.</example>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.DocumentWriters.DocumentWriter" />
      <seealso cref="T:FT.Topics.ProgrammingWithDocumentWriters">Programming with LEADTOOLS Document Writers</seealso>
      <seealso cref="T:Leadtools.Topics.FilesToBeIncludedWithYourApplication">Files to be Included with Your Application</seealso>
      <seealso cref="T:Leadtools.Topics.UnlockingSpecialLEADFeatures">Unlocking Special LEAD Features</seealso>
    </member>
    <member name="T:Leadtools.Forms.DocumentWriters.TextDocumentOptions">
      <summary>Provides extra options to use when saving a document to a text file using the LEADTOOLS <see cref="T:Leadtools.Forms.DocumentWriters.DocumentWriter" />. <a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="WinRTicon.png" class="WinRTIconTag" name="WinRTIconTag" title="WinRT support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="winrtphone.png" class="WinRTPhoneIconTag" name="WinRTPhoneIconTag" title="WinRT Phone support" border="0" /></a></summary>
      <remarks>
        <para>The options set in the <see cref="T:Leadtools.Forms.DocumentWriters.TextDocumentOptions" /> class will be used when the user saves a document using the <see cref="T:Leadtools.Forms.DocumentWriters.DocumentFormat">DocumentFormat.Text</see> format.</para>
        <para>To change the options used with the Text format, perform the following steps:
            <ol><li>Use the <see cref="M:Leadtools.Forms.DocumentWriters.DocumentWriter.GetOptions(Leadtools.Forms.DocumentWriters.DocumentFormat)">DocumentWriter.GetOptions</see> method of the <see cref="T:Leadtools.Forms.DocumentWriters.DocumentWriter" /> object being used. 
                 Passing <see cref="T:Leadtools.Forms.DocumentWriters.DocumentFormat">DocumentFormat.Text</see> to the <i>format</i> parameter. Note that the resulting object from the
                 base <see cref="T:Leadtools.Forms.DocumentWriters.DocumentOptions" /> class needs to be cast to <see cref="T:Leadtools.Forms.DocumentWriters.TextDocumentOptions" />.</li><li>Use the various <see cref="T:Leadtools.Forms.DocumentWriters.TextDocumentOptions" /> properties to change the options.</li><li>Use <see cref="M:Leadtools.Forms.DocumentWriters.DocumentWriter.SetOptions(Leadtools.Forms.DocumentWriters.DocumentFormat,Leadtools.Forms.DocumentWriters.DocumentOptions)">DocumentWriter.SetOptions</see> to set the new options in the engine.</li><li>Now you can call the <see cref="M:Leadtools.Forms.DocumentWriters.DocumentWriter.BeginDocument(System.String,Leadtools.Forms.DocumentWriters.DocumentFormat)">DocumentWriter.BeginDocument</see> method (with <see cref="T:Leadtools.Forms.DocumentWriters.DocumentFormat">DocumentFormat.Text</see> for the
               <i>format</i> parameter) to create a new document and add the pages.</li></ol></para>
        <para>The <see cref="T:Leadtools.Forms.DocumentWriters.TextDocumentOptions" /> class contains the following properties:
            <table><tr><th>Property</th><th>Description</th></tr><tr><td><see cref="P:Leadtools.Forms.DocumentWriters.TextDocumentOptions.DocumentType" /></td><td>The type of the Text document (ANSI, UTF8 or UNICODE).</td></tr><tr><td><see cref="P:Leadtools.Forms.DocumentWriters.TextDocumentOptions.Formatted" /></td><td>To control whether the output file will be just a flow of text or try to maintain almost the same shape of original page (i.e. margins and lines between paragraphs using spaces).</td></tr><tr><td><see cref="P:Leadtools.Forms.DocumentWriters.TextDocumentOptions.AddPageBreak" /></td><td>Add an optional marker between pages in the resulting text file.</td></tr><tr><td><see cref="P:Leadtools.Forms.DocumentWriters.TextDocumentOptions.AddPageNumber" /></td><td>Print the page numbers in the resulting text file.</td></tr></table></para>
        <para>Note that this format does not support calling <see cref="M:Leadtools.Forms.DocumentWriters.DocumentWriter.InsertPage(Leadtools.Forms.DocumentWriters.DocumentPage,System.Int32)">DocumentWriter.InsertPage</see>.</para>
      </remarks>
      <example>
        <p>This example will create a new text file using the various supported options.
            </p>
        <code lang="VB">      Imports Leadtools.Forms.DocumentWriters
      Imports Leadtools
      Imports Leadtools.Codecs

      &lt;TestMethod&gt; _
      Public Sub TextDocumentOptionsExample()
         Dim inputFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "Leadtools.pdf")
         Dim outputFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "Example.txt")
         ' Setup a new RasterCodecs object
         Dim codecs As New RasterCodecs()
         codecs.Options.RasterizeDocument.Load.Resolution = 300

         ' Get the number of pages in the input document
         Dim pageCount As Integer = codecs.GetTotalPages(inputFileName)

         ' Create a new instance of the LEADTOOLS Document Writer
         Dim docWriter As New DocumentWriter()

         ' Change the Text options
         Dim textOptions As TextDocumentOptions = DirectCast(docWriter.GetOptions(DocumentFormat.Text), TextDocumentOptions)
         textOptions.DocumentType = TextDocumentType.Ansi
         textOptions.AddPageNumber = True
         textOptions.AddPageBreak = True
         textOptions.Formatted = True
         docWriter.SetOptions(DocumentFormat.Text, textOptions)

         ' Create a new Text document
         Console.WriteLine("Creating new Text document: {0}", outputFileName)
         docWriter.BeginDocument(outputFileName, DocumentFormat.Text)

         ' Loop through all the pages
         For pageNumber As Integer = 1 To pageCount
            ' Get the page as SVG
            Console.WriteLine("Loading page {0}", pageNumber)
            Dim page As New DocumentSvgPage()
            page.SvgDocument = codecs.LoadSvg(inputFileName, pageNumber, Nothing)

            ' Add the page
            Console.WriteLine("Adding page {0}", pageNumber)
            docWriter.AddPage(page)

            page.SvgDocument.Dispose()
         Next

         ' Finally finish writing the Text file on disk
         docWriter.EndDocument()
         codecs.Dispose()
      End Sub</code>
        <code lang="CS">      using Leadtools.Forms.DocumentWriters;
      using Leadtools;
      using Leadtools.Codecs;

      public void TextDocumentOptionsExample()
      {
         var inputFileName = Path.Combine(LEAD_VARS.ImagesDir, "Leadtools.pdf");
         var outputFileName = Path.Combine(LEAD_VARS.ImagesDir, "Example.txt");
         // Setup a new RasterCodecs object
         var codecs = new RasterCodecs();
         codecs.Options.RasterizeDocument.Load.Resolution = 300;

         // Get the number of pages in the input document
         var pageCount = codecs.GetTotalPages(inputFileName);

         // Create a new instance of the LEADTOOLS Document Writer
         var docWriter = new DocumentWriter();

         // Change the Text options
         var textOptions = docWriter.GetOptions(DocumentFormat.Text) as TextDocumentOptions;
         textOptions.DocumentType = TextDocumentType.Ansi;
         textOptions.AddPageNumber = true;
         textOptions.AddPageBreak = true;
         textOptions.Formatted = true;
         docWriter.SetOptions(DocumentFormat.Text, textOptions);

         // Create a new Text document
         Console.WriteLine("Creating new Text document: {0}", outputFileName);
         docWriter.BeginDocument(outputFileName, DocumentFormat.Text);

         // Loop through all the pages
         for (var pageNumber = 1; pageNumber &lt;= pageCount; pageNumber++)
         {
            // Get the page as SVG
            Console.WriteLine("Loading page {0}", pageNumber);
            var page = new DocumentSvgPage();
            page.SvgDocument = codecs.LoadSvg(inputFileName, pageNumber, null);

            // Add the page
            Console.WriteLine("Adding page {0}", pageNumber);
            docWriter.AddPage(page);

            page.SvgDocument.Dispose();
         }

         // Finally finish writing the Text file on disk
         docWriter.EndDocument();
         codecs.Dispose();
      }</code>
      </example>
      <keywords>TXT|Text|Document Writers,Text|Document Writers,TXT</keywords>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.DocumentWriters.DocumentWriter" />
      <seealso cref="T:FT.Topics.ProgrammingWithDocumentWriters">Programming with LEADTOOLS Document Writers</seealso>
      <seealso cref="T:Leadtools.Topics.FilesToBeIncludedWithYourApplication">Files to be Included with Your Application</seealso>
      <seealso cref="T:Leadtools.Topics.UnlockingSpecialLEADFeatures">Unlocking Special LEAD Features</seealso>
    </member>
    <member name="M:Leadtools.Forms.DocumentWriters.TextDocumentOptions.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Leadtools.Forms.DocumentWriters.TextDocumentOptions" /> class. <a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
      <remarks>
        <para>The following table lists the default values of the <see cref="T:Leadtools.Forms.DocumentWriters.TextDocumentOptions" /> properties:
            <table><tr><th>Property</th><th>Value</th></tr><tr><td><see cref="P:Leadtools.Forms.DocumentWriters.TextDocumentOptions.DocumentType" /></td><td><see cref="T:Leadtools.Forms.DocumentWriters.TextDocumentType">TextDocumentType.Ansi</see></td></tr><tr><td><see cref="P:Leadtools.Forms.DocumentWriters.TextDocumentOptions.AddPageNumber" /></td><td><strong>false</strong></td></tr><tr><td><see cref="P:Leadtools.Forms.DocumentWriters.TextDocumentOptions.AddPageBreak" /></td><td><strong>false</strong></td></tr><tr><td><see cref="P:Leadtools.Forms.DocumentWriters.TextDocumentOptions.Formatted" /></td><td><strong>false</strong></td></tr></table></para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.DocumentWriters.TextDocumentOptions" />.</example>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.DocumentWriters.DocumentWriter" />
      <seealso cref="T:FT.Topics.ProgrammingWithDocumentWriters">Programming with LEADTOOLS Document Writers</seealso>
      <seealso cref="T:Leadtools.Topics.FilesToBeIncludedWithYourApplication">Files to be Included with Your Application</seealso>
      <seealso cref="T:Leadtools.Topics.UnlockingSpecialLEADFeatures">Unlocking Special LEAD Features</seealso>
    </member>
    <member name="M:Leadtools.Forms.DocumentWriters.TextDocumentOptions.Clone">
      <summary>Creates an exact copy of this <see cref="T:Leadtools.Forms.DocumentWriters.DocumentOptions" />. <a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="WinRTicon.png" class="WinRTIconTag" name="WinRTIconTag" title="WinRT support" border="0" /></a></summary>
      <returns>The <see cref="T:Leadtools.Forms.DocumentWriters.DocumentOptions" /> this method creates.</returns>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Forms.DocumentWriters.DocumentWriter" />.</example>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.DocumentWriters.DocumentWriter">Document Writers</seealso>
      <seealso cref="T:FT.Topics.ProgrammingWithDocumentWriters">Programming with LEADTOOLS Document Writers</seealso>
      <seealso cref="T:Leadtools.Topics.FilesToBeIncludedWithYourApplication">Files to be Included with Your Application</seealso>
      <seealso cref="T:Leadtools.Topics.UnlockingSpecialLEADFeatures">Unlocking Special LEAD Features</seealso>
    </member>
    <member name="M:Leadtools.Forms.DocumentWriters.TextDocumentOptions.Clone_WinRT">
      <summary>
            This class implementation of <see cref="T:Leadtools.Forms.DocumentWriters.DocumentOptions" />.
            </summary>
      <returns>Refer to <see cref="M:Leadtools.Forms.DocumentWriters.DocumentOptions.Clone">DocumentOptions.Clone</see>.</returns>
      <noremarks />
      <noexample />
      <winrt />
    </member>
    <member name="P:Leadtools.Forms.DocumentWriters.TextDocumentOptions.Format">
      <summary>Gets the document format type associated with this options class. <a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="WinRTicon.png" class="WinRTIconTag" name="WinRTIconTag" title="WinRT support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="winrtphone.png" class="WinRTPhoneIconTag" name="WinRTPhoneIconTag" title="WinRT Phone support" border="0" /></a></summary>
      <value>This property will always return <see cref="T:Leadtools.Forms.DocumentWriters.DocumentFormat">DocumentFormat.Text</see>.</value>
      <remarks>
        <para>This property is required internally by LEADTOOLS.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.DocumentWriters.TextDocumentOptions" />.</example>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.DocumentWriters.DocumentWriter" />
      <seealso cref="T:FT.Topics.ProgrammingWithDocumentWriters">Programming with LEADTOOLS Document Writers</seealso>
      <seealso cref="T:Leadtools.Topics.FilesToBeIncludedWithYourApplication">Files to be Included with Your Application</seealso>
      <seealso cref="T:Leadtools.Topics.UnlockingSpecialLEADFeatures">Unlocking Special LEAD Features</seealso>
    </member>
    <member name="P:Leadtools.Forms.DocumentWriters.TextDocumentOptions.AddPageBreak">
      <summary>Gets or sets a value that indicates whether the resulting text file should have page breaks. <a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="WinRTicon.png" class="WinRTIconTag" name="WinRTIconTag" title="WinRT support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="winrtphone.png" class="WinRTPhoneIconTag" name="WinRTPhoneIconTag" title="WinRT Phone support" border="0" /></a></summary>
      <value>
        <strong>true</strong> to add page breaks in the final text document, otherwise; <strong>false</strong>. Default value is <strong>false</strong>.</value>
      <remarks>
        <para>Page breaks are markers which indicate the end of a page. The text format is not a multi-page format and so this property 
            helps to determine the end of page.</para>
        <para>The default value of this property is <strong>false</strong>.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.DocumentWriters.TextDocumentOptions" />.</example>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.DocumentWriters.DocumentWriter" />
      <seealso cref="T:FT.Topics.ProgrammingWithDocumentWriters">Programming with LEADTOOLS Document Writers</seealso>
      <seealso cref="T:Leadtools.Topics.FilesToBeIncludedWithYourApplication">Files to be Included with Your Application</seealso>
      <seealso cref="T:Leadtools.Topics.UnlockingSpecialLEADFeatures">Unlocking Special LEAD Features</seealso>
    </member>
    <member name="P:Leadtools.Forms.DocumentWriters.TextDocumentOptions.AddPageNumber">
      <summary>Get or sets a value that indicates whether text file should have page numbers. <a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="WinRTicon.png" class="WinRTIconTag" name="WinRTIconTag" title="WinRT support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="winrtphone.png" class="WinRTPhoneIconTag" name="WinRTPhoneIconTag" title="WinRT Phone support" border="0" /></a></summary>
      <value>
        <strong>true</strong> to add page numbers to the final text document, otherwise; <strong>false</strong>. Default value is <strong>false</strong>.</value>
      <remarks>
        <para>When the value of this property is <strong>true</strong>, the number of each page is written in resulting text file. 
            The text format is not a multi-page format, so this property
            helps to determine the number and position of written pages.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.DocumentWriters.TextDocumentOptions" />.</example>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.DocumentWriters.DocumentWriter" />
      <seealso cref="T:FT.Topics.ProgrammingWithDocumentWriters">Programming with LEADTOOLS Document Writers</seealso>
      <seealso cref="T:Leadtools.Topics.FilesToBeIncludedWithYourApplication">Files to be Included with Your Application</seealso>
      <seealso cref="T:Leadtools.Topics.UnlockingSpecialLEADFeatures">Unlocking Special LEAD Features</seealso>
    </member>
    <member name="P:Leadtools.Forms.DocumentWriters.TextDocumentOptions.Formatted">
      <summary>Get or sets a value that indicates whether the text file should be formatted. <a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="WinRTicon.png" class="WinRTIconTag" name="WinRTIconTag" title="WinRT support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="winrtphone.png" class="WinRTPhoneIconTag" name="WinRTPhoneIconTag" title="WinRT Phone support" border="0" /></a></summary>
      <value>
        <strong>true</strong> if the text file should be formatted, otherwise; <strong>false</strong>. Default value is <strong>false</strong>.</value>
      <remarks>
        <para>Use this property to create a text file that will be almost the same shape as the original document (i.e. margins and lines between paragraphs using
            space characters).</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.DocumentWriters.TextDocumentOptions" />.</example>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.DocumentWriters.DocumentWriter" />
      <seealso cref="T:FT.Topics.ProgrammingWithDocumentWriters">Programming with LEADTOOLS Document Writers</seealso>
      <seealso cref="T:Leadtools.Topics.FilesToBeIncludedWithYourApplication">Files to be Included with Your Application</seealso>
      <seealso cref="T:Leadtools.Topics.UnlockingSpecialLEADFeatures">Unlocking Special LEAD Features</seealso>
    </member>
    <member name="P:Leadtools.Forms.DocumentWriters.TextDocumentOptions.DocumentType">
      <summary>Gets or sets the value that indicates the text file type. <a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="WinRTicon.png" class="WinRTIconTag" name="WinRTIconTag" title="WinRT support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="winrtphone.png" class="WinRTPhoneIconTag" name="WinRTPhoneIconTag" title="WinRT Phone support" border="0" /></a></summary>
      <value>An <see cref="T:Leadtools.Forms.DocumentWriters.TextDocumentType" /> enumeration member that indicate the text file type.</value>
      <remarks>
        <para>For more information, refer to <see cref="T:Leadtools.Forms.DocumentWriters.TextDocumentType" />.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.DocumentWriters.TextDocumentOptions" />.</example>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.DocumentWriters.DocumentWriter" />
      <seealso cref="T:FT.Topics.ProgrammingWithDocumentWriters">Programming with LEADTOOLS Document Writers</seealso>
      <seealso cref="T:Leadtools.Topics.FilesToBeIncludedWithYourApplication">Files to be Included with Your Application</seealso>
      <seealso cref="T:Leadtools.Topics.UnlockingSpecialLEADFeatures">Unlocking Special LEAD Features</seealso>
    </member>
    <member name="P:Leadtools.Forms.DocumentWriters.TextDocumentOptions.Format_WinRT">
      <summary>
            This class implementation of <see cref="P:Leadtools.Forms.DocumentWriters.DocumentOptions.Format">DocumentOptions.Format</see>.
            </summary>
      <value>Refer to <see cref="P:Leadtools.Forms.DocumentWriters.DocumentOptions.Format">DocumentOptions.Format</see>.</value>
      <noremarks />
      <noexample />
      <winrt />
    </member>
    <member name="P:Leadtools.Forms.DocumentWriters.TextDocumentOptions.PageRestriction_WinRT">
      <summary>
            This class implementation of <see cref="P:Leadtools.Forms.DocumentWriters.DocumentOptions.PageRestriction">DocumentOptions.PageRestriction</see>.
            </summary>
      <value>Refer to <see cref="P:Leadtools.Forms.DocumentWriters.DocumentOptions.PageRestriction">DocumentOptions.PageRestriction</see>.</value>
      <noremarks />
      <noexample />
      <winrt />
    </member>
    <member name="P:Leadtools.Forms.DocumentWriters.TextDocumentOptions.EmptyPageWidth_WinRT">
      <summary>
            This class implementation of <see cref="P:Leadtools.Forms.DocumentWriters.DocumentOptions.EmptyPageWidth">DocumentOptions.EmptyPageWidth</see>.
            </summary>
      <value>Refer to <see cref="P:Leadtools.Forms.DocumentWriters.DocumentOptions.EmptyPageWidth">DocumentOptions.EmptyPageWidth</see>.</value>
      <noremarks />
      <noexample />
      <winrt />
    </member>
    <member name="P:Leadtools.Forms.DocumentWriters.TextDocumentOptions.EmptyPageHeight_WinRT">
      <summary>
            This class implementation of <see cref="P:Leadtools.Forms.DocumentWriters.DocumentOptions.EmptyPageHeight">DocumentOptions.EmptyPageHeight</see>.
            </summary>
      <value>Refer to <see cref="P:Leadtools.Forms.DocumentWriters.DocumentOptions.EmptyPageHeight">DocumentOptions.EmptyPageHeight</see>.</value>
      <noremarks />
      <noexample />
      <winrt />
    </member>
    <member name="P:Leadtools.Forms.DocumentWriters.TextDocumentOptions.EmptyPageResolution_WinRT">
      <summary>
            This class implementation of <see cref="P:Leadtools.Forms.DocumentWriters.DocumentOptions.EmptyPageResolution">DocumentOptions.EmptyPageResolution</see>.
            </summary>
      <value>Refer to <see cref="P:Leadtools.Forms.DocumentWriters.DocumentOptions.EmptyPageResolution">DocumentOptions.EmptyPageResolution</see>.</value>
      <noremarks />
      <noexample />
      <winrt />
    </member>
    <member name="P:Leadtools.Forms.DocumentWriters.TextDocumentOptions.DocumentResolution_WinRT">
      <summary>This class implementation of <see cref="P:Leadtools.Forms.DocumentWriters.DocumentOptions.DocumentResolution">DocumentOptions.DocumentResolution</see>. <a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="WinRTicon.png" class="WinRTIconTag" name="WinRTIconTag" title="WinRT support" border="0" /></a><a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="winrtphone.png" class="WinRTPhoneIconTag" name="WinRTPhoneIconTag" title="WinRT Phone support" border="0" /></a></summary>
      <value>Refer to <see cref="P:Leadtools.Forms.DocumentWriters.DocumentOptions.DocumentResolution">DocumentOptions.DocumentResolution</see>.</value>
      <noremarks />
      <noexample />
      <winrt />
    </member>
    <member name="P:Leadtools.Forms.DocumentWriters.TextDocumentOptions.MaintainAspectRatio_WinRT">
      <summary>
            This class implementation of <see cref="P:Leadtools.Forms.DocumentWriters.DocumentOptions.MaintainAspectRatio">DocumentOptions.MaintainAspectRatio</see>.
            </summary>
      <value>Refer to <see cref="P:Leadtools.Forms.DocumentWriters.DocumentOptions.MaintainAspectRatio">DocumentOptions.MaintainAspectRatio</see>.</value>
      <noremarks />
      <noexample />
      <winrt />
    </member>
    <member name="T:Leadtools.Forms.DocumentWriters.XpsDocumentOptions">
      <summary>Provides extra options to use when saving a document using the Microsoft Open XML Paper Specification format (XPS). <a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
      <keywords>OCR, XPS|Recognize, XPS|XPS | XPS|Document Writers,XPS</keywords>
      <remarks>
        <para>The options set in the <see cref="T:Leadtools.Forms.DocumentWriters.XpsDocumentOptions" /> class will be used when the user saves a document using the <see cref="T:Leadtools.Forms.DocumentWriters.DocumentFormat">DocumentFormat.Xps</see> format.</para>
        <para>To change the options used with the XPS format, perform the following steps:
            <list type="number"><item><description>Use the <see cref="M:Leadtools.Forms.DocumentWriters.DocumentWriter.GetOptions(Leadtools.Forms.DocumentWriters.DocumentFormat)">DocumentWriter.GetOptions</see> method of the <see cref="T:Leadtools.Forms.DocumentWriters.DocumentWriter" /> object being used, 
            passing <see cref="T:Leadtools.Forms.DocumentWriters.DocumentFormat">DocumentFormat.Xps</see> to the <i>format</i> parameter. Note the resulting object from the
            base <see cref="T:Leadtools.Forms.DocumentWriters.DocumentOptions" /> class needs to be cast to <see cref="T:Leadtools.Forms.DocumentWriters.XpsDocumentOptions" />.</description></item><item><description>Use the various <see cref="T:Leadtools.Forms.DocumentWriters.XpsDocumentOptions" /> properties to change the options.</description></item><item><description>Use <see cref="M:Leadtools.Forms.DocumentWriters.DocumentWriter.SetOptions(Leadtools.Forms.DocumentWriters.DocumentFormat,Leadtools.Forms.DocumentWriters.DocumentOptions)">DocumentWriter.SetOptions</see> to set the new options in the engine.</description></item><item><description>Now call the <see cref="M:Leadtools.Forms.DocumentWriters.DocumentWriter.BeginDocument(System.String,Leadtools.Forms.DocumentWriters.DocumentFormat)">DocumentWriter.BeginDocument</see> method (with <see cref="T:Leadtools.Forms.DocumentWriters.DocumentFormat">DocumentFormat.Xps</see> for the
            <i>format</i> parameter) to create a new document and add the pages.</description></item></list></para>
        <para>Currently, the <see cref="T:Leadtools.Forms.DocumentWriters.XpsDocumentOptions" /> class contains no extra options.</para>
        <para> This format requires .NET framework 3.0 or later.</para>
      </remarks>
      <example>
        <p>This example will create a new Windows Enhanced Meta File (EMF) file using the various supported options.
            </p>
        <code lang="VB">      Imports Leadtools.Forms.DocumentWriters
      Imports Leadtools
      Imports Leadtools.Codecs

      &lt;TestMethod&gt; _
      Public Sub XpsDocumentOptionsExample()
         Dim inputFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "Leadtools.pdf")
         Dim outputFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "Example.xps")
         ' Setup a new RasterCodecs object
         Dim codecs As New RasterCodecs()
         codecs.Options.RasterizeDocument.Load.Resolution = 300

         ' Get the number of pages in the input document
         Dim pageCount As Integer = codecs.GetTotalPages(inputFileName)

         ' Create a new instance of the LEADTOOLS Document Writer
         Dim docWriter As New DocumentWriter()

         ' Change the XPS options
         Dim xpsOptions As XpsDocumentOptions = DirectCast(docWriter.GetOptions(DocumentFormat.Xps), XpsDocumentOptions)
         ' XPS currently does not have any extra options
         ' In the future, you can modify the options here if needed
         docWriter.SetOptions(DocumentFormat.Xps, xpsOptions)

         ' Create a new XPS document
         Console.WriteLine("Creating new XPS document: {0}", outputFileName)
         docWriter.BeginDocument(outputFileName, DocumentFormat.Xps)

         ' Loop through all the pages
         For pageNumber As Integer = 1 To pageCount
            ' Get the page as SVG
            Console.WriteLine("Loading page {0}", pageNumber)
            Dim page As New DocumentSvgPage()
            page.SvgDocument = codecs.LoadSvg(inputFileName, pageNumber, Nothing)

            ' Add the page
            Console.WriteLine("Adding page {0}", pageNumber)
            docWriter.AddPage(page)

            page.SvgDocument.Dispose()
         Next

         ' Finally finish writing the XPS file on disk
         docWriter.EndDocument()
         codecs.Dispose()
      End Sub</code>
        <code lang="CS">      using Leadtools.Forms.DocumentWriters;
      using Leadtools;
      using Leadtools.Codecs;

      public void XpsDocumentOptionsExample()
      {
         var inputFileName = Path.Combine(LEAD_VARS.ImagesDir, "Leadtools.pdf");
         var outputFileName = Path.Combine(LEAD_VARS.ImagesDir, "Example.xps");
         // Setup a new RasterCodecs object
         var codecs = new RasterCodecs();
         codecs.Options.RasterizeDocument.Load.Resolution = 300;

         // Get the number of pages in the input document
         var pageCount = codecs.GetTotalPages(inputFileName);

         // Create a new instance of the LEADTOOLS Document Writer
         var docWriter = new DocumentWriter();

         // Change the XPS options
         var xpsOptions = docWriter.GetOptions(DocumentFormat.Xps) as XpsDocumentOptions;
         // XPS currently does not have any extra options
         // In the future, you can modify the options here if needed
         docWriter.SetOptions(DocumentFormat.Xps, xpsOptions);

         // Create a new XPS document
         Console.WriteLine("Creating new XPS document: {0}", outputFileName);
         docWriter.BeginDocument(outputFileName, DocumentFormat.Xps);

         // Loop through all the pages
         for (var pageNumber = 1; pageNumber &lt;= pageCount; pageNumber++)
         {
            // Get the page as SVG
            Console.WriteLine("Loading page {0}", pageNumber);
            var page = new DocumentSvgPage();
            page.SvgDocument = codecs.LoadSvg(inputFileName, pageNumber, null);

            // Add the page
            Console.WriteLine("Adding page {0}", pageNumber);
            docWriter.AddPage(page);

            page.SvgDocument.Dispose();
         }

         // Finally finish writing the XPS file on disk
         docWriter.EndDocument();
         codecs.Dispose();
      }</code>
      </example>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.DocumentWriters.DocumentWriter" />
      <seealso cref="T:FT.Topics.ProgrammingWithDocumentWriters">Programming with LEADTOOLS Document Writers</seealso>
      <seealso cref="T:Leadtools.Topics.FilesToBeIncludedWithYourApplication">Files to be Included with Your Application</seealso>
      <seealso cref="T:Leadtools.Topics.UnlockingSpecialLEADFeatures">Unlocking Special LEAD Features</seealso>
    </member>
    <member name="M:Leadtools.Forms.DocumentWriters.XpsDocumentOptions.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Leadtools.Forms.DocumentWriters.XpsDocumentOptions" /> class. <a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
      <remarks>
        <para>Currently, the <see cref="T:Leadtools.Forms.DocumentWriters.XpsDocumentOptions" /> class contains no extra options.</para>
      </remarks>
      <noexample />
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.DocumentWriters.DocumentWriter" />
      <seealso cref="T:FT.Topics.ProgrammingWithDocumentWriters">Programming with LEADTOOLS Document Writers</seealso>
      <seealso cref="T:Leadtools.Topics.FilesToBeIncludedWithYourApplication">Files to be Included with Your Application</seealso>
      <seealso cref="T:Leadtools.Topics.UnlockingSpecialLEADFeatures">Unlocking Special LEAD Features</seealso>
    </member>
    <member name="M:Leadtools.Forms.DocumentWriters.XpsDocumentOptions.Clone">
      <summary>Creates an exact copy of this <see cref="T:Leadtools.Forms.DocumentWriters.DocumentOptions" />. <a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
      <returns>The <see cref="T:Leadtools.Forms.DocumentWriters.DocumentOptions" /> this method creates.</returns>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Forms.DocumentWriters.DocumentWriter" />.</example>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.DocumentWriters.DocumentWriter">Document Writers</seealso>
      <seealso cref="T:FT.Topics.ProgrammingWithDocumentWriters">Programming with LEADTOOLS Document Writers</seealso>
      <seealso cref="T:Leadtools.Topics.FilesToBeIncludedWithYourApplication">Files to be Included with Your Application</seealso>
      <seealso cref="T:Leadtools.Topics.UnlockingSpecialLEADFeatures">Unlocking Special LEAD Features</seealso>
    </member>
    <member name="P:Leadtools.Forms.DocumentWriters.XpsDocumentOptions.Format">
      <summary>Gets the document format type associated with this options class. <a href="../TO/Leadtools.Topics~Leadtools.Topics.Environment.html"><img src="dotnet.png" class="NETIconTag" name="NETIconTag" title=".NET support" border="0" /></a></summary>
      <value>This property will always return <see cref="T:Leadtools.Forms.DocumentWriters.DocumentFormat">DocumentFormat.Xps</see>.</value>
      <remarks>
        <para>This property is required internally by LEADTOOLS.</para>
      </remarks>
      <noexample />
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.DocumentWriters.DocumentWriter" />
      <seealso cref="T:FT.Topics.ProgrammingWithDocumentWriters">Programming with LEADTOOLS Document Writers</seealso>
      <seealso cref="T:Leadtools.Topics.FilesToBeIncludedWithYourApplication">Files to be Included with Your Application</seealso>
      <seealso cref="T:Leadtools.Topics.UnlockingSpecialLEADFeatures">Unlocking Special LEAD Features</seealso>
    </member>
  </members>
</doc>